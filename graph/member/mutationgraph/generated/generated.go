// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/mirror-media/apigateway/graph/member/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Mutation struct {
		CreateSubscriptionRecurring func(childComplexity int, data map[string]interface{}, info model.SubscriptionRecurringCreateInfo) int
		Createmember                func(childComplexity int, data map[string]interface{}) int
		CreatesSubscriptionOneTime  func(childComplexity int, data map[string]interface{}, info model.SubscriptionOneTimeCreateInfo) int
		Updatemember                func(childComplexity int, id string, data map[string]interface{}) int
		Updatesubscription          func(childComplexity int, id string, data map[string]interface{}) int
	}

	Query struct {
	}

	AndroidpayPayment struct {
		CreatedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		Invoice      func(childComplexity int) int
		Subscription func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	ApplepayPayment struct {
		CreatedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		Invoice      func(childComplexity int) int
		Subscription func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	Invoice struct {
		Amount            func(childComplexity int) int
		AndroidpayPayment func(childComplexity int) int
		ApplepayPayment   func(childComplexity int) int
		BuyerName         func(childComplexity int) int
		BuyerUbn          func(childComplexity int) int
		CarrierNum        func(childComplexity int) int
		CarrierType       func(childComplexity int) int
		Category          func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		Desc              func(childComplexity int) int
		Email             func(childComplexity int) int
		ID                func(childComplexity int) int
		InvoiceNo         func(childComplexity int) int
		LoveCode          func(childComplexity int) int
		NewebpayPayment   func(childComplexity int) int
		Status            func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
	}

	MarketingMembership struct {
		ApprovedBy     func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		EndDate        func(childComplexity int) int
		ID             func(childComplexity int) int
		Member         func(childComplexity int) int
		RequesterEmail func(childComplexity int) int
		StartDate      func(childComplexity int) int
		Status         func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}

	Member struct {
		Address             func(childComplexity int) int
		Birthday            func(childComplexity int) int
		City                func(childComplexity int) int
		Country             func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		DateJoined          func(childComplexity int) int
		District            func(childComplexity int) int
		Email               func(childComplexity int) int
		FirebaseID          func(childComplexity int) int
		FirstName           func(childComplexity int) int
		Gender              func(childComplexity int) int
		ID                  func(childComplexity int) int
		LastName            func(childComplexity int) int
		MarketingMembership func(childComplexity int) int
		Name                func(childComplexity int) int
		Nickname            func(childComplexity int) int
		Phone               func(childComplexity int) int
		ProfileImage        func(childComplexity int) int
		State               func(childComplexity int) int
		Subscription        func(childComplexity int, where model.SubscriptionWhereInput, search *string, orderBy []*model.SubscriptionOrderByInput, first *int, skip int) int
		SubscriptionCount   func(childComplexity int, where model.SubscriptionWhereInput) int
		Tos                 func(childComplexity int) int
		Type                func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
	}

	MemberInfo struct {
		Address      func(childComplexity int) int
		Birthday     func(childComplexity int) int
		City         func(childComplexity int) int
		Country      func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		DateJoined   func(childComplexity int) int
		District     func(childComplexity int) int
		Email        func(childComplexity int) int
		FirebaseID   func(childComplexity int) int
		FirstName    func(childComplexity int) int
		Gender       func(childComplexity int) int
		ID           func(childComplexity int) int
		LastName     func(childComplexity int) int
		Name         func(childComplexity int) int
		Nickname     func(childComplexity int) int
		Phone        func(childComplexity int) int
		ProfileImage func(childComplexity int) int
		State        func(childComplexity int) int
		Tos          func(childComplexity int) int
		Type         func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	Merchandise struct {
		Code      func(childComplexity int) int
		Comment   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		Currency  func(childComplexity int) int
		Desc      func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Price     func(childComplexity int) int
		State     func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	NewebpayPayment struct {
		Amount           func(childComplexity int) int
		AuthBank         func(childComplexity int) int
		AuthCode         func(childComplexity int) int
		CardInfoExp      func(childComplexity int) int
		CardInfoFirstSix func(childComplexity int) int
		CardInfoLastFour func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Eci              func(childComplexity int) int
		ID               func(childComplexity int) int
		Invoice          func(childComplexity int) int
		MerchantID       func(childComplexity int) int
		Message          func(childComplexity int) int
		OrderNumber      func(childComplexity int) int
		PaymentMethod    func(childComplexity int) int
		PaymentTime      func(childComplexity int) int
		RespondCode      func(childComplexity int) int
		Status           func(childComplexity int) int
		Subscription     func(childComplexity int) int
		TokenUseStatus   func(childComplexity int) int
		TradeNumber      func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	NewebpayPaymentInfo struct {
		CreatedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		Subscription func(childComplexity int) int
		TokenLife    func(childComplexity int) int
		TokenTerm    func(childComplexity int) int
		TokenValue   func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	Promotion struct {
		Code      func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		Discount  func(childComplexity int) int
		EndAt     func(childComplexity int) int
		ID        func(childComplexity int) int
		Plan      func(childComplexity int) int
		StartAt   func(childComplexity int) int
		State     func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	Subscription struct {
		Amount                    func(childComplexity int) int
		AndroidpayPayment         func(childComplexity int, where model.AndroidpayPaymentWhereInput, search *string, orderBy []*model.AndroidpayPaymentOrderByInput, first *int, skip int) int
		AndroidpayPaymentCount    func(childComplexity int, where model.AndroidpayPaymentWhereInput) int
		ApplepayPayment           func(childComplexity int, where model.ApplepayPaymentWhereInput, search *string, orderBy []*model.ApplepayPaymentOrderByInput, first *int, skip int) int
		ApplepayPaymentCount      func(childComplexity int, where model.ApplepayPaymentWhereInput) int
		BuyerName                 func(childComplexity int) int
		BuyerUbn                  func(childComplexity int) int
		CarrierNum                func(childComplexity int) int
		CarrierType               func(childComplexity int) int
		ChangePlanDatetime        func(childComplexity int) int
		Comment                   func(childComplexity int) int
		CreatedAt                 func(childComplexity int) int
		Currency                  func(childComplexity int) int
		Desc                      func(childComplexity int) int
		Email                     func(childComplexity int) int
		Frequency                 func(childComplexity int) int
		ID                        func(childComplexity int) int
		IsActive                  func(childComplexity int) int
		IsCanceled                func(childComplexity int) int
		LoveCode                  func(childComplexity int) int
		Member                    func(childComplexity int) int
		NewebpayPayment           func(childComplexity int, where model.NewebpayPaymentWhereInput, search *string, orderBy []*model.NewebpayPaymentOrderByInput, first *int, skip int) int
		NewebpayPaymentCount      func(childComplexity int, where model.NewebpayPaymentWhereInput) int
		NewebpayPaymentInfo       func(childComplexity int) int
		NextFrequency             func(childComplexity int) int
		Note                      func(childComplexity int) int
		OneTimeEndDatetime        func(childComplexity int) int
		OneTimeStartDatetime      func(childComplexity int) int
		OrderNumber               func(childComplexity int) int
		PaymentMethod             func(childComplexity int) int
		PeriodCreateDatetime      func(childComplexity int) int
		PeriodEndDatetime         func(childComplexity int) int
		PeriodFailureTimes        func(childComplexity int) int
		PeriodFirstDatetime       func(childComplexity int) int
		PeriodLastSuccessDatetime func(childComplexity int) int
		PeriodNextPayDatetime     func(childComplexity int) int
		PostID                    func(childComplexity int) int
		PromoteID                 func(childComplexity int) int
		Status                    func(childComplexity int) int
		UpdatedAt                 func(childComplexity int) int
	}

	SubscriptionCreation struct {
		NewebpayPayload func(childComplexity int) int
		Subscription    func(childComplexity int) int
	}

	SubscriptionHistory struct {
		Action                func(childComplexity int) int
		Amount                func(childComplexity int) int
		ChangePlanDatetime    func(childComplexity int) int
		Currency              func(childComplexity int) int
		Desc                  func(childComplexity int) int
		Email                 func(childComplexity int) int
		Frequency             func(childComplexity int) int
		ID                    func(childComplexity int) int
		Member                func(childComplexity int) int
		Note                  func(childComplexity int) int
		OneTimeEndDate        func(childComplexity int) int
		OneTimeStartDate      func(childComplexity int) int
		OrderNumber           func(childComplexity int) int
		PeriodFirstDate       func(childComplexity int) int
		PeriodLastSuccessDate func(childComplexity int) int
		PeriodNextPayDate     func(childComplexity int) int
		PostID                func(childComplexity int) int
		PromoteID             func(childComplexity int) int
		Status                func(childComplexity int) int
		Subscription          func(childComplexity int) int
		SubscriptionCreatedAt func(childComplexity int) int
		SubscriptionUpdatedAt func(childComplexity int) int
		TokenLife             func(childComplexity int) int
		TokenTerm             func(childComplexity int) int
		TokenValue            func(childComplexity int) int
	}

	SubscriptionInfo struct {
		Amount                    func(childComplexity int) int
		ChangePlanDatetime        func(childComplexity int) int
		CreatedAt                 func(childComplexity int) int
		Currency                  func(childComplexity int) int
		Desc                      func(childComplexity int) int
		Email                     func(childComplexity int) int
		Frequency                 func(childComplexity int) int
		ID                        func(childComplexity int) int
		IsActive                  func(childComplexity int) int
		IsCanceled                func(childComplexity int) int
		NextFrequency             func(childComplexity int) int
		Note                      func(childComplexity int) int
		OneTimeEndDatetime        func(childComplexity int) int
		OneTimeStartDatetime      func(childComplexity int) int
		OrderNumber               func(childComplexity int) int
		PeriodCreateDatetime      func(childComplexity int) int
		PeriodEndDatetime         func(childComplexity int) int
		PeriodFailureTimes        func(childComplexity int) int
		PeriodFirstDatetime       func(childComplexity int) int
		PeriodLastSuccessDatetime func(childComplexity int) int
		PeriodNextPayDatetime     func(childComplexity int) int
		PostID                    func(childComplexity int) int
		PromoteID                 func(childComplexity int) int
		Status                    func(childComplexity int) int
		UpdatedAt                 func(childComplexity int) int
	}
}

type MutationResolver interface {
	Createmember(ctx context.Context, data map[string]interface{}) (*model.MemberInfo, error)
	Updatemember(ctx context.Context, id string, data map[string]interface{}) (*model.MemberInfo, error)
	CreateSubscriptionRecurring(ctx context.Context, data map[string]interface{}, info model.SubscriptionRecurringCreateInfo) (*model.SubscriptionCreation, error)
	CreatesSubscriptionOneTime(ctx context.Context, data map[string]interface{}, info model.SubscriptionOneTimeCreateInfo) (*model.SubscriptionCreation, error)
	Updatesubscription(ctx context.Context, id string, data map[string]interface{}) (*model.SubscriptionInfo, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Mutation.createSubscriptionRecurring":
		if e.complexity.Mutation.CreateSubscriptionRecurring == nil {
			break
		}

		args, err := ec.field_Mutation_createSubscriptionRecurring_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSubscriptionRecurring(childComplexity, args["data"].(map[string]interface{}), args["info"].(model.SubscriptionRecurringCreateInfo)), true

	case "Mutation.createmember":
		if e.complexity.Mutation.Createmember == nil {
			break
		}

		args, err := ec.field_Mutation_createmember_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Createmember(childComplexity, args["data"].(map[string]interface{})), true

	case "Mutation.createsSubscriptionOneTime":
		if e.complexity.Mutation.CreatesSubscriptionOneTime == nil {
			break
		}

		args, err := ec.field_Mutation_createsSubscriptionOneTime_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatesSubscriptionOneTime(childComplexity, args["data"].(map[string]interface{}), args["info"].(model.SubscriptionOneTimeCreateInfo)), true

	case "Mutation.updatemember":
		if e.complexity.Mutation.Updatemember == nil {
			break
		}

		args, err := ec.field_Mutation_updatemember_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Updatemember(childComplexity, args["id"].(string), args["data"].(map[string]interface{})), true

	case "Mutation.updatesubscription":
		if e.complexity.Mutation.Updatesubscription == nil {
			break
		}

		args, err := ec.field_Mutation_updatesubscription_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Updatesubscription(childComplexity, args["id"].(string), args["data"].(map[string]interface{})), true

	case "androidpayPayment.createdAt":
		if e.complexity.AndroidpayPayment.CreatedAt == nil {
			break
		}

		return e.complexity.AndroidpayPayment.CreatedAt(childComplexity), true

	case "androidpayPayment.id":
		if e.complexity.AndroidpayPayment.ID == nil {
			break
		}

		return e.complexity.AndroidpayPayment.ID(childComplexity), true

	case "androidpayPayment.invoice":
		if e.complexity.AndroidpayPayment.Invoice == nil {
			break
		}

		return e.complexity.AndroidpayPayment.Invoice(childComplexity), true

	case "androidpayPayment.subscription":
		if e.complexity.AndroidpayPayment.Subscription == nil {
			break
		}

		return e.complexity.AndroidpayPayment.Subscription(childComplexity), true

	case "androidpayPayment.updatedAt":
		if e.complexity.AndroidpayPayment.UpdatedAt == nil {
			break
		}

		return e.complexity.AndroidpayPayment.UpdatedAt(childComplexity), true

	case "applepayPayment.createdAt":
		if e.complexity.ApplepayPayment.CreatedAt == nil {
			break
		}

		return e.complexity.ApplepayPayment.CreatedAt(childComplexity), true

	case "applepayPayment.id":
		if e.complexity.ApplepayPayment.ID == nil {
			break
		}

		return e.complexity.ApplepayPayment.ID(childComplexity), true

	case "applepayPayment.invoice":
		if e.complexity.ApplepayPayment.Invoice == nil {
			break
		}

		return e.complexity.ApplepayPayment.Invoice(childComplexity), true

	case "applepayPayment.subscription":
		if e.complexity.ApplepayPayment.Subscription == nil {
			break
		}

		return e.complexity.ApplepayPayment.Subscription(childComplexity), true

	case "applepayPayment.updatedAt":
		if e.complexity.ApplepayPayment.UpdatedAt == nil {
			break
		}

		return e.complexity.ApplepayPayment.UpdatedAt(childComplexity), true

	case "invoice.amount":
		if e.complexity.Invoice.Amount == nil {
			break
		}

		return e.complexity.Invoice.Amount(childComplexity), true

	case "invoice.androidpayPayment":
		if e.complexity.Invoice.AndroidpayPayment == nil {
			break
		}

		return e.complexity.Invoice.AndroidpayPayment(childComplexity), true

	case "invoice.applepayPayment":
		if e.complexity.Invoice.ApplepayPayment == nil {
			break
		}

		return e.complexity.Invoice.ApplepayPayment(childComplexity), true

	case "invoice.buyerName":
		if e.complexity.Invoice.BuyerName == nil {
			break
		}

		return e.complexity.Invoice.BuyerName(childComplexity), true

	case "invoice.buyerUBN":
		if e.complexity.Invoice.BuyerUbn == nil {
			break
		}

		return e.complexity.Invoice.BuyerUbn(childComplexity), true

	case "invoice.carrierNum":
		if e.complexity.Invoice.CarrierNum == nil {
			break
		}

		return e.complexity.Invoice.CarrierNum(childComplexity), true

	case "invoice.carrierType":
		if e.complexity.Invoice.CarrierType == nil {
			break
		}

		return e.complexity.Invoice.CarrierType(childComplexity), true

	case "invoice.category":
		if e.complexity.Invoice.Category == nil {
			break
		}

		return e.complexity.Invoice.Category(childComplexity), true

	case "invoice.createdAt":
		if e.complexity.Invoice.CreatedAt == nil {
			break
		}

		return e.complexity.Invoice.CreatedAt(childComplexity), true

	case "invoice.desc":
		if e.complexity.Invoice.Desc == nil {
			break
		}

		return e.complexity.Invoice.Desc(childComplexity), true

	case "invoice.email":
		if e.complexity.Invoice.Email == nil {
			break
		}

		return e.complexity.Invoice.Email(childComplexity), true

	case "invoice.id":
		if e.complexity.Invoice.ID == nil {
			break
		}

		return e.complexity.Invoice.ID(childComplexity), true

	case "invoice.invoiceNo":
		if e.complexity.Invoice.InvoiceNo == nil {
			break
		}

		return e.complexity.Invoice.InvoiceNo(childComplexity), true

	case "invoice.loveCode":
		if e.complexity.Invoice.LoveCode == nil {
			break
		}

		return e.complexity.Invoice.LoveCode(childComplexity), true

	case "invoice.newebpayPayment":
		if e.complexity.Invoice.NewebpayPayment == nil {
			break
		}

		return e.complexity.Invoice.NewebpayPayment(childComplexity), true

	case "invoice.status":
		if e.complexity.Invoice.Status == nil {
			break
		}

		return e.complexity.Invoice.Status(childComplexity), true

	case "invoice.updatedAt":
		if e.complexity.Invoice.UpdatedAt == nil {
			break
		}

		return e.complexity.Invoice.UpdatedAt(childComplexity), true

	case "marketingMembership.approvedBy":
		if e.complexity.MarketingMembership.ApprovedBy == nil {
			break
		}

		return e.complexity.MarketingMembership.ApprovedBy(childComplexity), true

	case "marketingMembership.createdAt":
		if e.complexity.MarketingMembership.CreatedAt == nil {
			break
		}

		return e.complexity.MarketingMembership.CreatedAt(childComplexity), true

	case "marketingMembership.endDate":
		if e.complexity.MarketingMembership.EndDate == nil {
			break
		}

		return e.complexity.MarketingMembership.EndDate(childComplexity), true

	case "marketingMembership.id":
		if e.complexity.MarketingMembership.ID == nil {
			break
		}

		return e.complexity.MarketingMembership.ID(childComplexity), true

	case "marketingMembership.member":
		if e.complexity.MarketingMembership.Member == nil {
			break
		}

		return e.complexity.MarketingMembership.Member(childComplexity), true

	case "marketingMembership.requesterEmail":
		if e.complexity.MarketingMembership.RequesterEmail == nil {
			break
		}

		return e.complexity.MarketingMembership.RequesterEmail(childComplexity), true

	case "marketingMembership.startDate":
		if e.complexity.MarketingMembership.StartDate == nil {
			break
		}

		return e.complexity.MarketingMembership.StartDate(childComplexity), true

	case "marketingMembership.status":
		if e.complexity.MarketingMembership.Status == nil {
			break
		}

		return e.complexity.MarketingMembership.Status(childComplexity), true

	case "marketingMembership.updatedAt":
		if e.complexity.MarketingMembership.UpdatedAt == nil {
			break
		}

		return e.complexity.MarketingMembership.UpdatedAt(childComplexity), true

	case "member.address":
		if e.complexity.Member.Address == nil {
			break
		}

		return e.complexity.Member.Address(childComplexity), true

	case "member.birthday":
		if e.complexity.Member.Birthday == nil {
			break
		}

		return e.complexity.Member.Birthday(childComplexity), true

	case "member.city":
		if e.complexity.Member.City == nil {
			break
		}

		return e.complexity.Member.City(childComplexity), true

	case "member.country":
		if e.complexity.Member.Country == nil {
			break
		}

		return e.complexity.Member.Country(childComplexity), true

	case "member.createdAt":
		if e.complexity.Member.CreatedAt == nil {
			break
		}

		return e.complexity.Member.CreatedAt(childComplexity), true

	case "member.dateJoined":
		if e.complexity.Member.DateJoined == nil {
			break
		}

		return e.complexity.Member.DateJoined(childComplexity), true

	case "member.district":
		if e.complexity.Member.District == nil {
			break
		}

		return e.complexity.Member.District(childComplexity), true

	case "member.email":
		if e.complexity.Member.Email == nil {
			break
		}

		return e.complexity.Member.Email(childComplexity), true

	case "member.firebaseId":
		if e.complexity.Member.FirebaseID == nil {
			break
		}

		return e.complexity.Member.FirebaseID(childComplexity), true

	case "member.firstName":
		if e.complexity.Member.FirstName == nil {
			break
		}

		return e.complexity.Member.FirstName(childComplexity), true

	case "member.gender":
		if e.complexity.Member.Gender == nil {
			break
		}

		return e.complexity.Member.Gender(childComplexity), true

	case "member.id":
		if e.complexity.Member.ID == nil {
			break
		}

		return e.complexity.Member.ID(childComplexity), true

	case "member.lastName":
		if e.complexity.Member.LastName == nil {
			break
		}

		return e.complexity.Member.LastName(childComplexity), true

	case "member.marketingMembership":
		if e.complexity.Member.MarketingMembership == nil {
			break
		}

		return e.complexity.Member.MarketingMembership(childComplexity), true

	case "member.name":
		if e.complexity.Member.Name == nil {
			break
		}

		return e.complexity.Member.Name(childComplexity), true

	case "member.nickname":
		if e.complexity.Member.Nickname == nil {
			break
		}

		return e.complexity.Member.Nickname(childComplexity), true

	case "member.phone":
		if e.complexity.Member.Phone == nil {
			break
		}

		return e.complexity.Member.Phone(childComplexity), true

	case "member.profileImage":
		if e.complexity.Member.ProfileImage == nil {
			break
		}

		return e.complexity.Member.ProfileImage(childComplexity), true

	case "member.state":
		if e.complexity.Member.State == nil {
			break
		}

		return e.complexity.Member.State(childComplexity), true

	case "member.subscription":
		if e.complexity.Member.Subscription == nil {
			break
		}

		args, err := ec.field_member_subscription_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Member.Subscription(childComplexity, args["where"].(model.SubscriptionWhereInput), args["search"].(*string), args["orderBy"].([]*model.SubscriptionOrderByInput), args["first"].(*int), args["skip"].(int)), true

	case "member.subscriptionCount":
		if e.complexity.Member.SubscriptionCount == nil {
			break
		}

		args, err := ec.field_member_subscriptionCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Member.SubscriptionCount(childComplexity, args["where"].(model.SubscriptionWhereInput)), true

	case "member.tos":
		if e.complexity.Member.Tos == nil {
			break
		}

		return e.complexity.Member.Tos(childComplexity), true

	case "member.type":
		if e.complexity.Member.Type == nil {
			break
		}

		return e.complexity.Member.Type(childComplexity), true

	case "member.updatedAt":
		if e.complexity.Member.UpdatedAt == nil {
			break
		}

		return e.complexity.Member.UpdatedAt(childComplexity), true

	case "memberInfo.address":
		if e.complexity.MemberInfo.Address == nil {
			break
		}

		return e.complexity.MemberInfo.Address(childComplexity), true

	case "memberInfo.birthday":
		if e.complexity.MemberInfo.Birthday == nil {
			break
		}

		return e.complexity.MemberInfo.Birthday(childComplexity), true

	case "memberInfo.city":
		if e.complexity.MemberInfo.City == nil {
			break
		}

		return e.complexity.MemberInfo.City(childComplexity), true

	case "memberInfo.country":
		if e.complexity.MemberInfo.Country == nil {
			break
		}

		return e.complexity.MemberInfo.Country(childComplexity), true

	case "memberInfo.createdAt":
		if e.complexity.MemberInfo.CreatedAt == nil {
			break
		}

		return e.complexity.MemberInfo.CreatedAt(childComplexity), true

	case "memberInfo.dateJoined":
		if e.complexity.MemberInfo.DateJoined == nil {
			break
		}

		return e.complexity.MemberInfo.DateJoined(childComplexity), true

	case "memberInfo.district":
		if e.complexity.MemberInfo.District == nil {
			break
		}

		return e.complexity.MemberInfo.District(childComplexity), true

	case "memberInfo.email":
		if e.complexity.MemberInfo.Email == nil {
			break
		}

		return e.complexity.MemberInfo.Email(childComplexity), true

	case "memberInfo.firebaseId":
		if e.complexity.MemberInfo.FirebaseID == nil {
			break
		}

		return e.complexity.MemberInfo.FirebaseID(childComplexity), true

	case "memberInfo.firstName":
		if e.complexity.MemberInfo.FirstName == nil {
			break
		}

		return e.complexity.MemberInfo.FirstName(childComplexity), true

	case "memberInfo.gender":
		if e.complexity.MemberInfo.Gender == nil {
			break
		}

		return e.complexity.MemberInfo.Gender(childComplexity), true

	case "memberInfo.id":
		if e.complexity.MemberInfo.ID == nil {
			break
		}

		return e.complexity.MemberInfo.ID(childComplexity), true

	case "memberInfo.lastName":
		if e.complexity.MemberInfo.LastName == nil {
			break
		}

		return e.complexity.MemberInfo.LastName(childComplexity), true

	case "memberInfo.name":
		if e.complexity.MemberInfo.Name == nil {
			break
		}

		return e.complexity.MemberInfo.Name(childComplexity), true

	case "memberInfo.nickname":
		if e.complexity.MemberInfo.Nickname == nil {
			break
		}

		return e.complexity.MemberInfo.Nickname(childComplexity), true

	case "memberInfo.phone":
		if e.complexity.MemberInfo.Phone == nil {
			break
		}

		return e.complexity.MemberInfo.Phone(childComplexity), true

	case "memberInfo.profileImage":
		if e.complexity.MemberInfo.ProfileImage == nil {
			break
		}

		return e.complexity.MemberInfo.ProfileImage(childComplexity), true

	case "memberInfo.state":
		if e.complexity.MemberInfo.State == nil {
			break
		}

		return e.complexity.MemberInfo.State(childComplexity), true

	case "memberInfo.tos":
		if e.complexity.MemberInfo.Tos == nil {
			break
		}

		return e.complexity.MemberInfo.Tos(childComplexity), true

	case "memberInfo.type":
		if e.complexity.MemberInfo.Type == nil {
			break
		}

		return e.complexity.MemberInfo.Type(childComplexity), true

	case "memberInfo.updatedAt":
		if e.complexity.MemberInfo.UpdatedAt == nil {
			break
		}

		return e.complexity.MemberInfo.UpdatedAt(childComplexity), true

	case "merchandise.code":
		if e.complexity.Merchandise.Code == nil {
			break
		}

		return e.complexity.Merchandise.Code(childComplexity), true

	case "merchandise.comment":
		if e.complexity.Merchandise.Comment == nil {
			break
		}

		return e.complexity.Merchandise.Comment(childComplexity), true

	case "merchandise.createdAt":
		if e.complexity.Merchandise.CreatedAt == nil {
			break
		}

		return e.complexity.Merchandise.CreatedAt(childComplexity), true

	case "merchandise.currency":
		if e.complexity.Merchandise.Currency == nil {
			break
		}

		return e.complexity.Merchandise.Currency(childComplexity), true

	case "merchandise.desc":
		if e.complexity.Merchandise.Desc == nil {
			break
		}

		return e.complexity.Merchandise.Desc(childComplexity), true

	case "merchandise.id":
		if e.complexity.Merchandise.ID == nil {
			break
		}

		return e.complexity.Merchandise.ID(childComplexity), true

	case "merchandise.name":
		if e.complexity.Merchandise.Name == nil {
			break
		}

		return e.complexity.Merchandise.Name(childComplexity), true

	case "merchandise.price":
		if e.complexity.Merchandise.Price == nil {
			break
		}

		return e.complexity.Merchandise.Price(childComplexity), true

	case "merchandise.state":
		if e.complexity.Merchandise.State == nil {
			break
		}

		return e.complexity.Merchandise.State(childComplexity), true

	case "merchandise.updatedAt":
		if e.complexity.Merchandise.UpdatedAt == nil {
			break
		}

		return e.complexity.Merchandise.UpdatedAt(childComplexity), true

	case "newebpayPayment.amount":
		if e.complexity.NewebpayPayment.Amount == nil {
			break
		}

		return e.complexity.NewebpayPayment.Amount(childComplexity), true

	case "newebpayPayment.authBank":
		if e.complexity.NewebpayPayment.AuthBank == nil {
			break
		}

		return e.complexity.NewebpayPayment.AuthBank(childComplexity), true

	case "newebpayPayment.authCode":
		if e.complexity.NewebpayPayment.AuthCode == nil {
			break
		}

		return e.complexity.NewebpayPayment.AuthCode(childComplexity), true

	case "newebpayPayment.cardInfoExp":
		if e.complexity.NewebpayPayment.CardInfoExp == nil {
			break
		}

		return e.complexity.NewebpayPayment.CardInfoExp(childComplexity), true

	case "newebpayPayment.cardInfoFirstSix":
		if e.complexity.NewebpayPayment.CardInfoFirstSix == nil {
			break
		}

		return e.complexity.NewebpayPayment.CardInfoFirstSix(childComplexity), true

	case "newebpayPayment.cardInfoLastFour":
		if e.complexity.NewebpayPayment.CardInfoLastFour == nil {
			break
		}

		return e.complexity.NewebpayPayment.CardInfoLastFour(childComplexity), true

	case "newebpayPayment.createdAt":
		if e.complexity.NewebpayPayment.CreatedAt == nil {
			break
		}

		return e.complexity.NewebpayPayment.CreatedAt(childComplexity), true

	case "newebpayPayment.ECI":
		if e.complexity.NewebpayPayment.Eci == nil {
			break
		}

		return e.complexity.NewebpayPayment.Eci(childComplexity), true

	case "newebpayPayment.id":
		if e.complexity.NewebpayPayment.ID == nil {
			break
		}

		return e.complexity.NewebpayPayment.ID(childComplexity), true

	case "newebpayPayment.invoice":
		if e.complexity.NewebpayPayment.Invoice == nil {
			break
		}

		return e.complexity.NewebpayPayment.Invoice(childComplexity), true

	case "newebpayPayment.merchantId":
		if e.complexity.NewebpayPayment.MerchantID == nil {
			break
		}

		return e.complexity.NewebpayPayment.MerchantID(childComplexity), true

	case "newebpayPayment.message":
		if e.complexity.NewebpayPayment.Message == nil {
			break
		}

		return e.complexity.NewebpayPayment.Message(childComplexity), true

	case "newebpayPayment.orderNumber":
		if e.complexity.NewebpayPayment.OrderNumber == nil {
			break
		}

		return e.complexity.NewebpayPayment.OrderNumber(childComplexity), true

	case "newebpayPayment.paymentMethod":
		if e.complexity.NewebpayPayment.PaymentMethod == nil {
			break
		}

		return e.complexity.NewebpayPayment.PaymentMethod(childComplexity), true

	case "newebpayPayment.paymentTime":
		if e.complexity.NewebpayPayment.PaymentTime == nil {
			break
		}

		return e.complexity.NewebpayPayment.PaymentTime(childComplexity), true

	case "newebpayPayment.respondCode":
		if e.complexity.NewebpayPayment.RespondCode == nil {
			break
		}

		return e.complexity.NewebpayPayment.RespondCode(childComplexity), true

	case "newebpayPayment.status":
		if e.complexity.NewebpayPayment.Status == nil {
			break
		}

		return e.complexity.NewebpayPayment.Status(childComplexity), true

	case "newebpayPayment.subscription":
		if e.complexity.NewebpayPayment.Subscription == nil {
			break
		}

		return e.complexity.NewebpayPayment.Subscription(childComplexity), true

	case "newebpayPayment.tokenUseStatus":
		if e.complexity.NewebpayPayment.TokenUseStatus == nil {
			break
		}

		return e.complexity.NewebpayPayment.TokenUseStatus(childComplexity), true

	case "newebpayPayment.tradeNumber":
		if e.complexity.NewebpayPayment.TradeNumber == nil {
			break
		}

		return e.complexity.NewebpayPayment.TradeNumber(childComplexity), true

	case "newebpayPayment.updatedAt":
		if e.complexity.NewebpayPayment.UpdatedAt == nil {
			break
		}

		return e.complexity.NewebpayPayment.UpdatedAt(childComplexity), true

	case "newebpayPaymentInfo.createdAt":
		if e.complexity.NewebpayPaymentInfo.CreatedAt == nil {
			break
		}

		return e.complexity.NewebpayPaymentInfo.CreatedAt(childComplexity), true

	case "newebpayPaymentInfo.id":
		if e.complexity.NewebpayPaymentInfo.ID == nil {
			break
		}

		return e.complexity.NewebpayPaymentInfo.ID(childComplexity), true

	case "newebpayPaymentInfo.subscription":
		if e.complexity.NewebpayPaymentInfo.Subscription == nil {
			break
		}

		return e.complexity.NewebpayPaymentInfo.Subscription(childComplexity), true

	case "newebpayPaymentInfo.tokenLife":
		if e.complexity.NewebpayPaymentInfo.TokenLife == nil {
			break
		}

		return e.complexity.NewebpayPaymentInfo.TokenLife(childComplexity), true

	case "newebpayPaymentInfo.tokenTerm":
		if e.complexity.NewebpayPaymentInfo.TokenTerm == nil {
			break
		}

		return e.complexity.NewebpayPaymentInfo.TokenTerm(childComplexity), true

	case "newebpayPaymentInfo.tokenValue":
		if e.complexity.NewebpayPaymentInfo.TokenValue == nil {
			break
		}

		return e.complexity.NewebpayPaymentInfo.TokenValue(childComplexity), true

	case "newebpayPaymentInfo.updatedAt":
		if e.complexity.NewebpayPaymentInfo.UpdatedAt == nil {
			break
		}

		return e.complexity.NewebpayPaymentInfo.UpdatedAt(childComplexity), true

	case "promotion.code":
		if e.complexity.Promotion.Code == nil {
			break
		}

		return e.complexity.Promotion.Code(childComplexity), true

	case "promotion.createdAt":
		if e.complexity.Promotion.CreatedAt == nil {
			break
		}

		return e.complexity.Promotion.CreatedAt(childComplexity), true

	case "promotion.discount":
		if e.complexity.Promotion.Discount == nil {
			break
		}

		return e.complexity.Promotion.Discount(childComplexity), true

	case "promotion.endAt":
		if e.complexity.Promotion.EndAt == nil {
			break
		}

		return e.complexity.Promotion.EndAt(childComplexity), true

	case "promotion.id":
		if e.complexity.Promotion.ID == nil {
			break
		}

		return e.complexity.Promotion.ID(childComplexity), true

	case "promotion.plan":
		if e.complexity.Promotion.Plan == nil {
			break
		}

		return e.complexity.Promotion.Plan(childComplexity), true

	case "promotion.startAt":
		if e.complexity.Promotion.StartAt == nil {
			break
		}

		return e.complexity.Promotion.StartAt(childComplexity), true

	case "promotion.state":
		if e.complexity.Promotion.State == nil {
			break
		}

		return e.complexity.Promotion.State(childComplexity), true

	case "promotion.updatedAt":
		if e.complexity.Promotion.UpdatedAt == nil {
			break
		}

		return e.complexity.Promotion.UpdatedAt(childComplexity), true

	case "subscription.amount":
		if e.complexity.Subscription.Amount == nil {
			break
		}

		return e.complexity.Subscription.Amount(childComplexity), true

	case "subscription.androidpayPayment":
		if e.complexity.Subscription.AndroidpayPayment == nil {
			break
		}

		args, err := ec.field_subscription_androidpayPayment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.AndroidpayPayment(childComplexity, args["where"].(model.AndroidpayPaymentWhereInput), args["search"].(*string), args["orderBy"].([]*model.AndroidpayPaymentOrderByInput), args["first"].(*int), args["skip"].(int)), true

	case "subscription.androidpayPaymentCount":
		if e.complexity.Subscription.AndroidpayPaymentCount == nil {
			break
		}

		args, err := ec.field_subscription_androidpayPaymentCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.AndroidpayPaymentCount(childComplexity, args["where"].(model.AndroidpayPaymentWhereInput)), true

	case "subscription.applepayPayment":
		if e.complexity.Subscription.ApplepayPayment == nil {
			break
		}

		args, err := ec.field_subscription_applepayPayment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.ApplepayPayment(childComplexity, args["where"].(model.ApplepayPaymentWhereInput), args["search"].(*string), args["orderBy"].([]*model.ApplepayPaymentOrderByInput), args["first"].(*int), args["skip"].(int)), true

	case "subscription.applepayPaymentCount":
		if e.complexity.Subscription.ApplepayPaymentCount == nil {
			break
		}

		args, err := ec.field_subscription_applepayPaymentCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.ApplepayPaymentCount(childComplexity, args["where"].(model.ApplepayPaymentWhereInput)), true

	case "subscription.buyerName":
		if e.complexity.Subscription.BuyerName == nil {
			break
		}

		return e.complexity.Subscription.BuyerName(childComplexity), true

	case "subscription.buyerUBN":
		if e.complexity.Subscription.BuyerUbn == nil {
			break
		}

		return e.complexity.Subscription.BuyerUbn(childComplexity), true

	case "subscription.carrierNum":
		if e.complexity.Subscription.CarrierNum == nil {
			break
		}

		return e.complexity.Subscription.CarrierNum(childComplexity), true

	case "subscription.carrierType":
		if e.complexity.Subscription.CarrierType == nil {
			break
		}

		return e.complexity.Subscription.CarrierType(childComplexity), true

	case "subscription.changePlanDatetime":
		if e.complexity.Subscription.ChangePlanDatetime == nil {
			break
		}

		return e.complexity.Subscription.ChangePlanDatetime(childComplexity), true

	case "subscription.comment":
		if e.complexity.Subscription.Comment == nil {
			break
		}

		return e.complexity.Subscription.Comment(childComplexity), true

	case "subscription.createdAt":
		if e.complexity.Subscription.CreatedAt == nil {
			break
		}

		return e.complexity.Subscription.CreatedAt(childComplexity), true

	case "subscription.currency":
		if e.complexity.Subscription.Currency == nil {
			break
		}

		return e.complexity.Subscription.Currency(childComplexity), true

	case "subscription.desc":
		if e.complexity.Subscription.Desc == nil {
			break
		}

		return e.complexity.Subscription.Desc(childComplexity), true

	case "subscription.email":
		if e.complexity.Subscription.Email == nil {
			break
		}

		return e.complexity.Subscription.Email(childComplexity), true

	case "subscription.frequency":
		if e.complexity.Subscription.Frequency == nil {
			break
		}

		return e.complexity.Subscription.Frequency(childComplexity), true

	case "subscription.id":
		if e.complexity.Subscription.ID == nil {
			break
		}

		return e.complexity.Subscription.ID(childComplexity), true

	case "subscription.isActive":
		if e.complexity.Subscription.IsActive == nil {
			break
		}

		return e.complexity.Subscription.IsActive(childComplexity), true

	case "subscription.isCanceled":
		if e.complexity.Subscription.IsCanceled == nil {
			break
		}

		return e.complexity.Subscription.IsCanceled(childComplexity), true

	case "subscription.loveCode":
		if e.complexity.Subscription.LoveCode == nil {
			break
		}

		return e.complexity.Subscription.LoveCode(childComplexity), true

	case "subscription.member":
		if e.complexity.Subscription.Member == nil {
			break
		}

		return e.complexity.Subscription.Member(childComplexity), true

	case "subscription.newebpayPayment":
		if e.complexity.Subscription.NewebpayPayment == nil {
			break
		}

		args, err := ec.field_subscription_newebpayPayment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.NewebpayPayment(childComplexity, args["where"].(model.NewebpayPaymentWhereInput), args["search"].(*string), args["orderBy"].([]*model.NewebpayPaymentOrderByInput), args["first"].(*int), args["skip"].(int)), true

	case "subscription.newebpayPaymentCount":
		if e.complexity.Subscription.NewebpayPaymentCount == nil {
			break
		}

		args, err := ec.field_subscription_newebpayPaymentCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.NewebpayPaymentCount(childComplexity, args["where"].(model.NewebpayPaymentWhereInput)), true

	case "subscription.newebpayPaymentInfo":
		if e.complexity.Subscription.NewebpayPaymentInfo == nil {
			break
		}

		return e.complexity.Subscription.NewebpayPaymentInfo(childComplexity), true

	case "subscription.nextFrequency":
		if e.complexity.Subscription.NextFrequency == nil {
			break
		}

		return e.complexity.Subscription.NextFrequency(childComplexity), true

	case "subscription.note":
		if e.complexity.Subscription.Note == nil {
			break
		}

		return e.complexity.Subscription.Note(childComplexity), true

	case "subscription.oneTimeEndDatetime":
		if e.complexity.Subscription.OneTimeEndDatetime == nil {
			break
		}

		return e.complexity.Subscription.OneTimeEndDatetime(childComplexity), true

	case "subscription.oneTimeStartDatetime":
		if e.complexity.Subscription.OneTimeStartDatetime == nil {
			break
		}

		return e.complexity.Subscription.OneTimeStartDatetime(childComplexity), true

	case "subscription.orderNumber":
		if e.complexity.Subscription.OrderNumber == nil {
			break
		}

		return e.complexity.Subscription.OrderNumber(childComplexity), true

	case "subscription.paymentMethod":
		if e.complexity.Subscription.PaymentMethod == nil {
			break
		}

		return e.complexity.Subscription.PaymentMethod(childComplexity), true

	case "subscription.periodCreateDatetime":
		if e.complexity.Subscription.PeriodCreateDatetime == nil {
			break
		}

		return e.complexity.Subscription.PeriodCreateDatetime(childComplexity), true

	case "subscription.periodEndDatetime":
		if e.complexity.Subscription.PeriodEndDatetime == nil {
			break
		}

		return e.complexity.Subscription.PeriodEndDatetime(childComplexity), true

	case "subscription.periodFailureTimes":
		if e.complexity.Subscription.PeriodFailureTimes == nil {
			break
		}

		return e.complexity.Subscription.PeriodFailureTimes(childComplexity), true

	case "subscription.periodFirstDatetime":
		if e.complexity.Subscription.PeriodFirstDatetime == nil {
			break
		}

		return e.complexity.Subscription.PeriodFirstDatetime(childComplexity), true

	case "subscription.periodLastSuccessDatetime":
		if e.complexity.Subscription.PeriodLastSuccessDatetime == nil {
			break
		}

		return e.complexity.Subscription.PeriodLastSuccessDatetime(childComplexity), true

	case "subscription.periodNextPayDatetime":
		if e.complexity.Subscription.PeriodNextPayDatetime == nil {
			break
		}

		return e.complexity.Subscription.PeriodNextPayDatetime(childComplexity), true

	case "subscription.postId":
		if e.complexity.Subscription.PostID == nil {
			break
		}

		return e.complexity.Subscription.PostID(childComplexity), true

	case "subscription.promoteId":
		if e.complexity.Subscription.PromoteID == nil {
			break
		}

		return e.complexity.Subscription.PromoteID(childComplexity), true

	case "subscription.status":
		if e.complexity.Subscription.Status == nil {
			break
		}

		return e.complexity.Subscription.Status(childComplexity), true

	case "subscription.updatedAt":
		if e.complexity.Subscription.UpdatedAt == nil {
			break
		}

		return e.complexity.Subscription.UpdatedAt(childComplexity), true

	case "subscriptionCreation.newebpayPayload":
		if e.complexity.SubscriptionCreation.NewebpayPayload == nil {
			break
		}

		return e.complexity.SubscriptionCreation.NewebpayPayload(childComplexity), true

	case "subscriptionCreation.subscription":
		if e.complexity.SubscriptionCreation.Subscription == nil {
			break
		}

		return e.complexity.SubscriptionCreation.Subscription(childComplexity), true

	case "subscriptionHistory.action":
		if e.complexity.SubscriptionHistory.Action == nil {
			break
		}

		return e.complexity.SubscriptionHistory.Action(childComplexity), true

	case "subscriptionHistory.amount":
		if e.complexity.SubscriptionHistory.Amount == nil {
			break
		}

		return e.complexity.SubscriptionHistory.Amount(childComplexity), true

	case "subscriptionHistory.changePlanDatetime":
		if e.complexity.SubscriptionHistory.ChangePlanDatetime == nil {
			break
		}

		return e.complexity.SubscriptionHistory.ChangePlanDatetime(childComplexity), true

	case "subscriptionHistory.currency":
		if e.complexity.SubscriptionHistory.Currency == nil {
			break
		}

		return e.complexity.SubscriptionHistory.Currency(childComplexity), true

	case "subscriptionHistory.desc":
		if e.complexity.SubscriptionHistory.Desc == nil {
			break
		}

		return e.complexity.SubscriptionHistory.Desc(childComplexity), true

	case "subscriptionHistory.email":
		if e.complexity.SubscriptionHistory.Email == nil {
			break
		}

		return e.complexity.SubscriptionHistory.Email(childComplexity), true

	case "subscriptionHistory.frequency":
		if e.complexity.SubscriptionHistory.Frequency == nil {
			break
		}

		return e.complexity.SubscriptionHistory.Frequency(childComplexity), true

	case "subscriptionHistory.id":
		if e.complexity.SubscriptionHistory.ID == nil {
			break
		}

		return e.complexity.SubscriptionHistory.ID(childComplexity), true

	case "subscriptionHistory.member":
		if e.complexity.SubscriptionHistory.Member == nil {
			break
		}

		return e.complexity.SubscriptionHistory.Member(childComplexity), true

	case "subscriptionHistory.note":
		if e.complexity.SubscriptionHistory.Note == nil {
			break
		}

		return e.complexity.SubscriptionHistory.Note(childComplexity), true

	case "subscriptionHistory.oneTimeEndDate":
		if e.complexity.SubscriptionHistory.OneTimeEndDate == nil {
			break
		}

		return e.complexity.SubscriptionHistory.OneTimeEndDate(childComplexity), true

	case "subscriptionHistory.oneTimeStartDate":
		if e.complexity.SubscriptionHistory.OneTimeStartDate == nil {
			break
		}

		return e.complexity.SubscriptionHistory.OneTimeStartDate(childComplexity), true

	case "subscriptionHistory.orderNumber":
		if e.complexity.SubscriptionHistory.OrderNumber == nil {
			break
		}

		return e.complexity.SubscriptionHistory.OrderNumber(childComplexity), true

	case "subscriptionHistory.periodFirstDate":
		if e.complexity.SubscriptionHistory.PeriodFirstDate == nil {
			break
		}

		return e.complexity.SubscriptionHistory.PeriodFirstDate(childComplexity), true

	case "subscriptionHistory.periodLastSuccessDate":
		if e.complexity.SubscriptionHistory.PeriodLastSuccessDate == nil {
			break
		}

		return e.complexity.SubscriptionHistory.PeriodLastSuccessDate(childComplexity), true

	case "subscriptionHistory.periodNextPayDate":
		if e.complexity.SubscriptionHistory.PeriodNextPayDate == nil {
			break
		}

		return e.complexity.SubscriptionHistory.PeriodNextPayDate(childComplexity), true

	case "subscriptionHistory.postId":
		if e.complexity.SubscriptionHistory.PostID == nil {
			break
		}

		return e.complexity.SubscriptionHistory.PostID(childComplexity), true

	case "subscriptionHistory.promoteId":
		if e.complexity.SubscriptionHistory.PromoteID == nil {
			break
		}

		return e.complexity.SubscriptionHistory.PromoteID(childComplexity), true

	case "subscriptionHistory.status":
		if e.complexity.SubscriptionHistory.Status == nil {
			break
		}

		return e.complexity.SubscriptionHistory.Status(childComplexity), true

	case "subscriptionHistory.subscription":
		if e.complexity.SubscriptionHistory.Subscription == nil {
			break
		}

		return e.complexity.SubscriptionHistory.Subscription(childComplexity), true

	case "subscriptionHistory.subscriptionCreatedAt":
		if e.complexity.SubscriptionHistory.SubscriptionCreatedAt == nil {
			break
		}

		return e.complexity.SubscriptionHistory.SubscriptionCreatedAt(childComplexity), true

	case "subscriptionHistory.subscriptionUpdatedAt":
		if e.complexity.SubscriptionHistory.SubscriptionUpdatedAt == nil {
			break
		}

		return e.complexity.SubscriptionHistory.SubscriptionUpdatedAt(childComplexity), true

	case "subscriptionHistory.tokenLife":
		if e.complexity.SubscriptionHistory.TokenLife == nil {
			break
		}

		return e.complexity.SubscriptionHistory.TokenLife(childComplexity), true

	case "subscriptionHistory.tokenTerm":
		if e.complexity.SubscriptionHistory.TokenTerm == nil {
			break
		}

		return e.complexity.SubscriptionHistory.TokenTerm(childComplexity), true

	case "subscriptionHistory.tokenValue":
		if e.complexity.SubscriptionHistory.TokenValue == nil {
			break
		}

		return e.complexity.SubscriptionHistory.TokenValue(childComplexity), true

	case "subscriptionInfo.amount":
		if e.complexity.SubscriptionInfo.Amount == nil {
			break
		}

		return e.complexity.SubscriptionInfo.Amount(childComplexity), true

	case "subscriptionInfo.changePlanDatetime":
		if e.complexity.SubscriptionInfo.ChangePlanDatetime == nil {
			break
		}

		return e.complexity.SubscriptionInfo.ChangePlanDatetime(childComplexity), true

	case "subscriptionInfo.createdAt":
		if e.complexity.SubscriptionInfo.CreatedAt == nil {
			break
		}

		return e.complexity.SubscriptionInfo.CreatedAt(childComplexity), true

	case "subscriptionInfo.currency":
		if e.complexity.SubscriptionInfo.Currency == nil {
			break
		}

		return e.complexity.SubscriptionInfo.Currency(childComplexity), true

	case "subscriptionInfo.desc":
		if e.complexity.SubscriptionInfo.Desc == nil {
			break
		}

		return e.complexity.SubscriptionInfo.Desc(childComplexity), true

	case "subscriptionInfo.email":
		if e.complexity.SubscriptionInfo.Email == nil {
			break
		}

		return e.complexity.SubscriptionInfo.Email(childComplexity), true

	case "subscriptionInfo.frequency":
		if e.complexity.SubscriptionInfo.Frequency == nil {
			break
		}

		return e.complexity.SubscriptionInfo.Frequency(childComplexity), true

	case "subscriptionInfo.id":
		if e.complexity.SubscriptionInfo.ID == nil {
			break
		}

		return e.complexity.SubscriptionInfo.ID(childComplexity), true

	case "subscriptionInfo.isActive":
		if e.complexity.SubscriptionInfo.IsActive == nil {
			break
		}

		return e.complexity.SubscriptionInfo.IsActive(childComplexity), true

	case "subscriptionInfo.isCanceled":
		if e.complexity.SubscriptionInfo.IsCanceled == nil {
			break
		}

		return e.complexity.SubscriptionInfo.IsCanceled(childComplexity), true

	case "subscriptionInfo.nextFrequency":
		if e.complexity.SubscriptionInfo.NextFrequency == nil {
			break
		}

		return e.complexity.SubscriptionInfo.NextFrequency(childComplexity), true

	case "subscriptionInfo.note":
		if e.complexity.SubscriptionInfo.Note == nil {
			break
		}

		return e.complexity.SubscriptionInfo.Note(childComplexity), true

	case "subscriptionInfo.oneTimeEndDatetime":
		if e.complexity.SubscriptionInfo.OneTimeEndDatetime == nil {
			break
		}

		return e.complexity.SubscriptionInfo.OneTimeEndDatetime(childComplexity), true

	case "subscriptionInfo.oneTimeStartDatetime":
		if e.complexity.SubscriptionInfo.OneTimeStartDatetime == nil {
			break
		}

		return e.complexity.SubscriptionInfo.OneTimeStartDatetime(childComplexity), true

	case "subscriptionInfo.orderNumber":
		if e.complexity.SubscriptionInfo.OrderNumber == nil {
			break
		}

		return e.complexity.SubscriptionInfo.OrderNumber(childComplexity), true

	case "subscriptionInfo.periodCreateDatetime":
		if e.complexity.SubscriptionInfo.PeriodCreateDatetime == nil {
			break
		}

		return e.complexity.SubscriptionInfo.PeriodCreateDatetime(childComplexity), true

	case "subscriptionInfo.periodEndDatetime":
		if e.complexity.SubscriptionInfo.PeriodEndDatetime == nil {
			break
		}

		return e.complexity.SubscriptionInfo.PeriodEndDatetime(childComplexity), true

	case "subscriptionInfo.periodFailureTimes":
		if e.complexity.SubscriptionInfo.PeriodFailureTimes == nil {
			break
		}

		return e.complexity.SubscriptionInfo.PeriodFailureTimes(childComplexity), true

	case "subscriptionInfo.periodFirstDatetime":
		if e.complexity.SubscriptionInfo.PeriodFirstDatetime == nil {
			break
		}

		return e.complexity.SubscriptionInfo.PeriodFirstDatetime(childComplexity), true

	case "subscriptionInfo.periodLastSuccessDatetime":
		if e.complexity.SubscriptionInfo.PeriodLastSuccessDatetime == nil {
			break
		}

		return e.complexity.SubscriptionInfo.PeriodLastSuccessDatetime(childComplexity), true

	case "subscriptionInfo.periodNextPayDatetime":
		if e.complexity.SubscriptionInfo.PeriodNextPayDatetime == nil {
			break
		}

		return e.complexity.SubscriptionInfo.PeriodNextPayDatetime(childComplexity), true

	case "subscriptionInfo.postId":
		if e.complexity.SubscriptionInfo.PostID == nil {
			break
		}

		return e.complexity.SubscriptionInfo.PostID(childComplexity), true

	case "subscriptionInfo.promoteId":
		if e.complexity.SubscriptionInfo.PromoteID == nil {
			break
		}

		return e.complexity.SubscriptionInfo.PromoteID(childComplexity), true

	case "subscriptionInfo.status":
		if e.complexity.SubscriptionInfo.Status == nil {
			break
		}

		return e.complexity.SubscriptionInfo.Status(childComplexity), true

	case "subscriptionInfo.updatedAt":
		if e.complexity.SubscriptionInfo.UpdatedAt == nil {
			break
		}

		return e.complexity.SubscriptionInfo.UpdatedAt(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "type.graphql", Input: `"""
Modified From Private Schema
"""
enum OrderDirection {
  asc
  desc
}

type invoice {
  id: ID!
  newebpayPayment: newebpayPayment
  applepayPayment: applepayPayment
  androidpayPayment: androidpayPayment
  amount: Int
  email: String
  desc: String
  invoiceNo: String
  category: invoiceCategoryType
  loveCode: Int
  carrierType: Int
  carrierNum: String
  buyerName: String
  buyerUBN: String
  status: invoiceStatusType
  createdAt: String
  updatedAt: String
}

enum invoiceCategoryType {
  b2b
  b2c
}

enum invoiceStatusType {
  success
  failed
  cancelled
}

input invoiceWhereInput {
  AND: [invoiceWhereInput!]
  OR: [invoiceWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  newebpayPayment: newebpayPaymentWhereInput
  newebpayPayment_is_null: Boolean
  applepayPayment: applepayPaymentWhereInput
  applepayPayment_is_null: Boolean
  androidpayPayment: androidpayPaymentWhereInput
  androidpayPayment_is_null: Boolean
  amount: Int
  amount_not: Int
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  amount_in: [Int]
  amount_not_in: [Int]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  desc: String
  desc_not: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  desc_i: String
  desc_not_i: String
  desc_contains_i: String
  desc_not_contains_i: String
  desc_starts_with_i: String
  desc_not_starts_with_i: String
  desc_ends_with_i: String
  desc_not_ends_with_i: String
  desc_in: [String]
  desc_not_in: [String]
  invoiceNo: String
  invoiceNo_not: String
  invoiceNo_contains: String
  invoiceNo_not_contains: String
  invoiceNo_starts_with: String
  invoiceNo_not_starts_with: String
  invoiceNo_ends_with: String
  invoiceNo_not_ends_with: String
  invoiceNo_i: String
  invoiceNo_not_i: String
  invoiceNo_contains_i: String
  invoiceNo_not_contains_i: String
  invoiceNo_starts_with_i: String
  invoiceNo_not_starts_with_i: String
  invoiceNo_ends_with_i: String
  invoiceNo_not_ends_with_i: String
  invoiceNo_in: [String]
  invoiceNo_not_in: [String]
  category: invoiceCategoryType
  category_not: invoiceCategoryType
  category_in: [invoiceCategoryType]
  category_not_in: [invoiceCategoryType]
  loveCode: Int
  loveCode_not: Int
  loveCode_lt: Int
  loveCode_lte: Int
  loveCode_gt: Int
  loveCode_gte: Int
  loveCode_in: [Int]
  loveCode_not_in: [Int]
  carrierType: Int
  carrierType_not: Int
  carrierType_in: [Int]
  carrierType_not_in: [Int]
  carrierNum: String
  carrierNum_not: String
  carrierNum_contains: String
  carrierNum_not_contains: String
  carrierNum_starts_with: String
  carrierNum_not_starts_with: String
  carrierNum_ends_with: String
  carrierNum_not_ends_with: String
  carrierNum_i: String
  carrierNum_not_i: String
  carrierNum_contains_i: String
  carrierNum_not_contains_i: String
  carrierNum_starts_with_i: String
  carrierNum_not_starts_with_i: String
  carrierNum_ends_with_i: String
  carrierNum_not_ends_with_i: String
  carrierNum_in: [String]
  carrierNum_not_in: [String]
  buyerName: String
  buyerName_not: String
  buyerName_contains: String
  buyerName_not_contains: String
  buyerName_starts_with: String
  buyerName_not_starts_with: String
  buyerName_ends_with: String
  buyerName_not_ends_with: String
  buyerName_i: String
  buyerName_not_i: String
  buyerName_contains_i: String
  buyerName_not_contains_i: String
  buyerName_starts_with_i: String
  buyerName_not_starts_with_i: String
  buyerName_ends_with_i: String
  buyerName_not_ends_with_i: String
  buyerName_in: [String]
  buyerName_not_in: [String]
  buyerUBN: String
  buyerUBN_not: String
  buyerUBN_contains: String
  buyerUBN_not_contains: String
  buyerUBN_starts_with: String
  buyerUBN_not_starts_with: String
  buyerUBN_ends_with: String
  buyerUBN_not_ends_with: String
  buyerUBN_i: String
  buyerUBN_not_i: String
  buyerUBN_contains_i: String
  buyerUBN_not_contains_i: String
  buyerUBN_starts_with_i: String
  buyerUBN_not_starts_with_i: String
  buyerUBN_ends_with_i: String
  buyerUBN_not_ends_with_i: String
  buyerUBN_in: [String]
  buyerUBN_not_in: [String]
  status: invoiceStatusType
  status_not: invoiceStatusType
  status_in: [invoiceStatusType]
  status_not_in: [invoiceStatusType]
  createdAt: String
  createdAt_not: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdAt_in: [String]
  createdAt_not_in: [String]
  updatedAt: String
  updatedAt_not: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedAt_in: [String]
  updatedAt_not_in: [String]
  createdBy_is_null: Boolean
  updatedBy_is_null: Boolean
}

input invoiceWhereUniqueInput {
  id: ID
  invoiceNo: String
}

enum SortInvoicesBy {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
  email_ASC
  email_DESC
  desc_ASC
  desc_DESC
  invoiceNo_ASC
  invoiceNo_DESC
  category_ASC
  category_DESC
  loveCode_ASC
  loveCode_DESC
  carrierType_ASC
  carrierType_DESC
  carrierNum_ASC
  carrierNum_DESC
  buyerName_ASC
  buyerName_DESC
  buyerUBN_ASC
  buyerUBN_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input invoiceOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  email: OrderDirection
  desc: OrderDirection
  invoiceNo: OrderDirection
  category: OrderDirection
  loveCode: OrderDirection
  carrierType: OrderDirection
  carrierNum: OrderDirection
  buyerName: OrderDirection
  buyerUBN: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input invoiceUpdateInput {
  newebpayPayment: newebpayPaymentRelateToOneInput
  applepayPayment: applepayPaymentRelateToOneInput
  androidpayPayment: androidpayPaymentRelateToOneInput
  amount: Int
  email: String
  desc: String
  invoiceNo: String
  category: invoiceCategoryType
  loveCode: Int
  carrierType: Int
  carrierNum: String
  buyerName: String
  buyerUBN: String
  status: invoiceStatusType
  createdAt: String
  updatedAt: String
}

input newebpayPaymentRelateToOneInput {
  create: newebpayPaymentCreateInput
  connect: newebpayPaymentWhereUniqueInput
  disconnect: newebpayPaymentWhereUniqueInput
  disconnectAll: Boolean
}

input applepayPaymentRelateToOneInput {
  create: applepayPaymentCreateInput
  connect: applepayPaymentWhereUniqueInput
  disconnect: applepayPaymentWhereUniqueInput
  disconnectAll: Boolean
}

input androidpayPaymentRelateToOneInput {
  create: androidpayPaymentCreateInput
  connect: androidpayPaymentWhereUniqueInput
  disconnect: androidpayPaymentWhereUniqueInput
  disconnectAll: Boolean
}

input InvoicesUpdateInput {
  id: ID!
  data: invoiceUpdateInput
}

input invoiceCreateInput {
  newebpayPayment: newebpayPaymentRelateToOneInput
  applepayPayment: applepayPaymentRelateToOneInput
  androidpayPayment: androidpayPaymentRelateToOneInput
  amount: Int
  email: String
  desc: String
  invoiceNo: String
  category: invoiceCategoryType
  loveCode: Int
  carrierType: Int
  carrierNum: String
  buyerName: String
  buyerUBN: String
  status: invoiceStatusType
  createdAt: String
  updatedAt: String
}

input InvoicesCreateInput {
  data: invoiceCreateInput
}

type member {
  id: ID!
  firebaseId: String
  email: String
  marketingMembership: marketingMembership
  type: memberTypeType
  state: memberStateType
  tos: Boolean
  dateJoined: String
  firstName: String
  lastName: String
  name: String
  gender: memberGenderType
  phone: String
  birthday: String
  address: String
  nickname: String
  profileImage: String
  city: String
  country: String
  district: String
  subscription(
    where: subscriptionWhereInput! = {}
    search: String
    orderBy: [subscriptionOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [subscription!]
  subscriptionCount(where: subscriptionWhereInput! = {}): Int
  createdAt: String
  updatedAt: String
}

"""
Nested fields are removed
"""
type memberInfo {
  id: ID!
  firebaseId: String
  email: String
  type: memberTypeType
  state: memberStateType
  tos: Boolean
  dateJoined: String
  firstName: String
  lastName: String
  name: String
  gender: memberGenderType
  phone: String
  birthday: String
  address: String
  nickname: String
  profileImage: String
  city: String
  country: String
  district: String
  createdAt: String
  updatedAt: String
}

enum memberTypeType {
  subscribe_yearly
  subscribe_monthly
  subscribe_one_time
  marketing
  none
}

enum memberStateType {
  active
  inactive
}

enum memberGenderType {
  M
  F
  NA
}

input memberWhereInput {
  AND: [memberWhereInput!]
  OR: [memberWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  firebaseId: String
  firebaseId_not: String
  firebaseId_contains: String
  firebaseId_not_contains: String
  firebaseId_starts_with: String
  firebaseId_not_starts_with: String
  firebaseId_ends_with: String
  firebaseId_not_ends_with: String
  firebaseId_i: String
  firebaseId_not_i: String
  firebaseId_contains_i: String
  firebaseId_not_contains_i: String
  firebaseId_starts_with_i: String
  firebaseId_not_starts_with_i: String
  firebaseId_ends_with_i: String
  firebaseId_not_ends_with_i: String
  firebaseId_in: [String]
  firebaseId_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  marketingMembership: marketingMembershipWhereInput
  marketingMembership_is_null: Boolean
  type: memberTypeType
  type_not: memberTypeType
  type_in: [memberTypeType]
  type_not_in: [memberTypeType]
  state: memberStateType
  state_not: memberStateType
  state_in: [memberStateType]
  state_not_in: [memberStateType]
  tos: Boolean
  tos_not: Boolean
  dateJoined: String
  dateJoined_not: String
  dateJoined_lt: String
  dateJoined_lte: String
  dateJoined_gt: String
  dateJoined_gte: String
  dateJoined_in: [String]
  dateJoined_not_in: [String]
  firstName: String
  firstName_not: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  firstName_i: String
  firstName_not_i: String
  firstName_contains_i: String
  firstName_not_contains_i: String
  firstName_starts_with_i: String
  firstName_not_starts_with_i: String
  firstName_ends_with_i: String
  firstName_not_ends_with_i: String
  firstName_in: [String]
  firstName_not_in: [String]
  lastName: String
  lastName_not: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  lastName_i: String
  lastName_not_i: String
  lastName_contains_i: String
  lastName_not_contains_i: String
  lastName_starts_with_i: String
  lastName_not_starts_with_i: String
  lastName_ends_with_i: String
  lastName_not_ends_with_i: String
  lastName_in: [String]
  lastName_not_in: [String]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  gender: memberGenderType
  gender_not: memberGenderType
  gender_in: [memberGenderType]
  gender_not_in: [memberGenderType]
  phone: String
  phone_not: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  phone_i: String
  phone_not_i: String
  phone_contains_i: String
  phone_not_contains_i: String
  phone_starts_with_i: String
  phone_not_starts_with_i: String
  phone_ends_with_i: String
  phone_not_ends_with_i: String
  phone_in: [String]
  phone_not_in: [String]
  birthday: String
  birthday_not: String
  birthday_lt: String
  birthday_lte: String
  birthday_gt: String
  birthday_gte: String
  birthday_in: [String]
  birthday_not_in: [String]
  address: String
  address_not: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  address_i: String
  address_not_i: String
  address_contains_i: String
  address_not_contains_i: String
  address_starts_with_i: String
  address_not_starts_with_i: String
  address_ends_with_i: String
  address_not_ends_with_i: String
  address_in: [String]
  address_not_in: [String]
  nickname: String
  nickname_not: String
  nickname_contains: String
  nickname_not_contains: String
  nickname_starts_with: String
  nickname_not_starts_with: String
  nickname_ends_with: String
  nickname_not_ends_with: String
  nickname_i: String
  nickname_not_i: String
  nickname_contains_i: String
  nickname_not_contains_i: String
  nickname_starts_with_i: String
  nickname_not_starts_with_i: String
  nickname_ends_with_i: String
  nickname_not_ends_with_i: String
  nickname_in: [String]
  nickname_not_in: [String]
  profileImage: String
  profileImage_not: String
  profileImage_contains: String
  profileImage_not_contains: String
  profileImage_starts_with: String
  profileImage_not_starts_with: String
  profileImage_ends_with: String
  profileImage_not_ends_with: String
  profileImage_i: String
  profileImage_not_i: String
  profileImage_contains_i: String
  profileImage_not_contains_i: String
  profileImage_starts_with_i: String
  profileImage_not_starts_with_i: String
  profileImage_ends_with_i: String
  profileImage_not_ends_with_i: String
  profileImage_in: [String]
  profileImage_not_in: [String]
  city: String
  city_not: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  city_i: String
  city_not_i: String
  city_contains_i: String
  city_not_contains_i: String
  city_starts_with_i: String
  city_not_starts_with_i: String
  city_ends_with_i: String
  city_not_ends_with_i: String
  city_in: [String]
  city_not_in: [String]
  country: String
  country_not: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  country_i: String
  country_not_i: String
  country_contains_i: String
  country_not_contains_i: String
  country_starts_with_i: String
  country_not_starts_with_i: String
  country_ends_with_i: String
  country_not_ends_with_i: String
  country_in: [String]
  country_not_in: [String]
  district: String
  district_not: String
  district_contains: String
  district_not_contains: String
  district_starts_with: String
  district_not_starts_with: String
  district_ends_with: String
  district_not_ends_with: String
  district_i: String
  district_not_i: String
  district_contains_i: String
  district_not_contains_i: String
  district_starts_with_i: String
  district_not_starts_with_i: String
  district_ends_with_i: String
  district_not_ends_with_i: String
  district_in: [String]
  district_not_in: [String]
  subscription_every: subscriptionWhereInput
  subscription_some: subscriptionWhereInput
  subscription_none: subscriptionWhereInput
  createdAt: String
  createdAt_not: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdAt_in: [String]
  createdAt_not_in: [String]
  updatedAt: String
  updatedAt_not: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedAt_in: [String]
  updatedAt_not_in: [String]
  createdBy_is_null: Boolean
  updatedBy_is_null: Boolean
}

input memberWhereUniqueInput {
  firebaseId: String!
}

enum SortMembersBy {
  id_ASC
  id_DESC
  firebaseId_ASC
  firebaseId_DESC
  email_ASC
  email_DESC
  type_ASC
  type_DESC
  state_ASC
  state_DESC
  tos_ASC
  tos_DESC
  dateJoined_ASC
  dateJoined_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  name_ASC
  name_DESC
  gender_ASC
  gender_DESC
  phone_ASC
  phone_DESC
  birthday_ASC
  birthday_DESC
  address_ASC
  address_DESC
  nickname_ASC
  nickname_DESC
  profileImage_ASC
  profileImage_DESC
  city_ASC
  city_DESC
  country_ASC
  country_DESC
  district_ASC
  district_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input memberOrderByInput {
  id: OrderDirection
  firebaseId: OrderDirection
  email: OrderDirection
  type: OrderDirection
  state: OrderDirection
  tos: OrderDirection
  dateJoined: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  name: OrderDirection
  gender: OrderDirection
  phone: OrderDirection
  birthday: OrderDirection
  address: OrderDirection
  nickname: OrderDirection
  profileImage: OrderDirection
  city: OrderDirection
  country: OrderDirection
  district: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input memberPrivateUpdateInput {
  firebaseId: String
  email: String
  marketingMembership: marketingMembershipRelateToOneInput
  type: memberTypeType
  state: memberStateType
  tos: Boolean
  dateJoined: String
  firstName: String
  lastName: String
  name: String
  gender: memberGenderType
  phone: String
  birthday: String
  address: String
  nickname: String
  profileImage: String
  city: String
  country: String
  district: String
  subscription: subscriptionRelateToManyInput
  createdAt: String
  updatedAt: String
}

input marketingMembershipRelateToOneInput {
  create: marketingMembershipCreateInput
  connect: marketingMembershipWhereUniqueInput
  disconnect: marketingMembershipWhereUniqueInput
  disconnectAll: Boolean
}

input subscriptionRelateToManyInput {
  create: [subscriptionCreateInput]
  connect: [subscriptionWhereUniqueInput]
  disconnect: [subscriptionWhereUniqueInput]
  disconnectAll: Boolean
}

input MembersPrivateUpdateInput {
  id: ID!
  data: memberUpdateInput
}

input memberPrivateCreateInput {
  firebaseId: String!
  email: String!
  marketingMembership: marketingMembershipRelateToOneInput
  type: memberTypeType!
  state: memberStateType
  tos: Boolean
  dateJoined: String!
  firstName: String
  lastName: String
  name: String
  gender: memberGenderType
  phone: String
  birthday: String
  address: String
  nickname: String
  profileImage: String
  city: String
  country: String
  district: String
  subscription: subscriptionRelateToManyInput
  createdAt: String
  updatedAt: String
}

input MembersPrivateCreateInput {
  data: memberCreateInput
}

type merchandise {
  id: ID!
  name: String
  code: String
  price: Float
  currency: merchandiseCurrencyType
  state: merchandiseStateType
  desc: String
  comment: String
  createdAt: String
  updatedAt: String
}

enum merchandiseCurrencyType {
  TWD
}

enum merchandiseStateType {
  active
  inactive
}

input merchandiseWhereInput {
  AND: [merchandiseWhereInput!]
  OR: [merchandiseWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  code: String
  code_not: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  code_i: String
  code_not_i: String
  code_contains_i: String
  code_not_contains_i: String
  code_starts_with_i: String
  code_not_starts_with_i: String
  code_ends_with_i: String
  code_not_ends_with_i: String
  code_in: [String]
  code_not_in: [String]
  price: Float
  price_not: Float
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  price_in: [Float]
  price_not_in: [Float]
  currency: merchandiseCurrencyType
  currency_not: merchandiseCurrencyType
  currency_in: [merchandiseCurrencyType]
  currency_not_in: [merchandiseCurrencyType]
  state: merchandiseStateType
  state_not: merchandiseStateType
  state_in: [merchandiseStateType]
  state_not_in: [merchandiseStateType]
  desc: String
  desc_not: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  desc_i: String
  desc_not_i: String
  desc_contains_i: String
  desc_not_contains_i: String
  desc_starts_with_i: String
  desc_not_starts_with_i: String
  desc_ends_with_i: String
  desc_not_ends_with_i: String
  desc_in: [String]
  desc_not_in: [String]
  comment: String
  comment_not: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  comment_i: String
  comment_not_i: String
  comment_contains_i: String
  comment_not_contains_i: String
  comment_starts_with_i: String
  comment_not_starts_with_i: String
  comment_ends_with_i: String
  comment_not_ends_with_i: String
  comment_in: [String]
  comment_not_in: [String]
  createdAt: String
  createdAt_not: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdAt_in: [String]
  createdAt_not_in: [String]
  updatedAt: String
  updatedAt_not: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedAt_in: [String]
  updatedAt_not_in: [String]
  createdBy_is_null: Boolean
  updatedBy_is_null: Boolean
}

input merchandiseWhereUniqueInput {
  id: ID
  name: String
  code: String
}

enum SortMerchandisesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  code_ASC
  code_DESC
  price_ASC
  price_DESC
  currency_ASC
  currency_DESC
  state_ASC
  state_DESC
  desc_ASC
  desc_DESC
  comment_ASC
  comment_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input merchandiseOrderByInput {
  id: OrderDirection
  name: OrderDirection
  code: OrderDirection
  price: OrderDirection
  currency: OrderDirection
  state: OrderDirection
  desc: OrderDirection
  comment: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input merchandiseUpdateInput {
  name: String
  code: String
  price: Float
  currency: merchandiseCurrencyType
  state: merchandiseStateType
  desc: String
  comment: String
  createdAt: String
  updatedAt: String
}

input MerchandisesUpdateInput {
  id: ID!
  data: merchandiseUpdateInput
}

input merchandiseCreateInput {
  name: String
  code: String
  price: Float
  currency: merchandiseCurrencyType
  state: merchandiseStateType
  desc: String
  comment: String
  createdAt: String
  updatedAt: String
}

input MerchandisesCreateInput {
  data: merchandiseCreateInput
}

type marketingMembership {
  id: ID!
  member: member
  status: marketingMembershipStatusType
  startDate: String
  endDate: String
  requesterEmail: String
  approvedBy: String
  createdAt: String
  updatedAt: String
}

enum marketingMembershipStatusType {
  active
  inactive
}

input marketingMembershipWhereInput {
  AND: [marketingMembershipWhereInput!]
  OR: [marketingMembershipWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  member: memberWhereInput
  member_is_null: Boolean
  status: marketingMembershipStatusType
  status_not: marketingMembershipStatusType
  status_in: [marketingMembershipStatusType]
  status_not_in: [marketingMembershipStatusType]
  startDate: String
  startDate_not: String
  startDate_lt: String
  startDate_lte: String
  startDate_gt: String
  startDate_gte: String
  startDate_in: [String]
  startDate_not_in: [String]
  endDate: String
  endDate_not: String
  endDate_lt: String
  endDate_lte: String
  endDate_gt: String
  endDate_gte: String
  endDate_in: [String]
  endDate_not_in: [String]
  requesterEmail: String
  requesterEmail_not: String
  requesterEmail_contains: String
  requesterEmail_not_contains: String
  requesterEmail_starts_with: String
  requesterEmail_not_starts_with: String
  requesterEmail_ends_with: String
  requesterEmail_not_ends_with: String
  requesterEmail_i: String
  requesterEmail_not_i: String
  requesterEmail_contains_i: String
  requesterEmail_not_contains_i: String
  requesterEmail_starts_with_i: String
  requesterEmail_not_starts_with_i: String
  requesterEmail_ends_with_i: String
  requesterEmail_not_ends_with_i: String
  requesterEmail_in: [String]
  requesterEmail_not_in: [String]
  approvedBy: String
  approvedBy_not: String
  approvedBy_contains: String
  approvedBy_not_contains: String
  approvedBy_starts_with: String
  approvedBy_not_starts_with: String
  approvedBy_ends_with: String
  approvedBy_not_ends_with: String
  approvedBy_i: String
  approvedBy_not_i: String
  approvedBy_contains_i: String
  approvedBy_not_contains_i: String
  approvedBy_starts_with_i: String
  approvedBy_not_starts_with_i: String
  approvedBy_ends_with_i: String
  approvedBy_not_ends_with_i: String
  approvedBy_in: [String]
  approvedBy_not_in: [String]
  createdAt: String
  createdAt_not: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdAt_in: [String]
  createdAt_not_in: [String]
  updatedAt: String
  updatedAt_not: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedAt_in: [String]
  updatedAt_not_in: [String]
  createdBy_is_null: Boolean
  updatedBy_is_null: Boolean
}

input marketingMembershipWhereUniqueInput {
  id: ID
}

enum SortMarketingMembershipsBy {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  requesterEmail_ASC
  requesterEmail_DESC
  approvedBy_ASC
  approvedBy_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input marketingMembershipOrderByInput {
  id: OrderDirection
  status: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  requesterEmail: OrderDirection
  approvedBy: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input marketingMembershipUpdateInput {
  member: memberRelateToOneInput
  status: marketingMembershipStatusType
  startDate: String
  endDate: String
  requesterEmail: String
  approvedBy: String
  createdAt: String
  updatedAt: String
}

input memberRelateToOneInput {
  create: memberCreateInput
  connect: memberWhereUniqueInput
  disconnect: memberWhereUniqueInput
  disconnectAll: Boolean
}

input MarketingMembershipsUpdateInput {
  id: ID!
  data: marketingMembershipUpdateInput
}

input marketingMembershipCreateInput {
  member: memberRelateToOneInput
  status: marketingMembershipStatusType
  startDate: String
  endDate: String
  requesterEmail: String
  approvedBy: String
  createdAt: String
  updatedAt: String
}

input MarketingMembershipsCreateInput {
  data: marketingMembershipCreateInput
}

type newebpayPaymentInfo {
  id: ID!
  subscription: subscription
  tokenTerm: String
  tokenValue: String
  tokenLife: String
  createdAt: String
  updatedAt: String
}

input newebpayPaymentInfoWhereInput {
  AND: [newebpayPaymentInfoWhereInput!]
  OR: [newebpayPaymentInfoWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  subscription: subscriptionWhereInput
  subscription_is_null: Boolean
  tokenTerm: String
  tokenTerm_not: String
  tokenTerm_contains: String
  tokenTerm_not_contains: String
  tokenTerm_starts_with: String
  tokenTerm_not_starts_with: String
  tokenTerm_ends_with: String
  tokenTerm_not_ends_with: String
  tokenTerm_i: String
  tokenTerm_not_i: String
  tokenTerm_contains_i: String
  tokenTerm_not_contains_i: String
  tokenTerm_starts_with_i: String
  tokenTerm_not_starts_with_i: String
  tokenTerm_ends_with_i: String
  tokenTerm_not_ends_with_i: String
  tokenTerm_in: [String]
  tokenTerm_not_in: [String]
  tokenValue: String
  tokenValue_not: String
  tokenValue_contains: String
  tokenValue_not_contains: String
  tokenValue_starts_with: String
  tokenValue_not_starts_with: String
  tokenValue_ends_with: String
  tokenValue_not_ends_with: String
  tokenValue_i: String
  tokenValue_not_i: String
  tokenValue_contains_i: String
  tokenValue_not_contains_i: String
  tokenValue_starts_with_i: String
  tokenValue_not_starts_with_i: String
  tokenValue_ends_with_i: String
  tokenValue_not_ends_with_i: String
  tokenValue_in: [String]
  tokenValue_not_in: [String]
  tokenLife: String
  tokenLife_not: String
  tokenLife_lt: String
  tokenLife_lte: String
  tokenLife_gt: String
  tokenLife_gte: String
  tokenLife_in: [String]
  tokenLife_not_in: [String]
  createdAt: String
  createdAt_not: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdAt_in: [String]
  createdAt_not_in: [String]
  updatedAt: String
  updatedAt_not: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedAt_in: [String]
  updatedAt_not_in: [String]
  createdBy_is_null: Boolean
  updatedBy_is_null: Boolean
}

input newebpayPaymentInfoWhereUniqueInput {
  id: ID
}

enum SortNewebpayPaymentInfosBy {
  id_ASC
  id_DESC
  tokenTerm_ASC
  tokenTerm_DESC
  tokenValue_ASC
  tokenValue_DESC
  tokenLife_ASC
  tokenLife_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input newebpayPaymentInfoOrderByInput {
  id: OrderDirection
  tokenTerm: OrderDirection
  tokenValue: OrderDirection
  tokenLife: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input newebpayPaymentInfoUpdateInput {
  subscription: subscriptionRelateToOneInput
  tokenTerm: String
  tokenValue: String
  tokenLife: String
  createdAt: String
  updatedAt: String
}

input subscriptionRelateToOneInput {
  create: subscriptionCreateInput
  connect: subscriptionWhereUniqueInput
  disconnect: subscriptionWhereUniqueInput
  disconnectAll: Boolean
}

input NewebpayPaymentInfosUpdateInput {
  id: ID!
  data: newebpayPaymentInfoUpdateInput
}

input newebpayPaymentInfoCreateInput {
  subscription: subscriptionRelateToOneInput
  tokenTerm: String
  tokenValue: String
  tokenLife: String
  createdAt: String
  updatedAt: String
}

input NewebpayPaymentInfosCreateInput {
  data: newebpayPaymentInfoCreateInput
}

type newebpayPayment {
  id: ID!
  subscription: subscription
  invoice: invoice
  amount: Int
  status: String
  paymentMethod: String
  paymentTime: String
  tradeNumber: String
  message: String
  merchantId: String
  orderNumber: String
  tokenUseStatus: Int
  respondCode: String
  ECI: String
  authCode: String
  authBank: String
  cardInfoLastFour: String
  cardInfoFirstSix: String
  cardInfoExp: String
  createdAt: String
  updatedAt: String
}

input newebpayPaymentWhereInput {
  AND: [newebpayPaymentWhereInput!]
  OR: [newebpayPaymentWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  subscription: subscriptionWhereInput
  subscription_is_null: Boolean
  invoice: invoiceWhereInput
  invoice_is_null: Boolean
  amount: Int
  amount_not: Int
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  amount_in: [Int]
  amount_not_in: [Int]
  status: String
  status_not: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  status_i: String
  status_not_i: String
  status_contains_i: String
  status_not_contains_i: String
  status_starts_with_i: String
  status_not_starts_with_i: String
  status_ends_with_i: String
  status_not_ends_with_i: String
  status_in: [String]
  status_not_in: [String]
  paymentMethod: String
  paymentMethod_not: String
  paymentMethod_contains: String
  paymentMethod_not_contains: String
  paymentMethod_starts_with: String
  paymentMethod_not_starts_with: String
  paymentMethod_ends_with: String
  paymentMethod_not_ends_with: String
  paymentMethod_i: String
  paymentMethod_not_i: String
  paymentMethod_contains_i: String
  paymentMethod_not_contains_i: String
  paymentMethod_starts_with_i: String
  paymentMethod_not_starts_with_i: String
  paymentMethod_ends_with_i: String
  paymentMethod_not_ends_with_i: String
  paymentMethod_in: [String]
  paymentMethod_not_in: [String]
  paymentTime: String
  paymentTime_not: String
  paymentTime_lt: String
  paymentTime_lte: String
  paymentTime_gt: String
  paymentTime_gte: String
  paymentTime_in: [String]
  paymentTime_not_in: [String]
  tradeNumber: String
  tradeNumber_not: String
  tradeNumber_contains: String
  tradeNumber_not_contains: String
  tradeNumber_starts_with: String
  tradeNumber_not_starts_with: String
  tradeNumber_ends_with: String
  tradeNumber_not_ends_with: String
  tradeNumber_i: String
  tradeNumber_not_i: String
  tradeNumber_contains_i: String
  tradeNumber_not_contains_i: String
  tradeNumber_starts_with_i: String
  tradeNumber_not_starts_with_i: String
  tradeNumber_ends_with_i: String
  tradeNumber_not_ends_with_i: String
  tradeNumber_in: [String]
  tradeNumber_not_in: [String]
  message: String
  message_not: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  message_i: String
  message_not_i: String
  message_contains_i: String
  message_not_contains_i: String
  message_starts_with_i: String
  message_not_starts_with_i: String
  message_ends_with_i: String
  message_not_ends_with_i: String
  message_in: [String]
  message_not_in: [String]
  merchantId: String
  merchantId_not: String
  merchantId_contains: String
  merchantId_not_contains: String
  merchantId_starts_with: String
  merchantId_not_starts_with: String
  merchantId_ends_with: String
  merchantId_not_ends_with: String
  merchantId_i: String
  merchantId_not_i: String
  merchantId_contains_i: String
  merchantId_not_contains_i: String
  merchantId_starts_with_i: String
  merchantId_not_starts_with_i: String
  merchantId_ends_with_i: String
  merchantId_not_ends_with_i: String
  merchantId_in: [String]
  merchantId_not_in: [String]
  orderNumber: String
  orderNumber_not: String
  orderNumber_contains: String
  orderNumber_not_contains: String
  orderNumber_starts_with: String
  orderNumber_not_starts_with: String
  orderNumber_ends_with: String
  orderNumber_not_ends_with: String
  orderNumber_i: String
  orderNumber_not_i: String
  orderNumber_contains_i: String
  orderNumber_not_contains_i: String
  orderNumber_starts_with_i: String
  orderNumber_not_starts_with_i: String
  orderNumber_ends_with_i: String
  orderNumber_not_ends_with_i: String
  orderNumber_in: [String]
  orderNumber_not_in: [String]
  tokenUseStatus: Int
  tokenUseStatus_not: Int
  tokenUseStatus_lt: Int
  tokenUseStatus_lte: Int
  tokenUseStatus_gt: Int
  tokenUseStatus_gte: Int
  tokenUseStatus_in: [Int]
  tokenUseStatus_not_in: [Int]
  respondCode: String
  respondCode_not: String
  respondCode_contains: String
  respondCode_not_contains: String
  respondCode_starts_with: String
  respondCode_not_starts_with: String
  respondCode_ends_with: String
  respondCode_not_ends_with: String
  respondCode_i: String
  respondCode_not_i: String
  respondCode_contains_i: String
  respondCode_not_contains_i: String
  respondCode_starts_with_i: String
  respondCode_not_starts_with_i: String
  respondCode_ends_with_i: String
  respondCode_not_ends_with_i: String
  respondCode_in: [String]
  respondCode_not_in: [String]
  ECI: String
  ECI_not: String
  ECI_contains: String
  ECI_not_contains: String
  ECI_starts_with: String
  ECI_not_starts_with: String
  ECI_ends_with: String
  ECI_not_ends_with: String
  ECI_i: String
  ECI_not_i: String
  ECI_contains_i: String
  ECI_not_contains_i: String
  ECI_starts_with_i: String
  ECI_not_starts_with_i: String
  ECI_ends_with_i: String
  ECI_not_ends_with_i: String
  ECI_in: [String]
  ECI_not_in: [String]
  authCode: String
  authCode_not: String
  authCode_contains: String
  authCode_not_contains: String
  authCode_starts_with: String
  authCode_not_starts_with: String
  authCode_ends_with: String
  authCode_not_ends_with: String
  authCode_i: String
  authCode_not_i: String
  authCode_contains_i: String
  authCode_not_contains_i: String
  authCode_starts_with_i: String
  authCode_not_starts_with_i: String
  authCode_ends_with_i: String
  authCode_not_ends_with_i: String
  authCode_in: [String]
  authCode_not_in: [String]
  authBank: String
  authBank_not: String
  authBank_contains: String
  authBank_not_contains: String
  authBank_starts_with: String
  authBank_not_starts_with: String
  authBank_ends_with: String
  authBank_not_ends_with: String
  authBank_i: String
  authBank_not_i: String
  authBank_contains_i: String
  authBank_not_contains_i: String
  authBank_starts_with_i: String
  authBank_not_starts_with_i: String
  authBank_ends_with_i: String
  authBank_not_ends_with_i: String
  authBank_in: [String]
  authBank_not_in: [String]
  cardInfoLastFour: String
  cardInfoLastFour_not: String
  cardInfoLastFour_contains: String
  cardInfoLastFour_not_contains: String
  cardInfoLastFour_starts_with: String
  cardInfoLastFour_not_starts_with: String
  cardInfoLastFour_ends_with: String
  cardInfoLastFour_not_ends_with: String
  cardInfoLastFour_i: String
  cardInfoLastFour_not_i: String
  cardInfoLastFour_contains_i: String
  cardInfoLastFour_not_contains_i: String
  cardInfoLastFour_starts_with_i: String
  cardInfoLastFour_not_starts_with_i: String
  cardInfoLastFour_ends_with_i: String
  cardInfoLastFour_not_ends_with_i: String
  cardInfoLastFour_in: [String]
  cardInfoLastFour_not_in: [String]
  cardInfoFirstSix: String
  cardInfoFirstSix_not: String
  cardInfoFirstSix_contains: String
  cardInfoFirstSix_not_contains: String
  cardInfoFirstSix_starts_with: String
  cardInfoFirstSix_not_starts_with: String
  cardInfoFirstSix_ends_with: String
  cardInfoFirstSix_not_ends_with: String
  cardInfoFirstSix_i: String
  cardInfoFirstSix_not_i: String
  cardInfoFirstSix_contains_i: String
  cardInfoFirstSix_not_contains_i: String
  cardInfoFirstSix_starts_with_i: String
  cardInfoFirstSix_not_starts_with_i: String
  cardInfoFirstSix_ends_with_i: String
  cardInfoFirstSix_not_ends_with_i: String
  cardInfoFirstSix_in: [String]
  cardInfoFirstSix_not_in: [String]
  cardInfoExp: String
  cardInfoExp_not: String
  cardInfoExp_contains: String
  cardInfoExp_not_contains: String
  cardInfoExp_starts_with: String
  cardInfoExp_not_starts_with: String
  cardInfoExp_ends_with: String
  cardInfoExp_not_ends_with: String
  cardInfoExp_i: String
  cardInfoExp_not_i: String
  cardInfoExp_contains_i: String
  cardInfoExp_not_contains_i: String
  cardInfoExp_starts_with_i: String
  cardInfoExp_not_starts_with_i: String
  cardInfoExp_ends_with_i: String
  cardInfoExp_not_ends_with_i: String
  cardInfoExp_in: [String]
  cardInfoExp_not_in: [String]
  createdAt: String
  createdAt_not: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdAt_in: [String]
  createdAt_not_in: [String]
  updatedAt: String
  updatedAt_not: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedAt_in: [String]
  updatedAt_not_in: [String]
  createdBy_is_null: Boolean
  updatedBy_is_null: Boolean
}

input newebpayPaymentWhereUniqueInput {
  id: ID
  orderNumber: String
}

enum SortNewebpayPaymentsBy {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
  status_ASC
  status_DESC
  paymentMethod_ASC
  paymentMethod_DESC
  paymentTime_ASC
  paymentTime_DESC
  tradeNumber_ASC
  tradeNumber_DESC
  message_ASC
  message_DESC
  merchantId_ASC
  merchantId_DESC
  orderNumber_ASC
  orderNumber_DESC
  tokenUseStatus_ASC
  tokenUseStatus_DESC
  respondCode_ASC
  respondCode_DESC
  ECI_ASC
  ECI_DESC
  authCode_ASC
  authCode_DESC
  authBank_ASC
  authBank_DESC
  cardInfoLastFour_ASC
  cardInfoLastFour_DESC
  cardInfoFirstSix_ASC
  cardInfoFirstSix_DESC
  cardInfoExp_ASC
  cardInfoExp_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input newebpayPaymentOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  status: OrderDirection
  paymentMethod: OrderDirection
  paymentTime: OrderDirection
  tradeNumber: OrderDirection
  message: OrderDirection
  merchantId: OrderDirection
  orderNumber: OrderDirection
  tokenUseStatus: OrderDirection
  respondCode: OrderDirection
  ECI: OrderDirection
  authCode: OrderDirection
  authBank: OrderDirection
  cardInfoLastFour: OrderDirection
  cardInfoFirstSix: OrderDirection
  cardInfoExp: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input newebpayPaymentUpdateInput {
  subscription: subscriptionRelateToOneInput
  invoice: invoiceRelateToOneInput
  amount: Int
  status: String
  paymentMethod: String
  paymentTime: String
  tradeNumber: String
  message: String
  merchantId: String
  orderNumber: String
  tokenUseStatus: Int
  respondCode: String
  ECI: String
  authCode: String
  authBank: String
  cardInfoLastFour: String
  cardInfoFirstSix: String
  cardInfoExp: String
  createdAt: String
  updatedAt: String
}

input invoiceRelateToOneInput {
  create: invoiceCreateInput
  connect: invoiceWhereUniqueInput
  disconnect: invoiceWhereUniqueInput
  disconnectAll: Boolean
}

input NewebpayPaymentsUpdateInput {
  id: ID!
  data: newebpayPaymentUpdateInput
}

input newebpayPaymentCreateInput {
  subscription: subscriptionRelateToOneInput
  invoice: invoiceRelateToOneInput
  amount: Int
  status: String
  paymentMethod: String
  paymentTime: String
  tradeNumber: String
  message: String
  merchantId: String
  orderNumber: String
  tokenUseStatus: Int
  respondCode: String
  ECI: String
  authCode: String
  authBank: String
  cardInfoLastFour: String
  cardInfoFirstSix: String
  cardInfoExp: String
  createdAt: String
  updatedAt: String
}

input NewebpayPaymentsCreateInput {
  data: newebpayPaymentCreateInput
}

type applepayPayment {
  id: ID!
  subscription: subscription
  invoice: invoice
  createdAt: String
  updatedAt: String
}

input applepayPaymentWhereInput {
  AND: [applepayPaymentWhereInput!]
  OR: [applepayPaymentWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  subscription: subscriptionWhereInput
  subscription_is_null: Boolean
  invoice: invoiceWhereInput
  invoice_is_null: Boolean
  createdAt: String
  createdAt_not: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdAt_in: [String]
  createdAt_not_in: [String]
  updatedAt: String
  updatedAt_not: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedAt_in: [String]
  updatedAt_not_in: [String]
  createdBy_is_null: Boolean
  updatedBy_is_null: Boolean
}

input applepayPaymentWhereUniqueInput {
  id: ID
}

enum SortApplepayPaymentsBy {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input applepayPaymentOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input applepayPaymentUpdateInput {
  subscription: subscriptionRelateToOneInput
  invoice: invoiceRelateToOneInput
  createdAt: String
  updatedAt: String
}

input ApplepayPaymentsUpdateInput {
  id: ID!
  data: applepayPaymentUpdateInput
}

input applepayPaymentCreateInput {
  subscription: subscriptionRelateToOneInput
  invoice: invoiceRelateToOneInput
  createdAt: String
  updatedAt: String
}

input ApplepayPaymentsCreateInput {
  data: applepayPaymentCreateInput
}

type androidpayPayment {
  id: ID!
  subscription: subscription
  invoice: invoice
  createdAt: String
  updatedAt: String
}

input androidpayPaymentWhereInput {
  AND: [androidpayPaymentWhereInput!]
  OR: [androidpayPaymentWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  subscription: subscriptionWhereInput
  subscription_is_null: Boolean
  invoice: invoiceWhereInput
  invoice_is_null: Boolean
  createdAt: String
  createdAt_not: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdAt_in: [String]
  createdAt_not_in: [String]
  updatedAt: String
  updatedAt_not: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedAt_in: [String]
  updatedAt_not_in: [String]
  createdBy_is_null: Boolean
  updatedBy_is_null: Boolean
}

input androidpayPaymentWhereUniqueInput {
  id: ID
}

enum SortAndroidpayPaymentsBy {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input androidpayPaymentOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input androidpayPaymentUpdateInput {
  subscription: subscriptionRelateToOneInput
  invoice: invoiceRelateToOneInput
  createdAt: String
  updatedAt: String
}

input AndroidpayPaymentsUpdateInput {
  id: ID!
  data: androidpayPaymentUpdateInput
}

input androidpayPaymentCreateInput {
  subscription: subscriptionRelateToOneInput
  invoice: invoiceRelateToOneInput
  createdAt: String
  updatedAt: String
}

input AndroidpayPaymentsCreateInput {
  data: androidpayPaymentCreateInput
}

type promotion {
  id: ID!
  code: String
  plan: promotionPlanType
  state: promotionStateType
  startAt: String
  endAt: String
  discount: Float
  createdAt: String
  updatedAt: String
}

enum promotionPlanType {
  yearly
  monthly
}

enum promotionStateType {
  active
  inactive
}

input promotionWhereInput {
  AND: [promotionWhereInput!]
  OR: [promotionWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  code: String
  code_not: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  code_i: String
  code_not_i: String
  code_contains_i: String
  code_not_contains_i: String
  code_starts_with_i: String
  code_not_starts_with_i: String
  code_ends_with_i: String
  code_not_ends_with_i: String
  code_in: [String]
  code_not_in: [String]
  plan: promotionPlanType
  plan_not: promotionPlanType
  plan_in: [promotionPlanType]
  plan_not_in: [promotionPlanType]
  state: promotionStateType
  state_not: promotionStateType
  state_in: [promotionStateType]
  state_not_in: [promotionStateType]
  startAt: String
  startAt_not: String
  startAt_lt: String
  startAt_lte: String
  startAt_gt: String
  startAt_gte: String
  startAt_in: [String]
  startAt_not_in: [String]
  endAt: String
  endAt_not: String
  endAt_lt: String
  endAt_lte: String
  endAt_gt: String
  endAt_gte: String
  endAt_in: [String]
  endAt_not_in: [String]
  discount: Float
  discount_not: Float
  discount_lt: Float
  discount_lte: Float
  discount_gt: Float
  discount_gte: Float
  discount_in: [Float]
  discount_not_in: [Float]
  createdAt: String
  createdAt_not: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdAt_in: [String]
  createdAt_not_in: [String]
  updatedAt: String
  updatedAt_not: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedAt_in: [String]
  updatedAt_not_in: [String]
  createdBy_is_null: Boolean
  updatedBy_is_null: Boolean
}

input promotionWhereUniqueInput {
  id: ID
}

enum SortPromotionsBy {
  id_ASC
  id_DESC
  code_ASC
  code_DESC
  plan_ASC
  plan_DESC
  state_ASC
  state_DESC
  startAt_ASC
  startAt_DESC
  endAt_ASC
  endAt_DESC
  discount_ASC
  discount_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input promotionOrderByInput {
  id: OrderDirection
  code: OrderDirection
  plan: OrderDirection
  state: OrderDirection
  startAt: OrderDirection
  endAt: OrderDirection
  discount: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input promotionUpdateInput {
  code: String
  plan: promotionPlanType
  state: promotionStateType
  startAt: String
  endAt: String
  discount: Float
  createdAt: String
  updatedAt: String
}

input PromotionsUpdateInput {
  id: ID!
  data: promotionUpdateInput
}

input promotionCreateInput {
  code: String
  plan: promotionPlanType
  state: promotionStateType
  startAt: String
  endAt: String
  discount: Float
  createdAt: String
  updatedAt: String
}

input PromotionsCreateInput {
  data: promotionCreateInput
}

type subscription {
  id: ID!
  member: member
  paymentMethod: subscriptionPaymentMethodType
  newebpayPayment(
    where: newebpayPaymentWhereInput! = {}
    search: String
    orderBy: [newebpayPaymentOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [newebpayPayment!]
  newebpayPaymentCount(where: newebpayPaymentWhereInput! = {}): Int
  applepayPayment(
    where: applepayPaymentWhereInput! = {}
    search: String
    orderBy: [applepayPaymentOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [applepayPayment!]
  applepayPaymentCount(where: applepayPaymentWhereInput! = {}): Int
  androidpayPayment(
    where: androidpayPaymentWhereInput! = {}
    search: String
    orderBy: [androidpayPaymentOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [androidpayPayment!]
  androidpayPaymentCount(where: androidpayPaymentWhereInput! = {}): Int
  status: subscriptionStatusType
  amount: Float
  currency: subscriptionCurrencyType
  desc: String
  comment: String
  email: String
  orderNumber: String
  isActive: Boolean
  isCanceled: Boolean
  frequency: subscriptionFrequencyType
  nextFrequency: subscriptionNextFrequencyType
  periodFailureTimes: Int
  periodLastSuccessDatetime: String
  periodNextPayDatetime: String
  periodCreateDatetime: String
  periodFirstDatetime: String
  periodEndDatetime: String
  changePlanDatetime: String
  note: String
  promoteId: Int
  postId: String
  oneTimeStartDatetime: String
  oneTimeEndDatetime: String
  newebpayPaymentInfo: newebpayPaymentInfo
  loveCode: Int
  carrierType: Int
  carrierNum: String
  buyerName: String
  buyerUBN: String
  createdAt: String
  updatedAt: String
}

enum subscriptionPaymentMethodType {
  newebpay
  applepay
  androidpay
}

enum subscriptionStatusType {
  to_pay
  paying
  paid
  fail
  stopped
  invalid
}

enum subscriptionCurrencyType {
  TWD
}

enum subscriptionFrequencyType {
  one_time
  yearly
  monthly
}

enum subscriptionNextFrequencyType {
  none
  yearly
  monthly
}

enum updateSubscriptionNextFrequencyType {
  yearly
}

input subscriptionWhereInput {
  AND: [subscriptionWhereInput!]
  OR: [subscriptionWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  member: memberWhereInput
  member_is_null: Boolean
  paymentMethod: subscriptionPaymentMethodType
  paymentMethod_not: subscriptionPaymentMethodType
  paymentMethod_in: [subscriptionPaymentMethodType]
  paymentMethod_not_in: [subscriptionPaymentMethodType]
  newebpayPayment_every: newebpayPaymentWhereInput
  newebpayPayment_some: newebpayPaymentWhereInput
  newebpayPayment_none: newebpayPaymentWhereInput
  applepayPayment_every: applepayPaymentWhereInput
  applepayPayment_some: applepayPaymentWhereInput
  applepayPayment_none: applepayPaymentWhereInput
  androidpayPayment_every: androidpayPaymentWhereInput
  androidpayPayment_some: androidpayPaymentWhereInput
  androidpayPayment_none: androidpayPaymentWhereInput
  status: subscriptionStatusType
  status_not: subscriptionStatusType
  status_in: [subscriptionStatusType]
  status_not_in: [subscriptionStatusType]
  amount: Float
  amount_not: Float
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  amount_in: [Float]
  amount_not_in: [Float]
  currency: subscriptionCurrencyType
  currency_not: subscriptionCurrencyType
  currency_in: [subscriptionCurrencyType]
  currency_not_in: [subscriptionCurrencyType]
  desc: String
  desc_not: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  desc_i: String
  desc_not_i: String
  desc_contains_i: String
  desc_not_contains_i: String
  desc_starts_with_i: String
  desc_not_starts_with_i: String
  desc_ends_with_i: String
  desc_not_ends_with_i: String
  desc_in: [String]
  desc_not_in: [String]
  comment: String
  comment_not: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  comment_i: String
  comment_not_i: String
  comment_contains_i: String
  comment_not_contains_i: String
  comment_starts_with_i: String
  comment_not_starts_with_i: String
  comment_ends_with_i: String
  comment_not_ends_with_i: String
  comment_in: [String]
  comment_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  orderNumber: String
  orderNumber_not: String
  orderNumber_contains: String
  orderNumber_not_contains: String
  orderNumber_starts_with: String
  orderNumber_not_starts_with: String
  orderNumber_ends_with: String
  orderNumber_not_ends_with: String
  orderNumber_i: String
  orderNumber_not_i: String
  orderNumber_contains_i: String
  orderNumber_not_contains_i: String
  orderNumber_starts_with_i: String
  orderNumber_not_starts_with_i: String
  orderNumber_ends_with_i: String
  orderNumber_not_ends_with_i: String
  orderNumber_in: [String]
  orderNumber_not_in: [String]
  isActive: Boolean
  isActive_not: Boolean
  isCanceled: Boolean
  isCanceled_not: Boolean
  frequency: subscriptionFrequencyType
  frequency_not: subscriptionFrequencyType
  frequency_in: [subscriptionFrequencyType]
  frequency_not_in: [subscriptionFrequencyType]
  nextFrequency: subscriptionNextFrequencyType
  nextFrequency_not: subscriptionNextFrequencyType
  nextFrequency_in: [subscriptionNextFrequencyType]
  nextFrequency_not_in: [subscriptionNextFrequencyType]
  periodFailureTimes: Int
  periodFailureTimes_not: Int
  periodFailureTimes_lt: Int
  periodFailureTimes_lte: Int
  periodFailureTimes_gt: Int
  periodFailureTimes_gte: Int
  periodFailureTimes_in: [Int]
  periodFailureTimes_not_in: [Int]
  periodLastSuccessDatetime: String
  periodLastSuccessDatetime_not: String
  periodLastSuccessDatetime_lt: String
  periodLastSuccessDatetime_lte: String
  periodLastSuccessDatetime_gt: String
  periodLastSuccessDatetime_gte: String
  periodLastSuccessDatetime_in: [String]
  periodLastSuccessDatetime_not_in: [String]
  periodNextPayDatetime: String
  periodNextPayDatetime_not: String
  periodNextPayDatetime_lt: String
  periodNextPayDatetime_lte: String
  periodNextPayDatetime_gt: String
  periodNextPayDatetime_gte: String
  periodNextPayDatetime_in: [String]
  periodNextPayDatetime_not_in: [String]
  periodCreateDatetime: String
  periodCreateDatetime_not: String
  periodCreateDatetime_lt: String
  periodCreateDatetime_lte: String
  periodCreateDatetime_gt: String
  periodCreateDatetime_gte: String
  periodCreateDatetime_in: [String]
  periodCreateDatetime_not_in: [String]
  periodFirstDatetime: Int
  periodFirstDatetime_not: Int
  periodFirstDatetime_lt: Int
  periodFirstDatetime_lte: Int
  periodFirstDatetime_gt: Int
  periodFirstDatetime_gte: Int
  periodFirstDatetime_in: [Int]
  periodFirstDatetime_not_in: [Int]
  periodEndDatetime: Int
  periodEndDatetime_not: Int
  periodEndDatetime_lt: Int
  periodEndDatetime_lte: Int
  periodEndDatetime_gt: Int
  periodEndDatetime_gte: Int
  periodEndDatetime_in: [Int]
  periodEndDatetime_not_in: [Int]
  changePlanDatetime: String
  changePlanDatetime_not: String
  changePlanDatetime_lt: String
  changePlanDatetime_lte: String
  changePlanDatetime_gt: String
  changePlanDatetime_gte: String
  changePlanDatetime_in: [String]
  changePlanDatetime_not_in: [String]
  note: String
  note_not: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  note_i: String
  note_not_i: String
  note_contains_i: String
  note_not_contains_i: String
  note_starts_with_i: String
  note_not_starts_with_i: String
  note_ends_with_i: String
  note_not_ends_with_i: String
  note_in: [String]
  note_not_in: [String]
  promoteId: Int
  promoteId_not: Int
  promoteId_lt: Int
  promoteId_lte: Int
  promoteId_gt: Int
  promoteId_gte: Int
  promoteId_in: [Int]
  promoteId_not_in: [Int]
  postId: String
  postId_not: String
  postId_contains: String
  postId_not_contains: String
  postId_starts_with: String
  postId_not_starts_with: String
  postId_ends_with: String
  postId_not_ends_with: String
  postId_i: String
  postId_not_i: String
  postId_contains_i: String
  postId_not_contains_i: String
  postId_starts_with_i: String
  postId_not_starts_with_i: String
  postId_ends_with_i: String
  postId_not_ends_with_i: String
  postId_in: [String]
  postId_not_in: [String]
  oneTimeStartDatetime: Int
  oneTimeStartDatetime_not: Int
  oneTimeStartDatetime_lt: Int
  oneTimeStartDatetime_lte: Int
  oneTimeStartDatetime_gt: Int
  oneTimeStartDatetime_gte: Int
  oneTimeStartDatetime_in: [Int]
  oneTimeStartDatetime_not_in: [Int]
  oneTimeEndDatetime: Int
  oneTimeEndDatetime_not: Int
  oneTimeEndDatetime_lt: Int
  oneTimeEndDatetime_lte: Int
  oneTimeEndDatetime_gt: Int
  oneTimeEndDatetime_gte: Int
  oneTimeEndDatetime_in: [Int]
  oneTimeEndDatetime_not_in: [Int]
  newebpayPaymentInfo: newebpayPaymentInfoWhereInput
  newebpayPaymentInfo_is_null: Boolean
  loveCode: Int
  loveCode_not: Int
  loveCode_lt: Int
  loveCode_lte: Int
  loveCode_gt: Int
  loveCode_gte: Int
  loveCode_in: [Int]
  loveCode_not_in: [Int]
  carrierType: Int
  carrierType_not: Int
  carrierType_in: [Int]
  carrierType_not_in: [Int]
  carrierNum: String
  carrierNum_not: String
  carrierNum_contains: String
  carrierNum_not_contains: String
  carrierNum_starts_with: String
  carrierNum_not_starts_with: String
  carrierNum_ends_with: String
  carrierNum_not_ends_with: String
  carrierNum_i: String
  carrierNum_not_i: String
  carrierNum_contains_i: String
  carrierNum_not_contains_i: String
  carrierNum_starts_with_i: String
  carrierNum_not_starts_with_i: String
  carrierNum_ends_with_i: String
  carrierNum_not_ends_with_i: String
  carrierNum_in: [String]
  carrierNum_not_in: [String]
  buyerName: String
  buyerName_not: String
  buyerName_contains: String
  buyerName_not_contains: String
  buyerName_starts_with: String
  buyerName_not_starts_with: String
  buyerName_ends_with: String
  buyerName_not_ends_with: String
  buyerName_i: String
  buyerName_not_i: String
  buyerName_contains_i: String
  buyerName_not_contains_i: String
  buyerName_starts_with_i: String
  buyerName_not_starts_with_i: String
  buyerName_ends_with_i: String
  buyerName_not_ends_with_i: String
  buyerName_in: [String]
  buyerName_not_in: [String]
  buyerUBN: String
  buyerUBN_not: String
  buyerUBN_contains: String
  buyerUBN_not_contains: String
  buyerUBN_starts_with: String
  buyerUBN_not_starts_with: String
  buyerUBN_ends_with: String
  buyerUBN_not_ends_with: String
  buyerUBN_i: String
  buyerUBN_not_i: String
  buyerUBN_contains_i: String
  buyerUBN_not_contains_i: String
  buyerUBN_starts_with_i: String
  buyerUBN_not_starts_with_i: String
  buyerUBN_ends_with_i: String
  buyerUBN_not_ends_with_i: String
  buyerUBN_in: [String]
  buyerUBN_not_in: [String]
  createdAt: String
  createdAt_not: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdAt_in: [String]
  createdAt_not_in: [String]
  updatedAt: String
  updatedAt_not: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedAt_in: [String]
  updatedAt_not_in: [String]
  createdBy_is_null: Boolean
  updatedBy_is_null: Boolean
}

input subscriptionWhereUniqueInput {
  id: ID
  orderNumber: String
}

enum SortSubscriptionsBy {
  id_ASC
  id_DESC
  paymentMethod_ASC
  paymentMethod_DESC
  status_ASC
  status_DESC
  amount_ASC
  amount_DESC
  currency_ASC
  currency_DESC
  desc_ASC
  desc_DESC
  comment_ASC
  comment_DESC
  email_ASC
  email_DESC
  orderNumber_ASC
  orderNumber_DESC
  isActive_ASC
  isActive_DESC
  isCanceled_ASC
  isCanceled_DESC
  frequency_ASC
  frequency_DESC
  nextFrequency_ASC
  nextFrequency_DESC
  periodFailureTimes_ASC
  periodFailureTimes_DESC
  periodLastSuccessDatetime_ASC
  periodLastSuccessDatetime_DESC
  periodNextPayDatetime_ASC
  periodNextPayDatetime_DESC
  periodCreateDatetime_ASC
  periodCreateDatetime_DESC
  periodFirstDatetime_ASC
  periodFirstDatetime_DESC
  periodEndDatetime_ASC
  periodEndDatetime_DESC
  changePlanDatetime_ASC
  changePlanDatetime_DESC
  note_ASC
  note_DESC
  promoteId_ASC
  promoteId_DESC
  postId_ASC
  postId_DESC
  oneTimeStartDatetime_ASC
  oneTimeStartDatetime_DESC
  oneTimeEndDatetime_ASC
  oneTimeEndDatetime_DESC
  loveCode_ASC
  loveCode_DESC
  carrierType_ASC
  carrierType_DESC
  carrierNum_ASC
  carrierNum_DESC
  buyerName_ASC
  buyerName_DESC
  buyerUBN_ASC
  buyerUBN_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input subscriptionOrderByInput {
  id: OrderDirection
  paymentMethod: OrderDirection
  status: OrderDirection
  amount: OrderDirection
  currency: OrderDirection
  desc: OrderDirection
  comment: OrderDirection
  email: OrderDirection
  orderNumber: OrderDirection
  isActive: OrderDirection
  isCanceled: OrderDirection
  frequency: OrderDirection
  nextFrequency: OrderDirection
  periodFailureTimes: OrderDirection
  periodLastSuccessDatetime: OrderDirection
  periodNextPayDatetime: OrderDirection
  periodCreateDatetime: OrderDirection
  periodFirstDatetime: OrderDirection
  periodEndDatetime: OrderDirection
  changePlanDatetime: OrderDirection
  note: OrderDirection
  promoteId: OrderDirection
  postId: OrderDirection
  oneTimeStartDatetime: OrderDirection
  oneTimeEndDatetime: OrderDirection
  loveCode: OrderDirection
  carrierType: OrderDirection
  carrierNum: OrderDirection
  buyerName: OrderDirection
  buyerUBN: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input subscriptionPrivateUpdateInput {
  member: memberRelateToOneInput
  paymentMethod: subscriptionPaymentMethodType
  newebpayPayment: newebpayPaymentRelateToManyInput
  applepayPayment: applepayPaymentRelateToManyInput
  androidpayPayment: androidpayPaymentRelateToManyInput
  status: subscriptionStatusType
  amount: Float
  currency: subscriptionCurrencyType
  desc: String
  comment: String
  email: String
  orderNumber: String
  isActive: Boolean
  isCanceled: Boolean
  frequency: subscriptionFrequencyType
  nextFrequency: subscriptionNextFrequencyType
  periodFailureTimes: Int
  periodLastSuccessDatetime: String
  periodNextPayDatetime: String
  periodCreateDatetime: String
  periodFirstDatetime: String
  periodEndDatetime: String
  changePlanDatetime: String
  note: String
  promoteId: Int
  postId: String
  oneTimeStartDatetime: String
  oneTimeEndDatetime: String
  newebpayPaymentInfo: newebpayPaymentInfoRelateToOneInput
  loveCode: Int
  carrierType: Int
  carrierNum: String
  buyerName: String
  buyerUBN: String
  createdAt: String
  updatedAt: String
}

input newebpayPaymentRelateToManyInput {
  create: [newebpayPaymentCreateInput]
  connect: [newebpayPaymentWhereUniqueInput]
  disconnect: [newebpayPaymentWhereUniqueInput]
  disconnectAll: Boolean
}

input applepayPaymentRelateToManyInput {
  create: [applepayPaymentCreateInput]
  connect: [applepayPaymentWhereUniqueInput]
  disconnect: [applepayPaymentWhereUniqueInput]
  disconnectAll: Boolean
}

input androidpayPaymentRelateToManyInput {
  create: [androidpayPaymentCreateInput]
  connect: [androidpayPaymentWhereUniqueInput]
  disconnect: [androidpayPaymentWhereUniqueInput]
  disconnectAll: Boolean
}

input newebpayPaymentInfoRelateToOneInput {
  create: newebpayPaymentInfoCreateInput
  connect: newebpayPaymentInfoWhereUniqueInput
  disconnect: newebpayPaymentInfoWhereUniqueInput
  disconnectAll: Boolean
}

input SubscriptionsUpdateInput {
  id: ID!
  data: subscriptionUpdateInput
}

input subscriptionCreateInput {
  member: memberRelateToOneInput
  paymentMethod: subscriptionPaymentMethodType
  newebpayPayment: newebpayPaymentRelateToManyInput
  applepayPayment: applepayPaymentRelateToManyInput
  androidpayPayment: androidpayPaymentRelateToManyInput
  status: subscriptionStatusType
  amount: Float
  currency: subscriptionCurrencyType
  desc: String
  comment: String
  email: String
  orderNumber: String
  isActive: Boolean
  isCanceled: Boolean
  frequency: subscriptionFrequencyType
  nextFrequency: subscriptionNextFrequencyType
  periodFailureTimes: Int
  periodLastSuccessDatetime: String
  periodNextPayDatetime: String
  periodCreateDatetime: String
  periodFirstDatetime: String
  periodEndDatetime: String
  changePlanDatetime: String
  note: String
  promoteId: Int
  postId: String
  oneTimeStartDatetime: String
  oneTimeEndDatetime: String
  newebpayPaymentInfo: newebpayPaymentInfoRelateToOneInput
  loveCode: Int
  carrierType: Int
  carrierNum: String
  buyerName: String
  buyerUBN: String
  createdAt: String
  updatedAt: String
}

input SubscriptionsCreateInput {
  data: subscriptionCreateInput
}

type subscriptionHistory {
  id: ID!
  subscription: subscription
  subscriptionCreatedAt: String
  subscriptionUpdatedAt: String
  member: member
  status: subscriptionHistoryStatusType
  amount: Int
  currency: subscriptionHistoryCurrencyType
  desc: String
  email: String
  orderNumber: String
  frequency: subscriptionHistoryFrequencyType
  tokenValue: String
  tokenLife: String
  tokenTerm: String
  periodLastSuccessDate: String
  periodNextPayDate: String
  periodFirstDate: String
  changePlanDatetime: String
  note: String
  promoteId: Int
  postId: String
  oneTimeStartDate: String
  oneTimeEndDate: String
  action: subscriptionHistoryActionType
}

enum subscriptionHistoryStatusType {
  to_pay
  paying
  paid
  fail
  stopped
  cancelled
  invalid
}

enum subscriptionHistoryCurrencyType {
  TWD
}

enum subscriptionHistoryFrequencyType {
  one_time
  yearly
  monthly
}

enum subscriptionHistoryActionType {
  purge
  upgrade
  cancelled
}

input subscriptionHistoryWhereInput {
  AND: [subscriptionHistoryWhereInput!]
  OR: [subscriptionHistoryWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  subscription: subscriptionWhereInput
  subscription_is_null: Boolean
  subscriptionCreatedAt: String
  subscriptionCreatedAt_not: String
  subscriptionCreatedAt_lt: String
  subscriptionCreatedAt_lte: String
  subscriptionCreatedAt_gt: String
  subscriptionCreatedAt_gte: String
  subscriptionCreatedAt_in: [String]
  subscriptionCreatedAt_not_in: [String]
  subscriptionUpdatedAt: String
  subscriptionUpdatedAt_not: String
  subscriptionUpdatedAt_lt: String
  subscriptionUpdatedAt_lte: String
  subscriptionUpdatedAt_gt: String
  subscriptionUpdatedAt_gte: String
  subscriptionUpdatedAt_in: [String]
  subscriptionUpdatedAt_not_in: [String]
  member: memberWhereInput
  member_is_null: Boolean
  status: subscriptionHistoryStatusType
  status_not: subscriptionHistoryStatusType
  status_in: [subscriptionHistoryStatusType]
  status_not_in: [subscriptionHistoryStatusType]
  amount: Int
  amount_not: Int
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  amount_in: [Int]
  amount_not_in: [Int]
  currency: subscriptionHistoryCurrencyType
  currency_not: subscriptionHistoryCurrencyType
  currency_in: [subscriptionHistoryCurrencyType]
  currency_not_in: [subscriptionHistoryCurrencyType]
  desc: String
  desc_not: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  desc_i: String
  desc_not_i: String
  desc_contains_i: String
  desc_not_contains_i: String
  desc_starts_with_i: String
  desc_not_starts_with_i: String
  desc_ends_with_i: String
  desc_not_ends_with_i: String
  desc_in: [String]
  desc_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  orderNumber: String
  orderNumber_not: String
  orderNumber_contains: String
  orderNumber_not_contains: String
  orderNumber_starts_with: String
  orderNumber_not_starts_with: String
  orderNumber_ends_with: String
  orderNumber_not_ends_with: String
  orderNumber_i: String
  orderNumber_not_i: String
  orderNumber_contains_i: String
  orderNumber_not_contains_i: String
  orderNumber_starts_with_i: String
  orderNumber_not_starts_with_i: String
  orderNumber_ends_with_i: String
  orderNumber_not_ends_with_i: String
  orderNumber_in: [String]
  orderNumber_not_in: [String]
  frequency: subscriptionHistoryFrequencyType
  frequency_not: subscriptionHistoryFrequencyType
  frequency_in: [subscriptionHistoryFrequencyType]
  frequency_not_in: [subscriptionHistoryFrequencyType]
  tokenValue: String
  tokenValue_not: String
  tokenValue_contains: String
  tokenValue_not_contains: String
  tokenValue_starts_with: String
  tokenValue_not_starts_with: String
  tokenValue_ends_with: String
  tokenValue_not_ends_with: String
  tokenValue_i: String
  tokenValue_not_i: String
  tokenValue_contains_i: String
  tokenValue_not_contains_i: String
  tokenValue_starts_with_i: String
  tokenValue_not_starts_with_i: String
  tokenValue_ends_with_i: String
  tokenValue_not_ends_with_i: String
  tokenValue_in: [String]
  tokenValue_not_in: [String]
  tokenLife: String
  tokenLife_not: String
  tokenLife_contains: String
  tokenLife_not_contains: String
  tokenLife_starts_with: String
  tokenLife_not_starts_with: String
  tokenLife_ends_with: String
  tokenLife_not_ends_with: String
  tokenLife_i: String
  tokenLife_not_i: String
  tokenLife_contains_i: String
  tokenLife_not_contains_i: String
  tokenLife_starts_with_i: String
  tokenLife_not_starts_with_i: String
  tokenLife_ends_with_i: String
  tokenLife_not_ends_with_i: String
  tokenLife_in: [String]
  tokenLife_not_in: [String]
  tokenTerm: String
  tokenTerm_not: String
  tokenTerm_contains: String
  tokenTerm_not_contains: String
  tokenTerm_starts_with: String
  tokenTerm_not_starts_with: String
  tokenTerm_ends_with: String
  tokenTerm_not_ends_with: String
  tokenTerm_i: String
  tokenTerm_not_i: String
  tokenTerm_contains_i: String
  tokenTerm_not_contains_i: String
  tokenTerm_starts_with_i: String
  tokenTerm_not_starts_with_i: String
  tokenTerm_ends_with_i: String
  tokenTerm_not_ends_with_i: String
  tokenTerm_in: [String]
  tokenTerm_not_in: [String]
  periodLastSuccessDate: Int
  periodLastSuccessDate_not: Int
  periodLastSuccessDate_lt: Int
  periodLastSuccessDate_lte: Int
  periodLastSuccessDate_gt: Int
  periodLastSuccessDate_gte: Int
  periodLastSuccessDate_in: [Int]
  periodLastSuccessDate_not_in: [Int]
  periodNextPayDate: Int
  periodNextPayDate_not: Int
  periodNextPayDate_lt: Int
  periodNextPayDate_lte: Int
  periodNextPayDate_gt: Int
  periodNextPayDate_gte: Int
  periodNextPayDate_in: [Int]
  periodNextPayDate_not_in: [Int]
  periodFirstDate: Int
  periodFirstDate_not: Int
  periodFirstDate_lt: Int
  periodFirstDate_lte: Int
  periodFirstDate_gt: Int
  periodFirstDate_gte: Int
  periodFirstDate_in: [Int]
  periodFirstDate_not_in: [Int]
  changePlanDatetime: Int
  changePlanDatetime_not: Int
  changePlanDatetime_lt: Int
  changePlanDatetime_lte: Int
  changePlanDatetime_gt: Int
  changePlanDatetime_gte: Int
  changePlanDatetime_in: [Int]
  changePlanDatetime_not_in: [Int]
  note: String
  note_not: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  note_i: String
  note_not_i: String
  note_contains_i: String
  note_not_contains_i: String
  note_starts_with_i: String
  note_not_starts_with_i: String
  note_ends_with_i: String
  note_not_ends_with_i: String
  note_in: [String]
  note_not_in: [String]
  promoteId: Int
  promoteId_not: Int
  promoteId_lt: Int
  promoteId_lte: Int
  promoteId_gt: Int
  promoteId_gte: Int
  promoteId_in: [Int]
  promoteId_not_in: [Int]
  postId: String
  postId_not: String
  postId_contains: String
  postId_not_contains: String
  postId_starts_with: String
  postId_not_starts_with: String
  postId_ends_with: String
  postId_not_ends_with: String
  postId_i: String
  postId_not_i: String
  postId_contains_i: String
  postId_not_contains_i: String
  postId_starts_with_i: String
  postId_not_starts_with_i: String
  postId_ends_with_i: String
  postId_not_ends_with_i: String
  postId_in: [String]
  postId_not_in: [String]
  oneTimeStartDate: Int
  oneTimeStartDate_not: Int
  oneTimeStartDate_lt: Int
  oneTimeStartDate_lte: Int
  oneTimeStartDate_gt: Int
  oneTimeStartDate_gte: Int
  oneTimeStartDate_in: [Int]
  oneTimeStartDate_not_in: [Int]
  oneTimeEndDate: Int
  oneTimeEndDate_not: Int
  oneTimeEndDate_lt: Int
  oneTimeEndDate_lte: Int
  oneTimeEndDate_gt: Int
  oneTimeEndDate_gte: Int
  oneTimeEndDate_in: [Int]
  oneTimeEndDate_not_in: [Int]
  action: subscriptionHistoryActionType
  action_not: subscriptionHistoryActionType
  action_in: [subscriptionHistoryActionType]
  action_not_in: [subscriptionHistoryActionType]
}

input subscriptionHistoryWhereUniqueInput {
  id: ID
}

enum SortSubscriptionHistoriesBy {
  id_ASC
  id_DESC
  subscriptionCreatedAt_ASC
  subscriptionCreatedAt_DESC
  subscriptionUpdatedAt_ASC
  subscriptionUpdatedAt_DESC
  status_ASC
  status_DESC
  amount_ASC
  amount_DESC
  currency_ASC
  currency_DESC
  desc_ASC
  desc_DESC
  email_ASC
  email_DESC
  orderNumber_ASC
  orderNumber_DESC
  frequency_ASC
  frequency_DESC
  tokenValue_ASC
  tokenValue_DESC
  tokenLife_ASC
  tokenLife_DESC
  tokenTerm_ASC
  tokenTerm_DESC
  periodLastSuccessDate_ASC
  periodLastSuccessDate_DESC
  periodNextPayDate_ASC
  periodNextPayDate_DESC
  periodFirstDate_ASC
  periodFirstDate_DESC
  changePlanDatetime_ASC
  changePlanDatetime_DESC
  note_ASC
  note_DESC
  promoteId_ASC
  promoteId_DESC
  postId_ASC
  postId_DESC
  oneTimeStartDate_ASC
  oneTimeStartDate_DESC
  oneTimeEndDate_ASC
  oneTimeEndDate_DESC
  action_ASC
  action_DESC
}

input subscriptionHistoryOrderByInput {
  id: OrderDirection
  subscriptionCreatedAt: OrderDirection
  subscriptionUpdatedAt: OrderDirection
  status: OrderDirection
  amount: OrderDirection
  currency: OrderDirection
  desc: OrderDirection
  email: OrderDirection
  orderNumber: OrderDirection
  frequency: OrderDirection
  tokenValue: OrderDirection
  tokenLife: OrderDirection
  tokenTerm: OrderDirection
  periodLastSuccessDate: OrderDirection
  periodNextPayDate: OrderDirection
  periodFirstDate: OrderDirection
  changePlanDatetime: OrderDirection
  note: OrderDirection
  promoteId: OrderDirection
  postId: OrderDirection
  oneTimeStartDate: OrderDirection
  oneTimeEndDate: OrderDirection
  action: OrderDirection
}

input subscriptionHistoryUpdateInput {
  subscription: subscriptionRelateToOneInput
  subscriptionCreatedAt: String
  subscriptionUpdatedAt: String
  member: memberRelateToOneInput
  status: subscriptionHistoryStatusType
  amount: Int
  currency: subscriptionHistoryCurrencyType
  desc: String
  email: String
  orderNumber: String
  frequency: subscriptionHistoryFrequencyType
  tokenValue: String
  tokenLife: String
  tokenTerm: String
  periodLastSuccessDate: String
  periodNextPayDate: String
  periodFirstDate: String
  changePlanDatetime: String
  note: String
  promoteId: Int
  postId: String
  oneTimeStartDate: String
  oneTimeEndDate: String
  action: subscriptionHistoryActionType
}

input SubscriptionHistoriesUpdateInput {
  id: ID!
  data: subscriptionHistoryUpdateInput
}

input subscriptionHistoryCreateInput {
  subscription: subscriptionRelateToOneInput
  subscriptionCreatedAt: String
  subscriptionUpdatedAt: String
  member: memberRelateToOneInput
  status: subscriptionHistoryStatusType
  amount: Int
  currency: subscriptionHistoryCurrencyType
  desc: String
  email: String
  orderNumber: String
  frequency: subscriptionHistoryFrequencyType
  tokenValue: String
  tokenLife: String
  tokenTerm: String
  periodLastSuccessDate: String
  periodNextPayDate: String
  periodFirstDate: String
  changePlanDatetime: String
  note: String
  promoteId: Int
  postId: String
  oneTimeStartDate: String
  oneTimeEndDate: String
  action: subscriptionHistoryActionType
}

input SubscriptionHistoriesCreateInput {
  data: subscriptionHistoryCreateInput
}

"""
For Custom Mutation
"""
enum createSubscriptionStatusType {
  paying
}

enum updateSubscriptionStatusType {
  cancelled
}

enum updateMemberStateType {
  inactive
}

input memberUpdateInput {
  email: String
  state: updateMemberStateType
  tos: Boolean
  firstName: String
  lastName: String
  name: String
  gender: memberGenderType
  phone: String
  birthday: String
  address: String
  nickname: String
  profileImage: String
  city: String
  country: String
  district: String
}

input MembersUpdateInput {
  id: ID!
  data: memberUpdateInput
}

input memberCreateInput {
  tos: Boolean
  firstName: String
  lastName: String
  email: String!
  name: String
  gender: memberGenderType
  phone: String
  birthday: String
  address: String
  nickname: String
  profileImage: String
  city: String
  country: String
  district: String
}

input MembersCreateInput {
  data: memberCreateInput
}

input subscriptionRecurringCreateInput {
  paymentMethod: subscriptionPaymentMethodType!
  applepayPayment: applepayPaymentRelateToManyInput
  status: createSubscriptionStatusType!
  email: String!
  """
  frequency has to match a code of one of the merchandize. It will be use to fetch amount and currency.
  """
  frequency: subscriptionFrequencyType!
  note: String
  promoteId: Int
}

input subscriptionRecurringCreateInfo {
  returnToPath: String!
}

input subscriptionOneTimeCreateInput {
  paymentMethod: subscriptionPaymentMethodType!
  applepayPayment: applepayPaymentRelateToManyInput
  status: createSubscriptionStatusType!
  email: String!
  note: String
  promoteId: Int
  postId: String!
}

input subscriptionOneTimeCreateInfo {
  postSlug: String!
  postTitle: String!
  returnToPath: String!
}

input subscriptionUpdateInput {
  isCanceled: Boolean
  """
  nextFrequency has to match a code of one of the merchandize. It will be use to fetch amount and currency.
  """
  nextFrequency: updateSubscriptionNextFrequencyType
  note: String
}

type subscriptionInfo {
  id: ID!
  status: subscriptionStatusType
  amount: Int
  currency: subscriptionCurrencyType
  desc: String
  email: String
  orderNumber: String
  isActive: Boolean
  isCanceled: Boolean
  frequency: subscriptionFrequencyType
  nextFrequency: subscriptionNextFrequencyType
  periodFailureTimes: Int
  periodLastSuccessDatetime: String
  periodNextPayDatetime: String
  periodCreateDatetime: String
  periodFirstDatetime: String
  periodEndDatetime: String
  changePlanDatetime: String
  note: String
  promoteId: Int
  postId: String
  oneTimeStartDatetime: String
  oneTimeEndDatetime: String
  createdAt: String
  updatedAt: String
}

type subscriptionCreation {
  subscription: subscriptionInfo!
  newebpayPayload: String
}
`, BuiltIn: false},
	{Name: "mutation.graphql", Input: `type Mutation {
  """
  It creates a member with memberCreateInput and set **firebaseId** as it is in the **token**.

  Nested query is not allowed in the mutation.
  """
  createmember(data: memberCreateInput!): memberInfo
  """
  It updates the member with memberUpdateInput if the member has the same **firebaseId** in the **token**.

  If the state is updated to **inactive**, it will also delete the firebase user with the same Firebae ID. If the member is updated sucessfully, but the firebase user is not deleted, an error will be returned.

  Nested query is not allowed in the mutation.
  """
  updatemember(id: ID!, data: memberUpdateInput!): memberInfo
  """
  It creates a subscription with subscriptionOneTimeCreateInput, set a new order number, connect the subscription to the member with the firebaseID, and the amount/currency coresponding to the frequency in **merchandise**.

  Nested query is not allowed in the mutation.
  """
  createSubscriptionRecurring(
    data: subscriptionRecurringCreateInput!
    info: subscriptionRecurringCreateInfo!
  ): subscriptionCreation
  """
  It creates a subscription with subscriptionOneTimeCreateInput, set a new order number, set frequency to **one_time**, connect the subscription to the member with the firebaseID, and the amount/currency coresponding to the frequency in **merchandise**.

  Nested query is not allowed in the mutation.
  """
  createsSubscriptionOneTime(
    data: subscriptionOneTimeCreateInput!
    info: subscriptionOneTimeCreateInfo!
  ): subscriptionCreation
  """
  It checks if the existing subscription is connect to the member with the same firebaseID, and them it updates the subscription with subscriptionUpdateInput and the amount/currency coresponding to the nextFrequency in **merchandise**.

  It pracatically let users update the next frequency and cancel the subscription.

  Nested query is not allowed in the mutation.
  """
  updatesubscription(id: ID!, data: subscriptionUpdateInput!): subscriptionInfo
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_createSubscriptionRecurring_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["data"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
		arg0, err = ec.unmarshalNsubscriptionRecurringCreateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["data"] = arg0
	var arg1 model.SubscriptionRecurringCreateInfo
	if tmp, ok := rawArgs["info"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("info"))
		arg1, err = ec.unmarshalNsubscriptionRecurringCreateInfo2githubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionRecurringCreateInfo(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["info"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createmember_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["data"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
		arg0, err = ec.unmarshalNmemberCreateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["data"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createsSubscriptionOneTime_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["data"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
		arg0, err = ec.unmarshalNsubscriptionOneTimeCreateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["data"] = arg0
	var arg1 model.SubscriptionOneTimeCreateInfo
	if tmp, ok := rawArgs["info"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("info"))
		arg1, err = ec.unmarshalNsubscriptionOneTimeCreateInfo2githubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionOneTimeCreateInfo(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["info"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatemember_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["data"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
		arg1, err = ec.unmarshalNmemberUpdateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["data"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatesubscription_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["data"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
		arg1, err = ec.unmarshalNsubscriptionUpdateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["data"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field_member_subscriptionCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SubscriptionWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNsubscriptionWhereInput2githubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_member_subscription_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SubscriptionWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNsubscriptionWhereInput2githubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["search"] = arg1
	var arg2 []*model.SubscriptionOrderByInput
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg2, err = ec.unmarshalNsubscriptionOrderByInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionOrderByInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 int
	if tmp, ok := rawArgs["skip"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
		arg4, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["skip"] = arg4
	return args, nil
}

func (ec *executionContext) field_subscription_androidpayPaymentCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.AndroidpayPaymentWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNandroidpayPaymentWhereInput2githubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_subscription_androidpayPayment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.AndroidpayPaymentWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNandroidpayPaymentWhereInput2githubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["search"] = arg1
	var arg2 []*model.AndroidpayPaymentOrderByInput
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg2, err = ec.unmarshalNandroidpayPaymentOrderByInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentOrderByInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 int
	if tmp, ok := rawArgs["skip"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
		arg4, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["skip"] = arg4
	return args, nil
}

func (ec *executionContext) field_subscription_applepayPaymentCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ApplepayPaymentWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNapplepayPaymentWhereInput2githubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_subscription_applepayPayment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ApplepayPaymentWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNapplepayPaymentWhereInput2githubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["search"] = arg1
	var arg2 []*model.ApplepayPaymentOrderByInput
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg2, err = ec.unmarshalNapplepayPaymentOrderByInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentOrderByInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 int
	if tmp, ok := rawArgs["skip"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
		arg4, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["skip"] = arg4
	return args, nil
}

func (ec *executionContext) field_subscription_newebpayPaymentCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewebpayPaymentWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNnewebpayPaymentWhereInput2githubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_subscription_newebpayPayment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewebpayPaymentWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNnewebpayPaymentWhereInput2githubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["search"] = arg1
	var arg2 []*model.NewebpayPaymentOrderByInput
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg2, err = ec.unmarshalNnewebpayPaymentOrderByInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentOrderByInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 int
	if tmp, ok := rawArgs["skip"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
		arg4, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["skip"] = arg4
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Mutation_createmember(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createmember_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Createmember(rctx, args["data"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MemberInfo)
	fc.Result = res
	return ec.marshalOmemberInfo2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatemember(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatemember_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Updatemember(rctx, args["id"].(string), args["data"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MemberInfo)
	fc.Result = res
	return ec.marshalOmemberInfo2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createSubscriptionRecurring(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createSubscriptionRecurring_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateSubscriptionRecurring(rctx, args["data"].(map[string]interface{}), args["info"].(model.SubscriptionRecurringCreateInfo))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SubscriptionCreation)
	fc.Result = res
	return ec.marshalOsubscriptionCreation2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionCreation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createsSubscriptionOneTime(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createsSubscriptionOneTime_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatesSubscriptionOneTime(rctx, args["data"].(map[string]interface{}), args["info"].(model.SubscriptionOneTimeCreateInfo))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SubscriptionCreation)
	fc.Result = res
	return ec.marshalOsubscriptionCreation2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionCreation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatesubscription(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatesubscription_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Updatesubscription(rctx, args["id"].(string), args["data"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SubscriptionInfo)
	fc.Result = res
	return ec.marshalOsubscriptionInfo2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _androidpayPayment_id(ctx context.Context, field graphql.CollectedField, obj *model.AndroidpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "androidpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _androidpayPayment_subscription(ctx context.Context, field graphql.CollectedField, obj *model.AndroidpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "androidpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subscription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Subscription)
	fc.Result = res
	return ec.marshalOsubscription2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscription(ctx, field.Selections, res)
}

func (ec *executionContext) _androidpayPayment_invoice(ctx context.Context, field graphql.CollectedField, obj *model.AndroidpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "androidpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Invoice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Invoice)
	fc.Result = res
	return ec.marshalOinvoice2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoice(ctx, field.Selections, res)
}

func (ec *executionContext) _androidpayPayment_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.AndroidpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "androidpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _androidpayPayment_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.AndroidpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "androidpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _applepayPayment_id(ctx context.Context, field graphql.CollectedField, obj *model.ApplepayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "applepayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _applepayPayment_subscription(ctx context.Context, field graphql.CollectedField, obj *model.ApplepayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "applepayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subscription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Subscription)
	fc.Result = res
	return ec.marshalOsubscription2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscription(ctx, field.Selections, res)
}

func (ec *executionContext) _applepayPayment_invoice(ctx context.Context, field graphql.CollectedField, obj *model.ApplepayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "applepayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Invoice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Invoice)
	fc.Result = res
	return ec.marshalOinvoice2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoice(ctx, field.Selections, res)
}

func (ec *executionContext) _applepayPayment_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.ApplepayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "applepayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _applepayPayment_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.ApplepayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "applepayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _invoice_id(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "invoice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _invoice_newebpayPayment(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "invoice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewebpayPayment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewebpayPayment)
	fc.Result = res
	return ec.marshalOnewebpayPayment2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPayment(ctx, field.Selections, res)
}

func (ec *executionContext) _invoice_applepayPayment(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "invoice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplepayPayment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ApplepayPayment)
	fc.Result = res
	return ec.marshalOapplepayPayment2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPayment(ctx, field.Selections, res)
}

func (ec *executionContext) _invoice_androidpayPayment(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "invoice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AndroidpayPayment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AndroidpayPayment)
	fc.Result = res
	return ec.marshalOandroidpayPayment2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPayment(ctx, field.Selections, res)
}

func (ec *executionContext) _invoice_amount(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "invoice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _invoice_email(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "invoice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _invoice_desc(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "invoice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Desc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _invoice_invoiceNo(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "invoice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvoiceNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _invoice_category(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "invoice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.InvoiceCategoryType)
	fc.Result = res
	return ec.marshalOinvoiceCategoryType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceCategoryType(ctx, field.Selections, res)
}

func (ec *executionContext) _invoice_loveCode(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "invoice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoveCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _invoice_carrierType(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "invoice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarrierType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _invoice_carrierNum(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "invoice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarrierNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _invoice_buyerName(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "invoice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuyerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _invoice_buyerUBN(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "invoice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuyerUbn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _invoice_status(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "invoice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.InvoiceStatusType)
	fc.Result = res
	return ec.marshalOinvoiceStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceStatusType(ctx, field.Selections, res)
}

func (ec *executionContext) _invoice_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "invoice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _invoice_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "invoice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _marketingMembership_id(ctx context.Context, field graphql.CollectedField, obj *model.MarketingMembership) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "marketingMembership",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _marketingMembership_member(ctx context.Context, field graphql.CollectedField, obj *model.MarketingMembership) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "marketingMembership",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Member, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Member)
	fc.Result = res
	return ec.marshalOmember2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) _marketingMembership_status(ctx context.Context, field graphql.CollectedField, obj *model.MarketingMembership) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "marketingMembership",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MarketingMembershipStatusType)
	fc.Result = res
	return ec.marshalOmarketingMembershipStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipStatusType(ctx, field.Selections, res)
}

func (ec *executionContext) _marketingMembership_startDate(ctx context.Context, field graphql.CollectedField, obj *model.MarketingMembership) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "marketingMembership",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _marketingMembership_endDate(ctx context.Context, field graphql.CollectedField, obj *model.MarketingMembership) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "marketingMembership",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _marketingMembership_requesterEmail(ctx context.Context, field graphql.CollectedField, obj *model.MarketingMembership) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "marketingMembership",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequesterEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _marketingMembership_approvedBy(ctx context.Context, field graphql.CollectedField, obj *model.MarketingMembership) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "marketingMembership",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApprovedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _marketingMembership_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.MarketingMembership) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "marketingMembership",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _marketingMembership_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.MarketingMembership) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "marketingMembership",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _member_id(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "member",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _member_firebaseId(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "member",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirebaseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _member_email(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "member",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _member_marketingMembership(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "member",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarketingMembership, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MarketingMembership)
	fc.Result = res
	return ec.marshalOmarketingMembership2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembership(ctx, field.Selections, res)
}

func (ec *executionContext) _member_type(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "member",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MemberTypeType)
	fc.Result = res
	return ec.marshalOmemberTypeType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberTypeType(ctx, field.Selections, res)
}

func (ec *executionContext) _member_state(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "member",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MemberStateType)
	fc.Result = res
	return ec.marshalOmemberStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberStateType(ctx, field.Selections, res)
}

func (ec *executionContext) _member_tos(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "member",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _member_dateJoined(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "member",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateJoined, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _member_firstName(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "member",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _member_lastName(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "member",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _member_name(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "member",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _member_gender(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "member",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MemberGenderType)
	fc.Result = res
	return ec.marshalOmemberGenderType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberGenderType(ctx, field.Selections, res)
}

func (ec *executionContext) _member_phone(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "member",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _member_birthday(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "member",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _member_address(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "member",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _member_nickname(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "member",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nickname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _member_profileImage(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "member",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfileImage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _member_city(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "member",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _member_country(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "member",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _member_district(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "member",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.District, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _member_subscription(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "member",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_member_subscription_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subscription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Subscription)
	fc.Result = res
	return ec.marshalOsubscription2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _member_subscriptionCount(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "member",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_member_subscriptionCount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _member_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "member",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _member_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "member",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _memberInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.MemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "memberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _memberInfo_firebaseId(ctx context.Context, field graphql.CollectedField, obj *model.MemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "memberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirebaseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _memberInfo_email(ctx context.Context, field graphql.CollectedField, obj *model.MemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "memberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _memberInfo_type(ctx context.Context, field graphql.CollectedField, obj *model.MemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "memberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MemberTypeType)
	fc.Result = res
	return ec.marshalOmemberTypeType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberTypeType(ctx, field.Selections, res)
}

func (ec *executionContext) _memberInfo_state(ctx context.Context, field graphql.CollectedField, obj *model.MemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "memberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MemberStateType)
	fc.Result = res
	return ec.marshalOmemberStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberStateType(ctx, field.Selections, res)
}

func (ec *executionContext) _memberInfo_tos(ctx context.Context, field graphql.CollectedField, obj *model.MemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "memberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _memberInfo_dateJoined(ctx context.Context, field graphql.CollectedField, obj *model.MemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "memberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateJoined, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _memberInfo_firstName(ctx context.Context, field graphql.CollectedField, obj *model.MemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "memberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _memberInfo_lastName(ctx context.Context, field graphql.CollectedField, obj *model.MemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "memberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _memberInfo_name(ctx context.Context, field graphql.CollectedField, obj *model.MemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "memberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _memberInfo_gender(ctx context.Context, field graphql.CollectedField, obj *model.MemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "memberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MemberGenderType)
	fc.Result = res
	return ec.marshalOmemberGenderType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberGenderType(ctx, field.Selections, res)
}

func (ec *executionContext) _memberInfo_phone(ctx context.Context, field graphql.CollectedField, obj *model.MemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "memberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _memberInfo_birthday(ctx context.Context, field graphql.CollectedField, obj *model.MemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "memberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _memberInfo_address(ctx context.Context, field graphql.CollectedField, obj *model.MemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "memberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _memberInfo_nickname(ctx context.Context, field graphql.CollectedField, obj *model.MemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "memberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nickname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _memberInfo_profileImage(ctx context.Context, field graphql.CollectedField, obj *model.MemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "memberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfileImage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _memberInfo_city(ctx context.Context, field graphql.CollectedField, obj *model.MemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "memberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _memberInfo_country(ctx context.Context, field graphql.CollectedField, obj *model.MemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "memberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _memberInfo_district(ctx context.Context, field graphql.CollectedField, obj *model.MemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "memberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.District, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _memberInfo_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.MemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "memberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _memberInfo_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.MemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "memberInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _merchandise_id(ctx context.Context, field graphql.CollectedField, obj *model.Merchandise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "merchandise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _merchandise_name(ctx context.Context, field graphql.CollectedField, obj *model.Merchandise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "merchandise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _merchandise_code(ctx context.Context, field graphql.CollectedField, obj *model.Merchandise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "merchandise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _merchandise_price(ctx context.Context, field graphql.CollectedField, obj *model.Merchandise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "merchandise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _merchandise_currency(ctx context.Context, field graphql.CollectedField, obj *model.Merchandise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "merchandise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MerchandiseCurrencyType)
	fc.Result = res
	return ec.marshalOmerchandiseCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseCurrencyType(ctx, field.Selections, res)
}

func (ec *executionContext) _merchandise_state(ctx context.Context, field graphql.CollectedField, obj *model.Merchandise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "merchandise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MerchandiseStateType)
	fc.Result = res
	return ec.marshalOmerchandiseStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseStateType(ctx, field.Selections, res)
}

func (ec *executionContext) _merchandise_desc(ctx context.Context, field graphql.CollectedField, obj *model.Merchandise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "merchandise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Desc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _merchandise_comment(ctx context.Context, field graphql.CollectedField, obj *model.Merchandise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "merchandise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _merchandise_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Merchandise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "merchandise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _merchandise_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Merchandise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "merchandise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPayment_id(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPayment_subscription(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subscription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Subscription)
	fc.Result = res
	return ec.marshalOsubscription2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscription(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPayment_invoice(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Invoice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Invoice)
	fc.Result = res
	return ec.marshalOinvoice2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoice(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPayment_amount(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPayment_status(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPayment_paymentMethod(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPayment_paymentTime(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPayment_tradeNumber(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TradeNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPayment_message(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPayment_merchantId(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MerchantID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPayment_orderNumber(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPayment_tokenUseStatus(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TokenUseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPayment_respondCode(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RespondCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPayment_ECI(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Eci, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPayment_authCode(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPayment_authBank(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthBank, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPayment_cardInfoLastFour(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CardInfoLastFour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPayment_cardInfoFirstSix(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CardInfoFirstSix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPayment_cardInfoExp(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CardInfoExp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPayment_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPayment_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPaymentInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPaymentInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPaymentInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPaymentInfo_subscription(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPaymentInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPaymentInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subscription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Subscription)
	fc.Result = res
	return ec.marshalOsubscription2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscription(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPaymentInfo_tokenTerm(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPaymentInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPaymentInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TokenTerm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPaymentInfo_tokenValue(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPaymentInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPaymentInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TokenValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPaymentInfo_tokenLife(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPaymentInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPaymentInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TokenLife, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPaymentInfo_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPaymentInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPaymentInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _newebpayPaymentInfo_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.NewebpayPaymentInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "newebpayPaymentInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _promotion_id(ctx context.Context, field graphql.CollectedField, obj *model.Promotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _promotion_code(ctx context.Context, field graphql.CollectedField, obj *model.Promotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _promotion_plan(ctx context.Context, field graphql.CollectedField, obj *model.Promotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Plan, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PromotionPlanType)
	fc.Result = res
	return ec.marshalOpromotionPlanType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionPlanType(ctx, field.Selections, res)
}

func (ec *executionContext) _promotion_state(ctx context.Context, field graphql.CollectedField, obj *model.Promotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PromotionStateType)
	fc.Result = res
	return ec.marshalOpromotionStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionStateType(ctx, field.Selections, res)
}

func (ec *executionContext) _promotion_startAt(ctx context.Context, field graphql.CollectedField, obj *model.Promotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _promotion_endAt(ctx context.Context, field graphql.CollectedField, obj *model.Promotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _promotion_discount(ctx context.Context, field graphql.CollectedField, obj *model.Promotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Discount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _promotion_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Promotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _promotion_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Promotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_id(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_member(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Member, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Member)
	fc.Result = res
	return ec.marshalOmember2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_paymentMethod(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SubscriptionPaymentMethodType)
	fc.Result = res
	return ec.marshalOsubscriptionPaymentMethodType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionPaymentMethodType(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_newebpayPayment(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_subscription_newebpayPayment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewebpayPayment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.NewebpayPayment)
	fc.Result = res
	return ec.marshalOnewebpayPayment2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_newebpayPaymentCount(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_subscription_newebpayPaymentCount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewebpayPaymentCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_applepayPayment(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_subscription_applepayPayment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplepayPayment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ApplepayPayment)
	fc.Result = res
	return ec.marshalOapplepayPayment2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_applepayPaymentCount(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_subscription_applepayPaymentCount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplepayPaymentCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_androidpayPayment(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_subscription_androidpayPayment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AndroidpayPayment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AndroidpayPayment)
	fc.Result = res
	return ec.marshalOandroidpayPayment2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_androidpayPaymentCount(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_subscription_androidpayPaymentCount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AndroidpayPaymentCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_status(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SubscriptionStatusType)
	fc.Result = res
	return ec.marshalOsubscriptionStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionStatusType(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_amount(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_currency(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SubscriptionCurrencyType)
	fc.Result = res
	return ec.marshalOsubscriptionCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionCurrencyType(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_desc(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Desc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_comment(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_email(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_orderNumber(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_isActive(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_isCanceled(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCanceled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_frequency(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Frequency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SubscriptionFrequencyType)
	fc.Result = res
	return ec.marshalOsubscriptionFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionFrequencyType(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_nextFrequency(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextFrequency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SubscriptionNextFrequencyType)
	fc.Result = res
	return ec.marshalOsubscriptionNextFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionNextFrequencyType(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_periodFailureTimes(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeriodFailureTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_periodLastSuccessDatetime(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeriodLastSuccessDatetime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_periodNextPayDatetime(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeriodNextPayDatetime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_periodCreateDatetime(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeriodCreateDatetime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_periodFirstDatetime(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeriodFirstDatetime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_periodEndDatetime(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeriodEndDatetime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_changePlanDatetime(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangePlanDatetime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_note(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_promoteId(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PromoteID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_postId(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_oneTimeStartDatetime(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OneTimeStartDatetime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_oneTimeEndDatetime(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OneTimeEndDatetime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_newebpayPaymentInfo(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewebpayPaymentInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewebpayPaymentInfo)
	fc.Result = res
	return ec.marshalOnewebpayPaymentInfo2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_loveCode(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoveCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_carrierType(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarrierType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_carrierNum(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarrierNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_buyerName(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuyerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_buyerUBN(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuyerUbn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Subscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionCreation_subscription(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionCreation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionCreation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subscription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SubscriptionInfo)
	fc.Result = res
	return ec.marshalNsubscriptionInfo2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionCreation_newebpayPayload(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionCreation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionCreation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewebpayPayload, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionHistory_id(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionHistory_subscription(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subscription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Subscription)
	fc.Result = res
	return ec.marshalOsubscription2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscription(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionHistory_subscriptionCreatedAt(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionCreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionHistory_subscriptionUpdatedAt(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionUpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionHistory_member(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Member, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Member)
	fc.Result = res
	return ec.marshalOmember2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionHistory_status(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SubscriptionHistoryStatusType)
	fc.Result = res
	return ec.marshalOsubscriptionHistoryStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryStatusType(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionHistory_amount(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionHistory_currency(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SubscriptionHistoryCurrencyType)
	fc.Result = res
	return ec.marshalOsubscriptionHistoryCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryCurrencyType(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionHistory_desc(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Desc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionHistory_email(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionHistory_orderNumber(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionHistory_frequency(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Frequency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SubscriptionHistoryFrequencyType)
	fc.Result = res
	return ec.marshalOsubscriptionHistoryFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryFrequencyType(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionHistory_tokenValue(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TokenValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionHistory_tokenLife(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TokenLife, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionHistory_tokenTerm(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TokenTerm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionHistory_periodLastSuccessDate(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeriodLastSuccessDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionHistory_periodNextPayDate(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeriodNextPayDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionHistory_periodFirstDate(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeriodFirstDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionHistory_changePlanDatetime(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangePlanDatetime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionHistory_note(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionHistory_promoteId(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PromoteID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionHistory_postId(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionHistory_oneTimeStartDate(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OneTimeStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionHistory_oneTimeEndDate(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OneTimeEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionHistory_action(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Action, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SubscriptionHistoryActionType)
	fc.Result = res
	return ec.marshalOsubscriptionHistoryActionType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryActionType(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionInfo_status(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SubscriptionStatusType)
	fc.Result = res
	return ec.marshalOsubscriptionStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionStatusType(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionInfo_amount(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionInfo_currency(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SubscriptionCurrencyType)
	fc.Result = res
	return ec.marshalOsubscriptionCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionCurrencyType(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionInfo_desc(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Desc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionInfo_email(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionInfo_orderNumber(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionInfo_isActive(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionInfo_isCanceled(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCanceled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionInfo_frequency(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Frequency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SubscriptionFrequencyType)
	fc.Result = res
	return ec.marshalOsubscriptionFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionFrequencyType(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionInfo_nextFrequency(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextFrequency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SubscriptionNextFrequencyType)
	fc.Result = res
	return ec.marshalOsubscriptionNextFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionNextFrequencyType(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionInfo_periodFailureTimes(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeriodFailureTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionInfo_periodLastSuccessDatetime(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeriodLastSuccessDatetime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionInfo_periodNextPayDatetime(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeriodNextPayDatetime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionInfo_periodCreateDatetime(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeriodCreateDatetime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionInfo_periodFirstDatetime(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeriodFirstDatetime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionInfo_periodEndDatetime(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeriodEndDatetime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionInfo_changePlanDatetime(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangePlanDatetime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionInfo_note(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionInfo_promoteId(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PromoteID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionInfo_postId(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionInfo_oneTimeStartDatetime(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OneTimeStartDatetime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionInfo_oneTimeEndDatetime(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OneTimeEndDatetime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionInfo_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionInfo_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAndroidpayPaymentsCreateInput(ctx context.Context, obj interface{}) (model.AndroidpayPaymentsCreateInput, error) {
	var it model.AndroidpayPaymentsCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOandroidpayPaymentCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAndroidpayPaymentsUpdateInput(ctx context.Context, obj interface{}) (model.AndroidpayPaymentsUpdateInput, error) {
	var it model.AndroidpayPaymentsUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOandroidpayPaymentUpdateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentUpdateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputApplepayPaymentsCreateInput(ctx context.Context, obj interface{}) (model.ApplepayPaymentsCreateInput, error) {
	var it model.ApplepayPaymentsCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOapplepayPaymentCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputApplepayPaymentsUpdateInput(ctx context.Context, obj interface{}) (model.ApplepayPaymentsUpdateInput, error) {
	var it model.ApplepayPaymentsUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOapplepayPaymentUpdateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentUpdateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInvoicesCreateInput(ctx context.Context, obj interface{}) (model.InvoicesCreateInput, error) {
	var it model.InvoicesCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOinvoiceCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInvoicesUpdateInput(ctx context.Context, obj interface{}) (model.InvoicesUpdateInput, error) {
	var it model.InvoicesUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOinvoiceUpdateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceUpdateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMarketingMembershipsCreateInput(ctx context.Context, obj interface{}) (model.MarketingMembershipsCreateInput, error) {
	var it model.MarketingMembershipsCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOmarketingMembershipCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMarketingMembershipsUpdateInput(ctx context.Context, obj interface{}) (model.MarketingMembershipsUpdateInput, error) {
	var it model.MarketingMembershipsUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOmarketingMembershipUpdateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipUpdateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMembersCreateInput(ctx context.Context, obj interface{}) (model.MembersCreateInput, error) {
	var it model.MembersCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOmemberCreateInput2map(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMembersPrivateCreateInput(ctx context.Context, obj interface{}) (model.MembersPrivateCreateInput, error) {
	var it model.MembersPrivateCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOmemberCreateInput2map(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMembersPrivateUpdateInput(ctx context.Context, obj interface{}) (model.MembersPrivateUpdateInput, error) {
	var it model.MembersPrivateUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOmemberUpdateInput2map(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMembersUpdateInput(ctx context.Context, obj interface{}) (model.MembersUpdateInput, error) {
	var it model.MembersUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOmemberUpdateInput2map(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchandisesCreateInput(ctx context.Context, obj interface{}) (model.MerchandisesCreateInput, error) {
	var it model.MerchandisesCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOmerchandiseCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchandisesUpdateInput(ctx context.Context, obj interface{}) (model.MerchandisesUpdateInput, error) {
	var it model.MerchandisesUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOmerchandiseUpdateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseUpdateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewebpayPaymentInfosCreateInput(ctx context.Context, obj interface{}) (model.NewebpayPaymentInfosCreateInput, error) {
	var it model.NewebpayPaymentInfosCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOnewebpayPaymentInfoCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentInfoCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewebpayPaymentInfosUpdateInput(ctx context.Context, obj interface{}) (model.NewebpayPaymentInfosUpdateInput, error) {
	var it model.NewebpayPaymentInfosUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOnewebpayPaymentInfoUpdateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentInfoUpdateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewebpayPaymentsCreateInput(ctx context.Context, obj interface{}) (model.NewebpayPaymentsCreateInput, error) {
	var it model.NewebpayPaymentsCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOnewebpayPaymentCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewebpayPaymentsUpdateInput(ctx context.Context, obj interface{}) (model.NewebpayPaymentsUpdateInput, error) {
	var it model.NewebpayPaymentsUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOnewebpayPaymentUpdateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentUpdateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPromotionsCreateInput(ctx context.Context, obj interface{}) (model.PromotionsCreateInput, error) {
	var it model.PromotionsCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOpromotionCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPromotionsUpdateInput(ctx context.Context, obj interface{}) (model.PromotionsUpdateInput, error) {
	var it model.PromotionsUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOpromotionUpdateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionUpdateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSubscriptionHistoriesCreateInput(ctx context.Context, obj interface{}) (model.SubscriptionHistoriesCreateInput, error) {
	var it model.SubscriptionHistoriesCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOsubscriptionHistoryCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSubscriptionHistoriesUpdateInput(ctx context.Context, obj interface{}) (model.SubscriptionHistoriesUpdateInput, error) {
	var it model.SubscriptionHistoriesUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOsubscriptionHistoryUpdateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryUpdateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSubscriptionsCreateInput(ctx context.Context, obj interface{}) (model.SubscriptionsCreateInput, error) {
	var it model.SubscriptionsCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOsubscriptionCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSubscriptionsUpdateInput(ctx context.Context, obj interface{}) (model.SubscriptionsUpdateInput, error) {
	var it model.SubscriptionsUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOsubscriptionUpdateInput2map(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputandroidpayPaymentCreateInput(ctx context.Context, obj interface{}) (model.AndroidpayPaymentCreateInput, error) {
	var it model.AndroidpayPaymentCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "subscription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription"))
			it.Subscription, err = ec.unmarshalOsubscriptionRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoice":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoice"))
			it.Invoice, err = ec.unmarshalOinvoiceRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputandroidpayPaymentOrderByInput(ctx context.Context, obj interface{}) (model.AndroidpayPaymentOrderByInput, error) {
	var it model.AndroidpayPaymentOrderByInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputandroidpayPaymentRelateToManyInput(ctx context.Context, obj interface{}) (model.AndroidpayPaymentRelateToManyInput, error) {
	var it model.AndroidpayPaymentRelateToManyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "create":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create"))
			it.Create, err = ec.unmarshalOandroidpayPaymentCreateInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "connect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connect"))
			it.Connect, err = ec.unmarshalOandroidpayPaymentWhereUniqueInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentWhereUniqueInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "disconnect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disconnect"))
			it.Disconnect, err = ec.unmarshalOandroidpayPaymentWhereUniqueInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentWhereUniqueInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "disconnectAll":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disconnectAll"))
			it.DisconnectAll, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputandroidpayPaymentRelateToOneInput(ctx context.Context, obj interface{}) (model.AndroidpayPaymentRelateToOneInput, error) {
	var it model.AndroidpayPaymentRelateToOneInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "create":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create"))
			it.Create, err = ec.unmarshalOandroidpayPaymentCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "connect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connect"))
			it.Connect, err = ec.unmarshalOandroidpayPaymentWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentWhereUniqueInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "disconnect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disconnect"))
			it.Disconnect, err = ec.unmarshalOandroidpayPaymentWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentWhereUniqueInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "disconnectAll":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disconnectAll"))
			it.DisconnectAll, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputandroidpayPaymentUpdateInput(ctx context.Context, obj interface{}) (model.AndroidpayPaymentUpdateInput, error) {
	var it model.AndroidpayPaymentUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "subscription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription"))
			it.Subscription, err = ec.unmarshalOsubscriptionRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoice":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoice"))
			it.Invoice, err = ec.unmarshalOinvoiceRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputandroidpayPaymentWhereInput(ctx context.Context, obj interface{}) (model.AndroidpayPaymentWhereInput, error) {
	var it model.AndroidpayPaymentWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOandroidpayPaymentWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOandroidpayPaymentWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not"))
			it.IDNot, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription"))
			it.Subscription, err = ec.unmarshalOsubscriptionWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscription_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription_is_null"))
			it.SubscriptionIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoice":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoice"))
			it.Invoice, err = ec.unmarshalOinvoiceWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoice_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoice_is_null"))
			it.InvoiceIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not"))
			it.CreatedAtNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not_in"))
			it.CreatedAtNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not"))
			it.UpdatedAtNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not_in"))
			it.UpdatedAtNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_is_null"))
			it.CreatedByIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_is_null"))
			it.UpdatedByIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputandroidpayPaymentWhereUniqueInput(ctx context.Context, obj interface{}) (model.AndroidpayPaymentWhereUniqueInput, error) {
	var it model.AndroidpayPaymentWhereUniqueInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapplepayPaymentCreateInput(ctx context.Context, obj interface{}) (model.ApplepayPaymentCreateInput, error) {
	var it model.ApplepayPaymentCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "subscription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription"))
			it.Subscription, err = ec.unmarshalOsubscriptionRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoice":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoice"))
			it.Invoice, err = ec.unmarshalOinvoiceRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapplepayPaymentOrderByInput(ctx context.Context, obj interface{}) (model.ApplepayPaymentOrderByInput, error) {
	var it model.ApplepayPaymentOrderByInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapplepayPaymentRelateToManyInput(ctx context.Context, obj interface{}) (model.ApplepayPaymentRelateToManyInput, error) {
	var it model.ApplepayPaymentRelateToManyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "create":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create"))
			it.Create, err = ec.unmarshalOapplepayPaymentCreateInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "connect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connect"))
			it.Connect, err = ec.unmarshalOapplepayPaymentWhereUniqueInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentWhereUniqueInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "disconnect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disconnect"))
			it.Disconnect, err = ec.unmarshalOapplepayPaymentWhereUniqueInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentWhereUniqueInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "disconnectAll":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disconnectAll"))
			it.DisconnectAll, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapplepayPaymentRelateToOneInput(ctx context.Context, obj interface{}) (model.ApplepayPaymentRelateToOneInput, error) {
	var it model.ApplepayPaymentRelateToOneInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "create":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create"))
			it.Create, err = ec.unmarshalOapplepayPaymentCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "connect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connect"))
			it.Connect, err = ec.unmarshalOapplepayPaymentWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentWhereUniqueInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "disconnect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disconnect"))
			it.Disconnect, err = ec.unmarshalOapplepayPaymentWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentWhereUniqueInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "disconnectAll":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disconnectAll"))
			it.DisconnectAll, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapplepayPaymentUpdateInput(ctx context.Context, obj interface{}) (model.ApplepayPaymentUpdateInput, error) {
	var it model.ApplepayPaymentUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "subscription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription"))
			it.Subscription, err = ec.unmarshalOsubscriptionRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoice":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoice"))
			it.Invoice, err = ec.unmarshalOinvoiceRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapplepayPaymentWhereInput(ctx context.Context, obj interface{}) (model.ApplepayPaymentWhereInput, error) {
	var it model.ApplepayPaymentWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOapplepayPaymentWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOapplepayPaymentWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not"))
			it.IDNot, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription"))
			it.Subscription, err = ec.unmarshalOsubscriptionWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscription_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription_is_null"))
			it.SubscriptionIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoice":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoice"))
			it.Invoice, err = ec.unmarshalOinvoiceWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoice_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoice_is_null"))
			it.InvoiceIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not"))
			it.CreatedAtNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not_in"))
			it.CreatedAtNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not"))
			it.UpdatedAtNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not_in"))
			it.UpdatedAtNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_is_null"))
			it.CreatedByIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_is_null"))
			it.UpdatedByIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapplepayPaymentWhereUniqueInput(ctx context.Context, obj interface{}) (model.ApplepayPaymentWhereUniqueInput, error) {
	var it model.ApplepayPaymentWhereUniqueInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputinvoiceCreateInput(ctx context.Context, obj interface{}) (model.InvoiceCreateInput, error) {
	var it model.InvoiceCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "newebpayPayment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newebpayPayment"))
			it.NewebpayPayment, err = ec.unmarshalOnewebpayPaymentRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "applepayPayment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applepayPayment"))
			it.ApplepayPayment, err = ec.unmarshalOapplepayPaymentRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "androidpayPayment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("androidpayPayment"))
			it.AndroidpayPayment, err = ec.unmarshalOandroidpayPaymentRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoiceNo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceNo"))
			it.InvoiceNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			it.Category, err = ec.unmarshalOinvoiceCategoryType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceCategoryType(ctx, v)
			if err != nil {
				return it, err
			}
		case "loveCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loveCode"))
			it.LoveCode, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierType"))
			it.CarrierType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum"))
			it.CarrierNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName"))
			it.BuyerName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN"))
			it.BuyerUbn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOinvoiceStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceStatusType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputinvoiceOrderByInput(ctx context.Context, obj interface{}) (model.InvoiceOrderByInput, error) {
	var it model.InvoiceOrderByInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoiceNo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceNo"))
			it.InvoiceNo, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			it.Category, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "loveCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loveCode"))
			it.LoveCode, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierType"))
			it.CarrierType, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum"))
			it.CarrierNum, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName"))
			it.BuyerName, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN"))
			it.BuyerUbn, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputinvoiceRelateToOneInput(ctx context.Context, obj interface{}) (model.InvoiceRelateToOneInput, error) {
	var it model.InvoiceRelateToOneInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "create":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create"))
			it.Create, err = ec.unmarshalOinvoiceCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "connect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connect"))
			it.Connect, err = ec.unmarshalOinvoiceWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceWhereUniqueInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "disconnect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disconnect"))
			it.Disconnect, err = ec.unmarshalOinvoiceWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceWhereUniqueInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "disconnectAll":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disconnectAll"))
			it.DisconnectAll, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputinvoiceUpdateInput(ctx context.Context, obj interface{}) (model.InvoiceUpdateInput, error) {
	var it model.InvoiceUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "newebpayPayment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newebpayPayment"))
			it.NewebpayPayment, err = ec.unmarshalOnewebpayPaymentRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "applepayPayment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applepayPayment"))
			it.ApplepayPayment, err = ec.unmarshalOapplepayPaymentRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "androidpayPayment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("androidpayPayment"))
			it.AndroidpayPayment, err = ec.unmarshalOandroidpayPaymentRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoiceNo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceNo"))
			it.InvoiceNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			it.Category, err = ec.unmarshalOinvoiceCategoryType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceCategoryType(ctx, v)
			if err != nil {
				return it, err
			}
		case "loveCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loveCode"))
			it.LoveCode, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierType"))
			it.CarrierType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum"))
			it.CarrierNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName"))
			it.BuyerName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN"))
			it.BuyerUbn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOinvoiceStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceStatusType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputinvoiceWhereInput(ctx context.Context, obj interface{}) (model.InvoiceWhereInput, error) {
	var it model.InvoiceWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOinvoiceWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOinvoiceWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not"))
			it.IDNot, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "newebpayPayment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newebpayPayment"))
			it.NewebpayPayment, err = ec.unmarshalOnewebpayPaymentWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "newebpayPayment_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newebpayPayment_is_null"))
			it.NewebpayPaymentIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "applepayPayment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applepayPayment"))
			it.ApplepayPayment, err = ec.unmarshalOapplepayPaymentWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "applepayPayment_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applepayPayment_is_null"))
			it.ApplepayPaymentIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "androidpayPayment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("androidpayPayment"))
			it.AndroidpayPayment, err = ec.unmarshalOandroidpayPaymentWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "androidpayPayment_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("androidpayPayment_is_null"))
			it.AndroidpayPaymentIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_not"))
			it.AmountNot, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_lt"))
			it.AmountLt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_lte"))
			it.AmountLte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_gt"))
			it.AmountGt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_gte"))
			it.AmountGte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_in"))
			it.AmountIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_not_in"))
			it.AmountNotIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not"))
			it.EmailNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_contains"))
			it.EmailContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_contains"))
			it.EmailNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_starts_with"))
			it.EmailStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_starts_with"))
			it.EmailNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_ends_with"))
			it.EmailEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_ends_with"))
			it.EmailNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_i"))
			it.EmailI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_i"))
			it.EmailNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_contains_i"))
			it.EmailContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_contains_i"))
			it.EmailNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_starts_with_i"))
			it.EmailStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_starts_with_i"))
			it.EmailNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_ends_with_i"))
			it.EmailEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_ends_with_i"))
			it.EmailNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_in"))
			it.EmailIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_in"))
			it.EmailNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not"))
			it.DescNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_contains"))
			it.DescContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_contains"))
			it.DescNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_starts_with"))
			it.DescStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_starts_with"))
			it.DescNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_ends_with"))
			it.DescEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_ends_with"))
			it.DescNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_i"))
			it.DescI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_i"))
			it.DescNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_contains_i"))
			it.DescContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_contains_i"))
			it.DescNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_starts_with_i"))
			it.DescStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_starts_with_i"))
			it.DescNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_ends_with_i"))
			it.DescEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_ends_with_i"))
			it.DescNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_in"))
			it.DescIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_in"))
			it.DescNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoiceNo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceNo"))
			it.InvoiceNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoiceNo_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceNo_not"))
			it.InvoiceNoNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoiceNo_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceNo_contains"))
			it.InvoiceNoContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoiceNo_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceNo_not_contains"))
			it.InvoiceNoNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoiceNo_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceNo_starts_with"))
			it.InvoiceNoStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoiceNo_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceNo_not_starts_with"))
			it.InvoiceNoNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoiceNo_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceNo_ends_with"))
			it.InvoiceNoEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoiceNo_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceNo_not_ends_with"))
			it.InvoiceNoNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoiceNo_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceNo_i"))
			it.InvoiceNoI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoiceNo_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceNo_not_i"))
			it.InvoiceNoNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoiceNo_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceNo_contains_i"))
			it.InvoiceNoContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoiceNo_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceNo_not_contains_i"))
			it.InvoiceNoNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoiceNo_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceNo_starts_with_i"))
			it.InvoiceNoStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoiceNo_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceNo_not_starts_with_i"))
			it.InvoiceNoNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoiceNo_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceNo_ends_with_i"))
			it.InvoiceNoEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoiceNo_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceNo_not_ends_with_i"))
			it.InvoiceNoNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoiceNo_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceNo_in"))
			it.InvoiceNoIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoiceNo_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceNo_not_in"))
			it.InvoiceNoNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			it.Category, err = ec.unmarshalOinvoiceCategoryType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceCategoryType(ctx, v)
			if err != nil {
				return it, err
			}
		case "category_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_not"))
			it.CategoryNot, err = ec.unmarshalOinvoiceCategoryType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceCategoryType(ctx, v)
			if err != nil {
				return it, err
			}
		case "category_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_in"))
			it.CategoryIn, err = ec.unmarshalOinvoiceCategoryType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceCategoryType(ctx, v)
			if err != nil {
				return it, err
			}
		case "category_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_not_in"))
			it.CategoryNotIn, err = ec.unmarshalOinvoiceCategoryType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceCategoryType(ctx, v)
			if err != nil {
				return it, err
			}
		case "loveCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loveCode"))
			it.LoveCode, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "loveCode_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loveCode_not"))
			it.LoveCodeNot, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "loveCode_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loveCode_lt"))
			it.LoveCodeLt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "loveCode_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loveCode_lte"))
			it.LoveCodeLte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "loveCode_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loveCode_gt"))
			it.LoveCodeGt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "loveCode_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loveCode_gte"))
			it.LoveCodeGte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "loveCode_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loveCode_in"))
			it.LoveCodeIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "loveCode_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loveCode_not_in"))
			it.LoveCodeNotIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierType"))
			it.CarrierType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierType_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierType_not"))
			it.CarrierTypeNot, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierType_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierType_in"))
			it.CarrierTypeIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierType_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierType_not_in"))
			it.CarrierTypeNotIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum"))
			it.CarrierNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_not"))
			it.CarrierNumNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_contains"))
			it.CarrierNumContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_not_contains"))
			it.CarrierNumNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_starts_with"))
			it.CarrierNumStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_not_starts_with"))
			it.CarrierNumNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_ends_with"))
			it.CarrierNumEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_not_ends_with"))
			it.CarrierNumNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_i"))
			it.CarrierNumI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_not_i"))
			it.CarrierNumNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_contains_i"))
			it.CarrierNumContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_not_contains_i"))
			it.CarrierNumNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_starts_with_i"))
			it.CarrierNumStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_not_starts_with_i"))
			it.CarrierNumNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_ends_with_i"))
			it.CarrierNumEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_not_ends_with_i"))
			it.CarrierNumNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_in"))
			it.CarrierNumIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_not_in"))
			it.CarrierNumNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName"))
			it.BuyerName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_not"))
			it.BuyerNameNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_contains"))
			it.BuyerNameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_not_contains"))
			it.BuyerNameNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_starts_with"))
			it.BuyerNameStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_not_starts_with"))
			it.BuyerNameNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_ends_with"))
			it.BuyerNameEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_not_ends_with"))
			it.BuyerNameNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_i"))
			it.BuyerNameI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_not_i"))
			it.BuyerNameNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_contains_i"))
			it.BuyerNameContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_not_contains_i"))
			it.BuyerNameNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_starts_with_i"))
			it.BuyerNameStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_not_starts_with_i"))
			it.BuyerNameNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_ends_with_i"))
			it.BuyerNameEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_not_ends_with_i"))
			it.BuyerNameNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_in"))
			it.BuyerNameIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_not_in"))
			it.BuyerNameNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN"))
			it.BuyerUbn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_not"))
			it.BuyerUbnNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_contains"))
			it.BuyerUbnContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_not_contains"))
			it.BuyerUbnNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_starts_with"))
			it.BuyerUbnStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_not_starts_with"))
			it.BuyerUbnNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_ends_with"))
			it.BuyerUbnEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_not_ends_with"))
			it.BuyerUbnNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_i"))
			it.BuyerUbnI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_not_i"))
			it.BuyerUbnNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_contains_i"))
			it.BuyerUbnContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_not_contains_i"))
			it.BuyerUbnNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_starts_with_i"))
			it.BuyerUbnStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_not_starts_with_i"))
			it.BuyerUbnNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_ends_with_i"))
			it.BuyerUbnEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_not_ends_with_i"))
			it.BuyerUbnNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_in"))
			it.BuyerUbnIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_not_in"))
			it.BuyerUbnNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOinvoiceStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceStatusType(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_not"))
			it.StatusNot, err = ec.unmarshalOinvoiceStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceStatusType(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_in"))
			it.StatusIn, err = ec.unmarshalOinvoiceStatusType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceStatusType(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_not_in"))
			it.StatusNotIn, err = ec.unmarshalOinvoiceStatusType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceStatusType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not"))
			it.CreatedAtNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not_in"))
			it.CreatedAtNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not"))
			it.UpdatedAtNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not_in"))
			it.UpdatedAtNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_is_null"))
			it.CreatedByIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_is_null"))
			it.UpdatedByIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputinvoiceWhereUniqueInput(ctx context.Context, obj interface{}) (model.InvoiceWhereUniqueInput, error) {
	var it model.InvoiceWhereUniqueInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoiceNo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceNo"))
			it.InvoiceNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmarketingMembershipCreateInput(ctx context.Context, obj interface{}) (model.MarketingMembershipCreateInput, error) {
	var it model.MarketingMembershipCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "member":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("member"))
			it.Member, err = ec.unmarshalOmemberRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOmarketingMembershipStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipStatusType(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			it.StartDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			it.EndDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "requesterEmail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requesterEmail"))
			it.RequesterEmail, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approvedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedBy"))
			it.ApprovedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmarketingMembershipOrderByInput(ctx context.Context, obj interface{}) (model.MarketingMembershipOrderByInput, error) {
	var it model.MarketingMembershipOrderByInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			it.StartDate, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			it.EndDate, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "requesterEmail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requesterEmail"))
			it.RequesterEmail, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "approvedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedBy"))
			it.ApprovedBy, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmarketingMembershipRelateToOneInput(ctx context.Context, obj interface{}) (model.MarketingMembershipRelateToOneInput, error) {
	var it model.MarketingMembershipRelateToOneInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "create":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create"))
			it.Create, err = ec.unmarshalOmarketingMembershipCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "connect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connect"))
			it.Connect, err = ec.unmarshalOmarketingMembershipWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipWhereUniqueInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "disconnect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disconnect"))
			it.Disconnect, err = ec.unmarshalOmarketingMembershipWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipWhereUniqueInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "disconnectAll":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disconnectAll"))
			it.DisconnectAll, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmarketingMembershipUpdateInput(ctx context.Context, obj interface{}) (model.MarketingMembershipUpdateInput, error) {
	var it model.MarketingMembershipUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "member":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("member"))
			it.Member, err = ec.unmarshalOmemberRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOmarketingMembershipStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipStatusType(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			it.StartDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			it.EndDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "requesterEmail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requesterEmail"))
			it.RequesterEmail, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approvedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedBy"))
			it.ApprovedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmarketingMembershipWhereInput(ctx context.Context, obj interface{}) (model.MarketingMembershipWhereInput, error) {
	var it model.MarketingMembershipWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOmarketingMembershipWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOmarketingMembershipWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not"))
			it.IDNot, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "member":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("member"))
			it.Member, err = ec.unmarshalOmemberWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "member_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("member_is_null"))
			it.MemberIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOmarketingMembershipStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipStatusType(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_not"))
			it.StatusNot, err = ec.unmarshalOmarketingMembershipStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipStatusType(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_in"))
			it.StatusIn, err = ec.unmarshalOmarketingMembershipStatusType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipStatusType(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_not_in"))
			it.StatusNotIn, err = ec.unmarshalOmarketingMembershipStatusType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipStatusType(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			it.StartDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate_not"))
			it.StartDateNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate_lt"))
			it.StartDateLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate_lte"))
			it.StartDateLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate_gt"))
			it.StartDateGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate_gte"))
			it.StartDateGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate_in"))
			it.StartDateIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate_not_in"))
			it.StartDateNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			it.EndDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate_not"))
			it.EndDateNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate_lt"))
			it.EndDateLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate_lte"))
			it.EndDateLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate_gt"))
			it.EndDateGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate_gte"))
			it.EndDateGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate_in"))
			it.EndDateIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate_not_in"))
			it.EndDateNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "requesterEmail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requesterEmail"))
			it.RequesterEmail, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "requesterEmail_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requesterEmail_not"))
			it.RequesterEmailNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "requesterEmail_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requesterEmail_contains"))
			it.RequesterEmailContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "requesterEmail_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requesterEmail_not_contains"))
			it.RequesterEmailNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "requesterEmail_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requesterEmail_starts_with"))
			it.RequesterEmailStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "requesterEmail_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requesterEmail_not_starts_with"))
			it.RequesterEmailNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "requesterEmail_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requesterEmail_ends_with"))
			it.RequesterEmailEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "requesterEmail_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requesterEmail_not_ends_with"))
			it.RequesterEmailNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "requesterEmail_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requesterEmail_i"))
			it.RequesterEmailI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "requesterEmail_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requesterEmail_not_i"))
			it.RequesterEmailNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "requesterEmail_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requesterEmail_contains_i"))
			it.RequesterEmailContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "requesterEmail_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requesterEmail_not_contains_i"))
			it.RequesterEmailNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "requesterEmail_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requesterEmail_starts_with_i"))
			it.RequesterEmailStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "requesterEmail_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requesterEmail_not_starts_with_i"))
			it.RequesterEmailNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "requesterEmail_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requesterEmail_ends_with_i"))
			it.RequesterEmailEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "requesterEmail_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requesterEmail_not_ends_with_i"))
			it.RequesterEmailNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "requesterEmail_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requesterEmail_in"))
			it.RequesterEmailIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "requesterEmail_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requesterEmail_not_in"))
			it.RequesterEmailNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approvedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedBy"))
			it.ApprovedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approvedBy_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedBy_not"))
			it.ApprovedByNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approvedBy_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedBy_contains"))
			it.ApprovedByContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approvedBy_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedBy_not_contains"))
			it.ApprovedByNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approvedBy_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedBy_starts_with"))
			it.ApprovedByStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approvedBy_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedBy_not_starts_with"))
			it.ApprovedByNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approvedBy_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedBy_ends_with"))
			it.ApprovedByEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approvedBy_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedBy_not_ends_with"))
			it.ApprovedByNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approvedBy_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedBy_i"))
			it.ApprovedByI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approvedBy_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedBy_not_i"))
			it.ApprovedByNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approvedBy_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedBy_contains_i"))
			it.ApprovedByContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approvedBy_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedBy_not_contains_i"))
			it.ApprovedByNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approvedBy_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedBy_starts_with_i"))
			it.ApprovedByStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approvedBy_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedBy_not_starts_with_i"))
			it.ApprovedByNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approvedBy_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedBy_ends_with_i"))
			it.ApprovedByEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approvedBy_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedBy_not_ends_with_i"))
			it.ApprovedByNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approvedBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedBy_in"))
			it.ApprovedByIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approvedBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvedBy_not_in"))
			it.ApprovedByNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not"))
			it.CreatedAtNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not_in"))
			it.CreatedAtNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not"))
			it.UpdatedAtNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not_in"))
			it.UpdatedAtNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_is_null"))
			it.CreatedByIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_is_null"))
			it.UpdatedByIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmarketingMembershipWhereUniqueInput(ctx context.Context, obj interface{}) (model.MarketingMembershipWhereUniqueInput, error) {
	var it model.MarketingMembershipWhereUniqueInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmemberOrderByInput(ctx context.Context, obj interface{}) (model.MemberOrderByInput, error) {
	var it model.MemberOrderByInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "firebaseId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firebaseId"))
			it.FirebaseID, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "tos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tos"))
			it.Tos, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateJoined":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateJoined"))
			it.DateJoined, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			it.FirstName, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			it.LastName, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			it.Gender, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday"))
			it.Birthday, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickname":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickname"))
			it.Nickname, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "profileImage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImage"))
			it.ProfileImage, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			it.City, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			it.Country, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "district":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district"))
			it.District, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmemberPrivateCreateInput(ctx context.Context, obj interface{}) (model.MemberPrivateCreateInput, error) {
	var it model.MemberPrivateCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "firebaseId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firebaseId"))
			it.FirebaseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "marketingMembership":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marketingMembership"))
			it.MarketingMembership, err = ec.unmarshalOmarketingMembershipRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNmemberTypeType2githubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberTypeType(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOmemberStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberStateType(ctx, v)
			if err != nil {
				return it, err
			}
		case "tos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tos"))
			it.Tos, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateJoined":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateJoined"))
			it.DateJoined, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			it.FirstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			it.LastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			it.Gender, err = ec.unmarshalOmemberGenderType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberGenderType(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday"))
			it.Birthday, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickname":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickname"))
			it.Nickname, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "profileImage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImage"))
			it.ProfileImage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			it.City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			it.Country, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district"))
			it.District, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription"))
			it.Subscription, err = ec.unmarshalOsubscriptionRelateToManyInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionRelateToManyInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmemberPrivateUpdateInput(ctx context.Context, obj interface{}) (model.MemberPrivateUpdateInput, error) {
	var it model.MemberPrivateUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "firebaseId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firebaseId"))
			it.FirebaseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "marketingMembership":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marketingMembership"))
			it.MarketingMembership, err = ec.unmarshalOmarketingMembershipRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOmemberTypeType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberTypeType(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOmemberStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberStateType(ctx, v)
			if err != nil {
				return it, err
			}
		case "tos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tos"))
			it.Tos, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateJoined":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateJoined"))
			it.DateJoined, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			it.FirstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			it.LastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			it.Gender, err = ec.unmarshalOmemberGenderType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberGenderType(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday"))
			it.Birthday, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickname":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickname"))
			it.Nickname, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "profileImage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImage"))
			it.ProfileImage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			it.City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			it.Country, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district"))
			it.District, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription"))
			it.Subscription, err = ec.unmarshalOsubscriptionRelateToManyInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionRelateToManyInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmemberRelateToOneInput(ctx context.Context, obj interface{}) (model.MemberRelateToOneInput, error) {
	var it model.MemberRelateToOneInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "create":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create"))
			it.Create, err = ec.unmarshalOmemberCreateInput2map(ctx, v)
			if err != nil {
				return it, err
			}
		case "connect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connect"))
			it.Connect, err = ec.unmarshalOmemberWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberWhereUniqueInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "disconnect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disconnect"))
			it.Disconnect, err = ec.unmarshalOmemberWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberWhereUniqueInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "disconnectAll":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disconnectAll"))
			it.DisconnectAll, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmemberWhereInput(ctx context.Context, obj interface{}) (model.MemberWhereInput, error) {
	var it model.MemberWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOmemberWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOmemberWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not"))
			it.IDNot, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "firebaseId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firebaseId"))
			it.FirebaseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firebaseId_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firebaseId_not"))
			it.FirebaseIDNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firebaseId_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firebaseId_contains"))
			it.FirebaseIDContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firebaseId_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firebaseId_not_contains"))
			it.FirebaseIDNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firebaseId_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firebaseId_starts_with"))
			it.FirebaseIDStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firebaseId_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firebaseId_not_starts_with"))
			it.FirebaseIDNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firebaseId_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firebaseId_ends_with"))
			it.FirebaseIDEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firebaseId_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firebaseId_not_ends_with"))
			it.FirebaseIDNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firebaseId_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firebaseId_i"))
			it.FirebaseIDI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firebaseId_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firebaseId_not_i"))
			it.FirebaseIDNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firebaseId_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firebaseId_contains_i"))
			it.FirebaseIDContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firebaseId_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firebaseId_not_contains_i"))
			it.FirebaseIDNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firebaseId_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firebaseId_starts_with_i"))
			it.FirebaseIDStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firebaseId_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firebaseId_not_starts_with_i"))
			it.FirebaseIDNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firebaseId_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firebaseId_ends_with_i"))
			it.FirebaseIDEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firebaseId_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firebaseId_not_ends_with_i"))
			it.FirebaseIDNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firebaseId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firebaseId_in"))
			it.FirebaseIDIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firebaseId_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firebaseId_not_in"))
			it.FirebaseIDNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not"))
			it.EmailNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_contains"))
			it.EmailContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_contains"))
			it.EmailNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_starts_with"))
			it.EmailStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_starts_with"))
			it.EmailNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_ends_with"))
			it.EmailEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_ends_with"))
			it.EmailNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_i"))
			it.EmailI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_i"))
			it.EmailNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_contains_i"))
			it.EmailContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_contains_i"))
			it.EmailNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_starts_with_i"))
			it.EmailStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_starts_with_i"))
			it.EmailNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_ends_with_i"))
			it.EmailEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_ends_with_i"))
			it.EmailNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_in"))
			it.EmailIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_in"))
			it.EmailNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "marketingMembership":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marketingMembership"))
			it.MarketingMembership, err = ec.unmarshalOmarketingMembershipWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "marketingMembership_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marketingMembership_is_null"))
			it.MarketingMembershipIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOmemberTypeType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberTypeType(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_not"))
			it.TypeNot, err = ec.unmarshalOmemberTypeType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberTypeType(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_in"))
			it.TypeIn, err = ec.unmarshalOmemberTypeType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberTypeType(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_not_in"))
			it.TypeNotIn, err = ec.unmarshalOmemberTypeType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberTypeType(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOmemberStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberStateType(ctx, v)
			if err != nil {
				return it, err
			}
		case "state_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state_not"))
			it.StateNot, err = ec.unmarshalOmemberStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberStateType(ctx, v)
			if err != nil {
				return it, err
			}
		case "state_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state_in"))
			it.StateIn, err = ec.unmarshalOmemberStateType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberStateType(ctx, v)
			if err != nil {
				return it, err
			}
		case "state_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state_not_in"))
			it.StateNotIn, err = ec.unmarshalOmemberStateType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberStateType(ctx, v)
			if err != nil {
				return it, err
			}
		case "tos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tos"))
			it.Tos, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "tos_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tos_not"))
			it.TosNot, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateJoined":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateJoined"))
			it.DateJoined, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateJoined_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateJoined_not"))
			it.DateJoinedNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateJoined_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateJoined_lt"))
			it.DateJoinedLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateJoined_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateJoined_lte"))
			it.DateJoinedLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateJoined_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateJoined_gt"))
			it.DateJoinedGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateJoined_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateJoined_gte"))
			it.DateJoinedGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateJoined_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateJoined_in"))
			it.DateJoinedIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateJoined_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateJoined_not_in"))
			it.DateJoinedNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			it.FirstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_not"))
			it.FirstNameNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_contains"))
			it.FirstNameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_not_contains"))
			it.FirstNameNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_starts_with"))
			it.FirstNameStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_not_starts_with"))
			it.FirstNameNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_ends_with"))
			it.FirstNameEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_not_ends_with"))
			it.FirstNameNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_i"))
			it.FirstNameI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_not_i"))
			it.FirstNameNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_contains_i"))
			it.FirstNameContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_not_contains_i"))
			it.FirstNameNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_starts_with_i"))
			it.FirstNameStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_not_starts_with_i"))
			it.FirstNameNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_ends_with_i"))
			it.FirstNameEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_not_ends_with_i"))
			it.FirstNameNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_in"))
			it.FirstNameIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_not_in"))
			it.FirstNameNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			it.LastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_not"))
			it.LastNameNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_contains"))
			it.LastNameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_not_contains"))
			it.LastNameNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_starts_with"))
			it.LastNameStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_not_starts_with"))
			it.LastNameNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_ends_with"))
			it.LastNameEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_not_ends_with"))
			it.LastNameNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_i"))
			it.LastNameI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_not_i"))
			it.LastNameNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_contains_i"))
			it.LastNameContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_not_contains_i"))
			it.LastNameNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_starts_with_i"))
			it.LastNameStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_not_starts_with_i"))
			it.LastNameNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_ends_with_i"))
			it.LastNameEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_not_ends_with_i"))
			it.LastNameNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_in"))
			it.LastNameIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_not_in"))
			it.LastNameNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not"))
			it.NameNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_contains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_contains"))
			it.NameNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_starts_with"))
			it.NameStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_starts_with"))
			it.NameNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_ends_with"))
			it.NameEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_ends_with"))
			it.NameNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_i"))
			it.NameI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_i"))
			it.NameNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_contains_i"))
			it.NameContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_contains_i"))
			it.NameNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_starts_with_i"))
			it.NameStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_starts_with_i"))
			it.NameNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_ends_with_i"))
			it.NameEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_ends_with_i"))
			it.NameNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_in"))
			it.NameIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_in"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			it.Gender, err = ec.unmarshalOmemberGenderType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberGenderType(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender_not"))
			it.GenderNot, err = ec.unmarshalOmemberGenderType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberGenderType(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender_in"))
			it.GenderIn, err = ec.unmarshalOmemberGenderType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberGenderType(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender_not_in"))
			it.GenderNotIn, err = ec.unmarshalOmemberGenderType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberGenderType(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_not"))
			it.PhoneNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_contains"))
			it.PhoneContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_not_contains"))
			it.PhoneNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_starts_with"))
			it.PhoneStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_not_starts_with"))
			it.PhoneNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_ends_with"))
			it.PhoneEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_not_ends_with"))
			it.PhoneNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_i"))
			it.PhoneI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_not_i"))
			it.PhoneNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_contains_i"))
			it.PhoneContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_not_contains_i"))
			it.PhoneNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_starts_with_i"))
			it.PhoneStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_not_starts_with_i"))
			it.PhoneNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_ends_with_i"))
			it.PhoneEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_not_ends_with_i"))
			it.PhoneNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_in"))
			it.PhoneIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_not_in"))
			it.PhoneNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday"))
			it.Birthday, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthday_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday_not"))
			it.BirthdayNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthday_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday_lt"))
			it.BirthdayLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthday_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday_lte"))
			it.BirthdayLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthday_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday_gt"))
			it.BirthdayGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthday_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday_gte"))
			it.BirthdayGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthday_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday_in"))
			it.BirthdayIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthday_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday_not_in"))
			it.BirthdayNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_not"))
			it.AddressNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_contains"))
			it.AddressContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_not_contains"))
			it.AddressNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_starts_with"))
			it.AddressStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_not_starts_with"))
			it.AddressNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_ends_with"))
			it.AddressEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_not_ends_with"))
			it.AddressNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_i"))
			it.AddressI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_not_i"))
			it.AddressNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_contains_i"))
			it.AddressContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_not_contains_i"))
			it.AddressNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_starts_with_i"))
			it.AddressStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_not_starts_with_i"))
			it.AddressNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_ends_with_i"))
			it.AddressEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_not_ends_with_i"))
			it.AddressNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_in"))
			it.AddressIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_not_in"))
			it.AddressNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickname":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickname"))
			it.Nickname, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickname_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickname_not"))
			it.NicknameNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickname_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickname_contains"))
			it.NicknameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickname_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickname_not_contains"))
			it.NicknameNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickname_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickname_starts_with"))
			it.NicknameStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickname_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickname_not_starts_with"))
			it.NicknameNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickname_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickname_ends_with"))
			it.NicknameEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickname_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickname_not_ends_with"))
			it.NicknameNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickname_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickname_i"))
			it.NicknameI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickname_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickname_not_i"))
			it.NicknameNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickname_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickname_contains_i"))
			it.NicknameContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickname_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickname_not_contains_i"))
			it.NicknameNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickname_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickname_starts_with_i"))
			it.NicknameStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickname_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickname_not_starts_with_i"))
			it.NicknameNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickname_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickname_ends_with_i"))
			it.NicknameEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickname_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickname_not_ends_with_i"))
			it.NicknameNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickname_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickname_in"))
			it.NicknameIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickname_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickname_not_in"))
			it.NicknameNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "profileImage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImage"))
			it.ProfileImage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "profileImage_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImage_not"))
			it.ProfileImageNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "profileImage_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImage_contains"))
			it.ProfileImageContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "profileImage_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImage_not_contains"))
			it.ProfileImageNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "profileImage_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImage_starts_with"))
			it.ProfileImageStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "profileImage_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImage_not_starts_with"))
			it.ProfileImageNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "profileImage_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImage_ends_with"))
			it.ProfileImageEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "profileImage_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImage_not_ends_with"))
			it.ProfileImageNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "profileImage_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImage_i"))
			it.ProfileImageI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "profileImage_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImage_not_i"))
			it.ProfileImageNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "profileImage_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImage_contains_i"))
			it.ProfileImageContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "profileImage_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImage_not_contains_i"))
			it.ProfileImageNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "profileImage_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImage_starts_with_i"))
			it.ProfileImageStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "profileImage_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImage_not_starts_with_i"))
			it.ProfileImageNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "profileImage_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImage_ends_with_i"))
			it.ProfileImageEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "profileImage_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImage_not_ends_with_i"))
			it.ProfileImageNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "profileImage_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImage_in"))
			it.ProfileImageIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "profileImage_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImage_not_in"))
			it.ProfileImageNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			it.City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_not"))
			it.CityNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_contains"))
			it.CityContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_not_contains"))
			it.CityNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_starts_with"))
			it.CityStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_not_starts_with"))
			it.CityNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_ends_with"))
			it.CityEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_not_ends_with"))
			it.CityNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_i"))
			it.CityI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_not_i"))
			it.CityNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_contains_i"))
			it.CityContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_not_contains_i"))
			it.CityNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_starts_with_i"))
			it.CityStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_not_starts_with_i"))
			it.CityNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_ends_with_i"))
			it.CityEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_not_ends_with_i"))
			it.CityNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_in"))
			it.CityIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_not_in"))
			it.CityNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			it.Country, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country_not"))
			it.CountryNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country_contains"))
			it.CountryContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country_not_contains"))
			it.CountryNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country_starts_with"))
			it.CountryStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country_not_starts_with"))
			it.CountryNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country_ends_with"))
			it.CountryEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country_not_ends_with"))
			it.CountryNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country_i"))
			it.CountryI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country_not_i"))
			it.CountryNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country_contains_i"))
			it.CountryContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country_not_contains_i"))
			it.CountryNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country_starts_with_i"))
			it.CountryStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country_not_starts_with_i"))
			it.CountryNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country_ends_with_i"))
			it.CountryEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country_not_ends_with_i"))
			it.CountryNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country_in"))
			it.CountryIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country_not_in"))
			it.CountryNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district"))
			it.District, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_not"))
			it.DistrictNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_contains"))
			it.DistrictContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_not_contains"))
			it.DistrictNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_starts_with"))
			it.DistrictStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_not_starts_with"))
			it.DistrictNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_ends_with"))
			it.DistrictEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_not_ends_with"))
			it.DistrictNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_i"))
			it.DistrictI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_not_i"))
			it.DistrictNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_contains_i"))
			it.DistrictContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_not_contains_i"))
			it.DistrictNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_starts_with_i"))
			it.DistrictStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_not_starts_with_i"))
			it.DistrictNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_ends_with_i"))
			it.DistrictEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_not_ends_with_i"))
			it.DistrictNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_in"))
			it.DistrictIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_not_in"))
			it.DistrictNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscription_every":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription_every"))
			it.SubscriptionEvery, err = ec.unmarshalOsubscriptionWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscription_some":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription_some"))
			it.SubscriptionSome, err = ec.unmarshalOsubscriptionWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscription_none":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription_none"))
			it.SubscriptionNone, err = ec.unmarshalOsubscriptionWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not"))
			it.CreatedAtNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not_in"))
			it.CreatedAtNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not"))
			it.UpdatedAtNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not_in"))
			it.UpdatedAtNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_is_null"))
			it.CreatedByIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_is_null"))
			it.UpdatedByIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmemberWhereUniqueInput(ctx context.Context, obj interface{}) (model.MemberWhereUniqueInput, error) {
	var it model.MemberWhereUniqueInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "firebaseId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firebaseId"))
			it.FirebaseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmerchandiseCreateInput(ctx context.Context, obj interface{}) (model.MerchandiseCreateInput, error) {
	var it model.MerchandiseCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			it.Code, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			it.Price, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			it.Currency, err = ec.unmarshalOmerchandiseCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseCurrencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOmerchandiseStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseStateType(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment"))
			it.Comment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmerchandiseOrderByInput(ctx context.Context, obj interface{}) (model.MerchandiseOrderByInput, error) {
	var it model.MerchandiseOrderByInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			it.Code, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			it.Price, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			it.Currency, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment"))
			it.Comment, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmerchandiseUpdateInput(ctx context.Context, obj interface{}) (model.MerchandiseUpdateInput, error) {
	var it model.MerchandiseUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			it.Code, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			it.Price, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			it.Currency, err = ec.unmarshalOmerchandiseCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseCurrencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOmerchandiseStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseStateType(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment"))
			it.Comment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmerchandiseWhereInput(ctx context.Context, obj interface{}) (model.MerchandiseWhereInput, error) {
	var it model.MerchandiseWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOmerchandiseWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOmerchandiseWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not"))
			it.IDNot, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not"))
			it.NameNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_contains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_contains"))
			it.NameNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_starts_with"))
			it.NameStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_starts_with"))
			it.NameNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_ends_with"))
			it.NameEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_ends_with"))
			it.NameNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_i"))
			it.NameI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_i"))
			it.NameNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_contains_i"))
			it.NameContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_contains_i"))
			it.NameNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_starts_with_i"))
			it.NameStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_starts_with_i"))
			it.NameNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_ends_with_i"))
			it.NameEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_ends_with_i"))
			it.NameNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_in"))
			it.NameIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_in"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			it.Code, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_not"))
			it.CodeNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_contains"))
			it.CodeContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_not_contains"))
			it.CodeNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_starts_with"))
			it.CodeStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_not_starts_with"))
			it.CodeNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_ends_with"))
			it.CodeEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_not_ends_with"))
			it.CodeNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_i"))
			it.CodeI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_not_i"))
			it.CodeNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_contains_i"))
			it.CodeContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_not_contains_i"))
			it.CodeNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_starts_with_i"))
			it.CodeStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_not_starts_with_i"))
			it.CodeNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_ends_with_i"))
			it.CodeEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_not_ends_with_i"))
			it.CodeNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_in"))
			it.CodeIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_not_in"))
			it.CodeNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			it.Price, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "price_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price_not"))
			it.PriceNot, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "price_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price_lt"))
			it.PriceLt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "price_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price_lte"))
			it.PriceLte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "price_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price_gt"))
			it.PriceGt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "price_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price_gte"))
			it.PriceGte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "price_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price_in"))
			it.PriceIn, err = ec.unmarshalOFloat2ᚕᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "price_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price_not_in"))
			it.PriceNotIn, err = ec.unmarshalOFloat2ᚕᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			it.Currency, err = ec.unmarshalOmerchandiseCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseCurrencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency_not"))
			it.CurrencyNot, err = ec.unmarshalOmerchandiseCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseCurrencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency_in"))
			it.CurrencyIn, err = ec.unmarshalOmerchandiseCurrencyType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseCurrencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency_not_in"))
			it.CurrencyNotIn, err = ec.unmarshalOmerchandiseCurrencyType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseCurrencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOmerchandiseStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseStateType(ctx, v)
			if err != nil {
				return it, err
			}
		case "state_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state_not"))
			it.StateNot, err = ec.unmarshalOmerchandiseStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseStateType(ctx, v)
			if err != nil {
				return it, err
			}
		case "state_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state_in"))
			it.StateIn, err = ec.unmarshalOmerchandiseStateType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseStateType(ctx, v)
			if err != nil {
				return it, err
			}
		case "state_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state_not_in"))
			it.StateNotIn, err = ec.unmarshalOmerchandiseStateType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseStateType(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not"))
			it.DescNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_contains"))
			it.DescContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_contains"))
			it.DescNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_starts_with"))
			it.DescStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_starts_with"))
			it.DescNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_ends_with"))
			it.DescEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_ends_with"))
			it.DescNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_i"))
			it.DescI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_i"))
			it.DescNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_contains_i"))
			it.DescContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_contains_i"))
			it.DescNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_starts_with_i"))
			it.DescStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_starts_with_i"))
			it.DescNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_ends_with_i"))
			it.DescEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_ends_with_i"))
			it.DescNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_in"))
			it.DescIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_in"))
			it.DescNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment"))
			it.Comment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_not"))
			it.CommentNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_contains"))
			it.CommentContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_not_contains"))
			it.CommentNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_starts_with"))
			it.CommentStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_not_starts_with"))
			it.CommentNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_ends_with"))
			it.CommentEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_not_ends_with"))
			it.CommentNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_i"))
			it.CommentI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_not_i"))
			it.CommentNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_contains_i"))
			it.CommentContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_not_contains_i"))
			it.CommentNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_starts_with_i"))
			it.CommentStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_not_starts_with_i"))
			it.CommentNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_ends_with_i"))
			it.CommentEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_not_ends_with_i"))
			it.CommentNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_in"))
			it.CommentIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_not_in"))
			it.CommentNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not"))
			it.CreatedAtNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not_in"))
			it.CreatedAtNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not"))
			it.UpdatedAtNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not_in"))
			it.UpdatedAtNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_is_null"))
			it.CreatedByIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_is_null"))
			it.UpdatedByIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmerchandiseWhereUniqueInput(ctx context.Context, obj interface{}) (model.MerchandiseWhereUniqueInput, error) {
	var it model.MerchandiseWhereUniqueInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			it.Code, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewebpayPaymentCreateInput(ctx context.Context, obj interface{}) (model.NewebpayPaymentCreateInput, error) {
	var it model.NewebpayPaymentCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "subscription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription"))
			it.Subscription, err = ec.unmarshalOsubscriptionRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoice":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoice"))
			it.Invoice, err = ec.unmarshalOinvoiceRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod"))
			it.PaymentMethod, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTime"))
			it.PaymentTime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tradeNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tradeNumber"))
			it.TradeNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchantId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantId"))
			it.MerchantID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber"))
			it.OrderNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenUseStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenUseStatus"))
			it.TokenUseStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "respondCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("respondCode"))
			it.RespondCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ECI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ECI"))
			it.Eci, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authCode"))
			it.AuthCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authBank":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authBank"))
			it.AuthBank, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoLastFour":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoLastFour"))
			it.CardInfoLastFour, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoFirstSix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoFirstSix"))
			it.CardInfoFirstSix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoExp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoExp"))
			it.CardInfoExp, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewebpayPaymentInfoCreateInput(ctx context.Context, obj interface{}) (model.NewebpayPaymentInfoCreateInput, error) {
	var it model.NewebpayPaymentInfoCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "subscription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription"))
			it.Subscription, err = ec.unmarshalOsubscriptionRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm"))
			it.TokenTerm, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue"))
			it.TokenValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife"))
			it.TokenLife, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewebpayPaymentInfoOrderByInput(ctx context.Context, obj interface{}) (model.NewebpayPaymentInfoOrderByInput, error) {
	var it model.NewebpayPaymentInfoOrderByInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm"))
			it.TokenTerm, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue"))
			it.TokenValue, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife"))
			it.TokenLife, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewebpayPaymentInfoRelateToOneInput(ctx context.Context, obj interface{}) (model.NewebpayPaymentInfoRelateToOneInput, error) {
	var it model.NewebpayPaymentInfoRelateToOneInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "create":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create"))
			it.Create, err = ec.unmarshalOnewebpayPaymentInfoCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentInfoCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "connect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connect"))
			it.Connect, err = ec.unmarshalOnewebpayPaymentInfoWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentInfoWhereUniqueInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "disconnect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disconnect"))
			it.Disconnect, err = ec.unmarshalOnewebpayPaymentInfoWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentInfoWhereUniqueInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "disconnectAll":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disconnectAll"))
			it.DisconnectAll, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewebpayPaymentInfoUpdateInput(ctx context.Context, obj interface{}) (model.NewebpayPaymentInfoUpdateInput, error) {
	var it model.NewebpayPaymentInfoUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "subscription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription"))
			it.Subscription, err = ec.unmarshalOsubscriptionRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm"))
			it.TokenTerm, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue"))
			it.TokenValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife"))
			it.TokenLife, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewebpayPaymentInfoWhereInput(ctx context.Context, obj interface{}) (model.NewebpayPaymentInfoWhereInput, error) {
	var it model.NewebpayPaymentInfoWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOnewebpayPaymentInfoWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentInfoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOnewebpayPaymentInfoWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentInfoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not"))
			it.IDNot, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription"))
			it.Subscription, err = ec.unmarshalOsubscriptionWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscription_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription_is_null"))
			it.SubscriptionIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm"))
			it.TokenTerm, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_not"))
			it.TokenTermNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_contains"))
			it.TokenTermContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_not_contains"))
			it.TokenTermNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_starts_with"))
			it.TokenTermStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_not_starts_with"))
			it.TokenTermNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_ends_with"))
			it.TokenTermEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_not_ends_with"))
			it.TokenTermNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_i"))
			it.TokenTermI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_not_i"))
			it.TokenTermNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_contains_i"))
			it.TokenTermContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_not_contains_i"))
			it.TokenTermNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_starts_with_i"))
			it.TokenTermStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_not_starts_with_i"))
			it.TokenTermNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_ends_with_i"))
			it.TokenTermEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_not_ends_with_i"))
			it.TokenTermNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_in"))
			it.TokenTermIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_not_in"))
			it.TokenTermNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue"))
			it.TokenValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_not"))
			it.TokenValueNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_contains"))
			it.TokenValueContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_not_contains"))
			it.TokenValueNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_starts_with"))
			it.TokenValueStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_not_starts_with"))
			it.TokenValueNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_ends_with"))
			it.TokenValueEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_not_ends_with"))
			it.TokenValueNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_i"))
			it.TokenValueI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_not_i"))
			it.TokenValueNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_contains_i"))
			it.TokenValueContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_not_contains_i"))
			it.TokenValueNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_starts_with_i"))
			it.TokenValueStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_not_starts_with_i"))
			it.TokenValueNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_ends_with_i"))
			it.TokenValueEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_not_ends_with_i"))
			it.TokenValueNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_in"))
			it.TokenValueIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_not_in"))
			it.TokenValueNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife"))
			it.TokenLife, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife_not"))
			it.TokenLifeNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife_lt"))
			it.TokenLifeLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife_lte"))
			it.TokenLifeLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife_gt"))
			it.TokenLifeGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife_gte"))
			it.TokenLifeGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife_in"))
			it.TokenLifeIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife_not_in"))
			it.TokenLifeNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not"))
			it.CreatedAtNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not_in"))
			it.CreatedAtNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not"))
			it.UpdatedAtNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not_in"))
			it.UpdatedAtNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_is_null"))
			it.CreatedByIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_is_null"))
			it.UpdatedByIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewebpayPaymentInfoWhereUniqueInput(ctx context.Context, obj interface{}) (model.NewebpayPaymentInfoWhereUniqueInput, error) {
	var it model.NewebpayPaymentInfoWhereUniqueInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewebpayPaymentOrderByInput(ctx context.Context, obj interface{}) (model.NewebpayPaymentOrderByInput, error) {
	var it model.NewebpayPaymentOrderByInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod"))
			it.PaymentMethod, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTime"))
			it.PaymentTime, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "tradeNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tradeNumber"))
			it.TradeNumber, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchantId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantId"))
			it.MerchantID, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber"))
			it.OrderNumber, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenUseStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenUseStatus"))
			it.TokenUseStatus, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "respondCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("respondCode"))
			it.RespondCode, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "ECI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ECI"))
			it.Eci, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authCode"))
			it.AuthCode, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "authBank":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authBank"))
			it.AuthBank, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoLastFour":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoLastFour"))
			it.CardInfoLastFour, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoFirstSix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoFirstSix"))
			it.CardInfoFirstSix, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoExp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoExp"))
			it.CardInfoExp, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewebpayPaymentRelateToManyInput(ctx context.Context, obj interface{}) (model.NewebpayPaymentRelateToManyInput, error) {
	var it model.NewebpayPaymentRelateToManyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "create":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create"))
			it.Create, err = ec.unmarshalOnewebpayPaymentCreateInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "connect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connect"))
			it.Connect, err = ec.unmarshalOnewebpayPaymentWhereUniqueInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentWhereUniqueInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "disconnect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disconnect"))
			it.Disconnect, err = ec.unmarshalOnewebpayPaymentWhereUniqueInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentWhereUniqueInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "disconnectAll":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disconnectAll"))
			it.DisconnectAll, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewebpayPaymentRelateToOneInput(ctx context.Context, obj interface{}) (model.NewebpayPaymentRelateToOneInput, error) {
	var it model.NewebpayPaymentRelateToOneInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "create":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create"))
			it.Create, err = ec.unmarshalOnewebpayPaymentCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "connect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connect"))
			it.Connect, err = ec.unmarshalOnewebpayPaymentWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentWhereUniqueInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "disconnect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disconnect"))
			it.Disconnect, err = ec.unmarshalOnewebpayPaymentWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentWhereUniqueInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "disconnectAll":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disconnectAll"))
			it.DisconnectAll, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewebpayPaymentUpdateInput(ctx context.Context, obj interface{}) (model.NewebpayPaymentUpdateInput, error) {
	var it model.NewebpayPaymentUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "subscription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription"))
			it.Subscription, err = ec.unmarshalOsubscriptionRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoice":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoice"))
			it.Invoice, err = ec.unmarshalOinvoiceRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod"))
			it.PaymentMethod, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTime"))
			it.PaymentTime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tradeNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tradeNumber"))
			it.TradeNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchantId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantId"))
			it.MerchantID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber"))
			it.OrderNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenUseStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenUseStatus"))
			it.TokenUseStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "respondCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("respondCode"))
			it.RespondCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ECI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ECI"))
			it.Eci, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authCode"))
			it.AuthCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authBank":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authBank"))
			it.AuthBank, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoLastFour":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoLastFour"))
			it.CardInfoLastFour, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoFirstSix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoFirstSix"))
			it.CardInfoFirstSix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoExp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoExp"))
			it.CardInfoExp, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewebpayPaymentWhereInput(ctx context.Context, obj interface{}) (model.NewebpayPaymentWhereInput, error) {
	var it model.NewebpayPaymentWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOnewebpayPaymentWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOnewebpayPaymentWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not"))
			it.IDNot, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription"))
			it.Subscription, err = ec.unmarshalOsubscriptionWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscription_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription_is_null"))
			it.SubscriptionIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoice":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoice"))
			it.Invoice, err = ec.unmarshalOinvoiceWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoice_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoice_is_null"))
			it.InvoiceIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_not"))
			it.AmountNot, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_lt"))
			it.AmountLt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_lte"))
			it.AmountLte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_gt"))
			it.AmountGt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_gte"))
			it.AmountGte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_in"))
			it.AmountIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_not_in"))
			it.AmountNotIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_not"))
			it.StatusNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_contains"))
			it.StatusContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_not_contains"))
			it.StatusNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_starts_with"))
			it.StatusStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_not_starts_with"))
			it.StatusNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_ends_with"))
			it.StatusEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_not_ends_with"))
			it.StatusNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_i"))
			it.StatusI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_not_i"))
			it.StatusNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_contains_i"))
			it.StatusContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_not_contains_i"))
			it.StatusNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_starts_with_i"))
			it.StatusStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_not_starts_with_i"))
			it.StatusNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_ends_with_i"))
			it.StatusEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_not_ends_with_i"))
			it.StatusNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_in"))
			it.StatusIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_not_in"))
			it.StatusNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod"))
			it.PaymentMethod, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod_not"))
			it.PaymentMethodNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod_contains"))
			it.PaymentMethodContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod_not_contains"))
			it.PaymentMethodNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod_starts_with"))
			it.PaymentMethodStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod_not_starts_with"))
			it.PaymentMethodNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod_ends_with"))
			it.PaymentMethodEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod_not_ends_with"))
			it.PaymentMethodNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod_i"))
			it.PaymentMethodI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod_not_i"))
			it.PaymentMethodNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod_contains_i"))
			it.PaymentMethodContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod_not_contains_i"))
			it.PaymentMethodNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod_starts_with_i"))
			it.PaymentMethodStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod_not_starts_with_i"))
			it.PaymentMethodNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod_ends_with_i"))
			it.PaymentMethodEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod_not_ends_with_i"))
			it.PaymentMethodNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod_in"))
			it.PaymentMethodIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod_not_in"))
			it.PaymentMethodNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTime"))
			it.PaymentTime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTime_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTime_not"))
			it.PaymentTimeNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTime_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTime_lt"))
			it.PaymentTimeLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTime_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTime_lte"))
			it.PaymentTimeLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTime_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTime_gt"))
			it.PaymentTimeGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTime_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTime_gte"))
			it.PaymentTimeGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTime_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTime_in"))
			it.PaymentTimeIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTime_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTime_not_in"))
			it.PaymentTimeNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tradeNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tradeNumber"))
			it.TradeNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tradeNumber_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tradeNumber_not"))
			it.TradeNumberNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tradeNumber_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tradeNumber_contains"))
			it.TradeNumberContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tradeNumber_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tradeNumber_not_contains"))
			it.TradeNumberNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tradeNumber_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tradeNumber_starts_with"))
			it.TradeNumberStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tradeNumber_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tradeNumber_not_starts_with"))
			it.TradeNumberNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tradeNumber_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tradeNumber_ends_with"))
			it.TradeNumberEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tradeNumber_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tradeNumber_not_ends_with"))
			it.TradeNumberNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tradeNumber_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tradeNumber_i"))
			it.TradeNumberI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tradeNumber_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tradeNumber_not_i"))
			it.TradeNumberNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tradeNumber_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tradeNumber_contains_i"))
			it.TradeNumberContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tradeNumber_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tradeNumber_not_contains_i"))
			it.TradeNumberNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tradeNumber_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tradeNumber_starts_with_i"))
			it.TradeNumberStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tradeNumber_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tradeNumber_not_starts_with_i"))
			it.TradeNumberNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tradeNumber_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tradeNumber_ends_with_i"))
			it.TradeNumberEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tradeNumber_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tradeNumber_not_ends_with_i"))
			it.TradeNumberNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tradeNumber_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tradeNumber_in"))
			it.TradeNumberIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tradeNumber_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tradeNumber_not_in"))
			it.TradeNumberNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_not"))
			it.MessageNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_contains"))
			it.MessageContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_not_contains"))
			it.MessageNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_starts_with"))
			it.MessageStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_not_starts_with"))
			it.MessageNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_ends_with"))
			it.MessageEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_not_ends_with"))
			it.MessageNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_i"))
			it.MessageI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_not_i"))
			it.MessageNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_contains_i"))
			it.MessageContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_not_contains_i"))
			it.MessageNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_starts_with_i"))
			it.MessageStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_not_starts_with_i"))
			it.MessageNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_ends_with_i"))
			it.MessageEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_not_ends_with_i"))
			it.MessageNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_in"))
			it.MessageIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_not_in"))
			it.MessageNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchantId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantId"))
			it.MerchantID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchantId_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantId_not"))
			it.MerchantIDNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchantId_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantId_contains"))
			it.MerchantIDContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchantId_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantId_not_contains"))
			it.MerchantIDNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchantId_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantId_starts_with"))
			it.MerchantIDStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchantId_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantId_not_starts_with"))
			it.MerchantIDNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchantId_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantId_ends_with"))
			it.MerchantIDEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchantId_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantId_not_ends_with"))
			it.MerchantIDNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchantId_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantId_i"))
			it.MerchantIDI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchantId_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantId_not_i"))
			it.MerchantIDNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchantId_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantId_contains_i"))
			it.MerchantIDContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchantId_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantId_not_contains_i"))
			it.MerchantIDNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchantId_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantId_starts_with_i"))
			it.MerchantIDStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchantId_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantId_not_starts_with_i"))
			it.MerchantIDNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchantId_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantId_ends_with_i"))
			it.MerchantIDEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchantId_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantId_not_ends_with_i"))
			it.MerchantIDNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchantId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantId_in"))
			it.MerchantIDIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchantId_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantId_not_in"))
			it.MerchantIDNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber"))
			it.OrderNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not"))
			it.OrderNumberNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_contains"))
			it.OrderNumberContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not_contains"))
			it.OrderNumberNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_starts_with"))
			it.OrderNumberStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not_starts_with"))
			it.OrderNumberNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_ends_with"))
			it.OrderNumberEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not_ends_with"))
			it.OrderNumberNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_i"))
			it.OrderNumberI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not_i"))
			it.OrderNumberNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_contains_i"))
			it.OrderNumberContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not_contains_i"))
			it.OrderNumberNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_starts_with_i"))
			it.OrderNumberStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not_starts_with_i"))
			it.OrderNumberNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_ends_with_i"))
			it.OrderNumberEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not_ends_with_i"))
			it.OrderNumberNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_in"))
			it.OrderNumberIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not_in"))
			it.OrderNumberNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenUseStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenUseStatus"))
			it.TokenUseStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenUseStatus_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenUseStatus_not"))
			it.TokenUseStatusNot, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenUseStatus_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenUseStatus_lt"))
			it.TokenUseStatusLt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenUseStatus_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenUseStatus_lte"))
			it.TokenUseStatusLte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenUseStatus_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenUseStatus_gt"))
			it.TokenUseStatusGt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenUseStatus_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenUseStatus_gte"))
			it.TokenUseStatusGte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenUseStatus_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenUseStatus_in"))
			it.TokenUseStatusIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenUseStatus_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenUseStatus_not_in"))
			it.TokenUseStatusNotIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "respondCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("respondCode"))
			it.RespondCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "respondCode_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("respondCode_not"))
			it.RespondCodeNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "respondCode_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("respondCode_contains"))
			it.RespondCodeContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "respondCode_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("respondCode_not_contains"))
			it.RespondCodeNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "respondCode_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("respondCode_starts_with"))
			it.RespondCodeStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "respondCode_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("respondCode_not_starts_with"))
			it.RespondCodeNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "respondCode_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("respondCode_ends_with"))
			it.RespondCodeEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "respondCode_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("respondCode_not_ends_with"))
			it.RespondCodeNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "respondCode_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("respondCode_i"))
			it.RespondCodeI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "respondCode_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("respondCode_not_i"))
			it.RespondCodeNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "respondCode_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("respondCode_contains_i"))
			it.RespondCodeContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "respondCode_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("respondCode_not_contains_i"))
			it.RespondCodeNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "respondCode_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("respondCode_starts_with_i"))
			it.RespondCodeStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "respondCode_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("respondCode_not_starts_with_i"))
			it.RespondCodeNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "respondCode_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("respondCode_ends_with_i"))
			it.RespondCodeEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "respondCode_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("respondCode_not_ends_with_i"))
			it.RespondCodeNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "respondCode_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("respondCode_in"))
			it.RespondCodeIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "respondCode_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("respondCode_not_in"))
			it.RespondCodeNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ECI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ECI"))
			it.Eci, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ECI_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ECI_not"))
			it.EciNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ECI_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ECI_contains"))
			it.EciContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ECI_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ECI_not_contains"))
			it.EciNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ECI_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ECI_starts_with"))
			it.EciStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ECI_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ECI_not_starts_with"))
			it.EciNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ECI_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ECI_ends_with"))
			it.EciEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ECI_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ECI_not_ends_with"))
			it.EciNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ECI_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ECI_i"))
			it.EciI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ECI_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ECI_not_i"))
			it.EciNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ECI_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ECI_contains_i"))
			it.EciContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ECI_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ECI_not_contains_i"))
			it.EciNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ECI_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ECI_starts_with_i"))
			it.EciStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ECI_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ECI_not_starts_with_i"))
			it.EciNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ECI_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ECI_ends_with_i"))
			it.EciEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ECI_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ECI_not_ends_with_i"))
			it.EciNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ECI_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ECI_in"))
			it.EciIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ECI_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ECI_not_in"))
			it.EciNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authCode"))
			it.AuthCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authCode_not"))
			it.AuthCodeNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authCode_contains"))
			it.AuthCodeContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authCode_not_contains"))
			it.AuthCodeNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authCode_starts_with"))
			it.AuthCodeStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authCode_not_starts_with"))
			it.AuthCodeNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authCode_ends_with"))
			it.AuthCodeEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authCode_not_ends_with"))
			it.AuthCodeNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authCode_i"))
			it.AuthCodeI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authCode_not_i"))
			it.AuthCodeNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authCode_contains_i"))
			it.AuthCodeContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authCode_not_contains_i"))
			it.AuthCodeNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authCode_starts_with_i"))
			it.AuthCodeStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authCode_not_starts_with_i"))
			it.AuthCodeNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authCode_ends_with_i"))
			it.AuthCodeEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authCode_not_ends_with_i"))
			it.AuthCodeNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authCode_in"))
			it.AuthCodeIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authCode_not_in"))
			it.AuthCodeNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authBank":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authBank"))
			it.AuthBank, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authBank_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authBank_not"))
			it.AuthBankNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authBank_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authBank_contains"))
			it.AuthBankContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authBank_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authBank_not_contains"))
			it.AuthBankNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authBank_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authBank_starts_with"))
			it.AuthBankStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authBank_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authBank_not_starts_with"))
			it.AuthBankNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authBank_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authBank_ends_with"))
			it.AuthBankEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authBank_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authBank_not_ends_with"))
			it.AuthBankNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authBank_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authBank_i"))
			it.AuthBankI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authBank_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authBank_not_i"))
			it.AuthBankNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authBank_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authBank_contains_i"))
			it.AuthBankContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authBank_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authBank_not_contains_i"))
			it.AuthBankNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authBank_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authBank_starts_with_i"))
			it.AuthBankStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authBank_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authBank_not_starts_with_i"))
			it.AuthBankNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authBank_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authBank_ends_with_i"))
			it.AuthBankEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authBank_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authBank_not_ends_with_i"))
			it.AuthBankNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authBank_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authBank_in"))
			it.AuthBankIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authBank_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authBank_not_in"))
			it.AuthBankNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoLastFour":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoLastFour"))
			it.CardInfoLastFour, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoLastFour_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoLastFour_not"))
			it.CardInfoLastFourNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoLastFour_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoLastFour_contains"))
			it.CardInfoLastFourContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoLastFour_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoLastFour_not_contains"))
			it.CardInfoLastFourNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoLastFour_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoLastFour_starts_with"))
			it.CardInfoLastFourStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoLastFour_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoLastFour_not_starts_with"))
			it.CardInfoLastFourNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoLastFour_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoLastFour_ends_with"))
			it.CardInfoLastFourEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoLastFour_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoLastFour_not_ends_with"))
			it.CardInfoLastFourNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoLastFour_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoLastFour_i"))
			it.CardInfoLastFourI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoLastFour_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoLastFour_not_i"))
			it.CardInfoLastFourNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoLastFour_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoLastFour_contains_i"))
			it.CardInfoLastFourContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoLastFour_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoLastFour_not_contains_i"))
			it.CardInfoLastFourNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoLastFour_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoLastFour_starts_with_i"))
			it.CardInfoLastFourStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoLastFour_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoLastFour_not_starts_with_i"))
			it.CardInfoLastFourNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoLastFour_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoLastFour_ends_with_i"))
			it.CardInfoLastFourEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoLastFour_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoLastFour_not_ends_with_i"))
			it.CardInfoLastFourNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoLastFour_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoLastFour_in"))
			it.CardInfoLastFourIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoLastFour_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoLastFour_not_in"))
			it.CardInfoLastFourNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoFirstSix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoFirstSix"))
			it.CardInfoFirstSix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoFirstSix_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoFirstSix_not"))
			it.CardInfoFirstSixNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoFirstSix_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoFirstSix_contains"))
			it.CardInfoFirstSixContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoFirstSix_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoFirstSix_not_contains"))
			it.CardInfoFirstSixNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoFirstSix_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoFirstSix_starts_with"))
			it.CardInfoFirstSixStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoFirstSix_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoFirstSix_not_starts_with"))
			it.CardInfoFirstSixNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoFirstSix_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoFirstSix_ends_with"))
			it.CardInfoFirstSixEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoFirstSix_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoFirstSix_not_ends_with"))
			it.CardInfoFirstSixNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoFirstSix_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoFirstSix_i"))
			it.CardInfoFirstSixI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoFirstSix_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoFirstSix_not_i"))
			it.CardInfoFirstSixNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoFirstSix_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoFirstSix_contains_i"))
			it.CardInfoFirstSixContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoFirstSix_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoFirstSix_not_contains_i"))
			it.CardInfoFirstSixNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoFirstSix_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoFirstSix_starts_with_i"))
			it.CardInfoFirstSixStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoFirstSix_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoFirstSix_not_starts_with_i"))
			it.CardInfoFirstSixNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoFirstSix_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoFirstSix_ends_with_i"))
			it.CardInfoFirstSixEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoFirstSix_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoFirstSix_not_ends_with_i"))
			it.CardInfoFirstSixNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoFirstSix_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoFirstSix_in"))
			it.CardInfoFirstSixIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoFirstSix_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoFirstSix_not_in"))
			it.CardInfoFirstSixNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoExp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoExp"))
			it.CardInfoExp, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoExp_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoExp_not"))
			it.CardInfoExpNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoExp_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoExp_contains"))
			it.CardInfoExpContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoExp_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoExp_not_contains"))
			it.CardInfoExpNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoExp_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoExp_starts_with"))
			it.CardInfoExpStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoExp_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoExp_not_starts_with"))
			it.CardInfoExpNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoExp_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoExp_ends_with"))
			it.CardInfoExpEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoExp_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoExp_not_ends_with"))
			it.CardInfoExpNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoExp_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoExp_i"))
			it.CardInfoExpI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoExp_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoExp_not_i"))
			it.CardInfoExpNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoExp_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoExp_contains_i"))
			it.CardInfoExpContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoExp_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoExp_not_contains_i"))
			it.CardInfoExpNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoExp_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoExp_starts_with_i"))
			it.CardInfoExpStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoExp_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoExp_not_starts_with_i"))
			it.CardInfoExpNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoExp_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoExp_ends_with_i"))
			it.CardInfoExpEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoExp_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoExp_not_ends_with_i"))
			it.CardInfoExpNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoExp_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoExp_in"))
			it.CardInfoExpIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cardInfoExp_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardInfoExp_not_in"))
			it.CardInfoExpNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not"))
			it.CreatedAtNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not_in"))
			it.CreatedAtNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not"))
			it.UpdatedAtNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not_in"))
			it.UpdatedAtNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_is_null"))
			it.CreatedByIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_is_null"))
			it.UpdatedByIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnewebpayPaymentWhereUniqueInput(ctx context.Context, obj interface{}) (model.NewebpayPaymentWhereUniqueInput, error) {
	var it model.NewebpayPaymentWhereUniqueInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber"))
			it.OrderNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputpromotionCreateInput(ctx context.Context, obj interface{}) (model.PromotionCreateInput, error) {
	var it model.PromotionCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			it.Code, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan"))
			it.Plan, err = ec.unmarshalOpromotionPlanType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionPlanType(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOpromotionStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionStateType(ctx, v)
			if err != nil {
				return it, err
			}
		case "startAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startAt"))
			it.StartAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endAt"))
			it.EndAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "discount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discount"))
			it.Discount, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputpromotionOrderByInput(ctx context.Context, obj interface{}) (model.PromotionOrderByInput, error) {
	var it model.PromotionOrderByInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			it.Code, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan"))
			it.Plan, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "startAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startAt"))
			it.StartAt, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "endAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endAt"))
			it.EndAt, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "discount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discount"))
			it.Discount, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputpromotionUpdateInput(ctx context.Context, obj interface{}) (model.PromotionUpdateInput, error) {
	var it model.PromotionUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			it.Code, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan"))
			it.Plan, err = ec.unmarshalOpromotionPlanType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionPlanType(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOpromotionStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionStateType(ctx, v)
			if err != nil {
				return it, err
			}
		case "startAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startAt"))
			it.StartAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endAt"))
			it.EndAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "discount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discount"))
			it.Discount, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputpromotionWhereInput(ctx context.Context, obj interface{}) (model.PromotionWhereInput, error) {
	var it model.PromotionWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOpromotionWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOpromotionWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not"))
			it.IDNot, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			it.Code, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_not"))
			it.CodeNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_contains"))
			it.CodeContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_not_contains"))
			it.CodeNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_starts_with"))
			it.CodeStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_not_starts_with"))
			it.CodeNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_ends_with"))
			it.CodeEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_not_ends_with"))
			it.CodeNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_i"))
			it.CodeI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_not_i"))
			it.CodeNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_contains_i"))
			it.CodeContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_not_contains_i"))
			it.CodeNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_starts_with_i"))
			it.CodeStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_not_starts_with_i"))
			it.CodeNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_ends_with_i"))
			it.CodeEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_not_ends_with_i"))
			it.CodeNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_in"))
			it.CodeIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code_not_in"))
			it.CodeNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan"))
			it.Plan, err = ec.unmarshalOpromotionPlanType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionPlanType(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_not"))
			it.PlanNot, err = ec.unmarshalOpromotionPlanType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionPlanType(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_in"))
			it.PlanIn, err = ec.unmarshalOpromotionPlanType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionPlanType(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_not_in"))
			it.PlanNotIn, err = ec.unmarshalOpromotionPlanType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionPlanType(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOpromotionStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionStateType(ctx, v)
			if err != nil {
				return it, err
			}
		case "state_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state_not"))
			it.StateNot, err = ec.unmarshalOpromotionStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionStateType(ctx, v)
			if err != nil {
				return it, err
			}
		case "state_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state_in"))
			it.StateIn, err = ec.unmarshalOpromotionStateType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionStateType(ctx, v)
			if err != nil {
				return it, err
			}
		case "state_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state_not_in"))
			it.StateNotIn, err = ec.unmarshalOpromotionStateType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionStateType(ctx, v)
			if err != nil {
				return it, err
			}
		case "startAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startAt"))
			it.StartAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startAt_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startAt_not"))
			it.StartAtNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startAt_lt"))
			it.StartAtLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startAt_lte"))
			it.StartAtLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startAt_gt"))
			it.StartAtGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startAt_gte"))
			it.StartAtGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startAt_in"))
			it.StartAtIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startAt_not_in"))
			it.StartAtNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endAt"))
			it.EndAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endAt_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endAt_not"))
			it.EndAtNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endAt_lt"))
			it.EndAtLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endAt_lte"))
			it.EndAtLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endAt_gt"))
			it.EndAtGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endAt_gte"))
			it.EndAtGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endAt_in"))
			it.EndAtIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endAt_not_in"))
			it.EndAtNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "discount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discount"))
			it.Discount, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "discount_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discount_not"))
			it.DiscountNot, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "discount_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discount_lt"))
			it.DiscountLt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "discount_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discount_lte"))
			it.DiscountLte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "discount_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discount_gt"))
			it.DiscountGt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "discount_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discount_gte"))
			it.DiscountGte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "discount_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discount_in"))
			it.DiscountIn, err = ec.unmarshalOFloat2ᚕᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "discount_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discount_not_in"))
			it.DiscountNotIn, err = ec.unmarshalOFloat2ᚕᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not"))
			it.CreatedAtNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not_in"))
			it.CreatedAtNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not"))
			it.UpdatedAtNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not_in"))
			it.UpdatedAtNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_is_null"))
			it.CreatedByIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_is_null"))
			it.UpdatedByIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputpromotionWhereUniqueInput(ctx context.Context, obj interface{}) (model.PromotionWhereUniqueInput, error) {
	var it model.PromotionWhereUniqueInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsubscriptionCreateInput(ctx context.Context, obj interface{}) (model.SubscriptionCreateInput, error) {
	var it model.SubscriptionCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "member":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("member"))
			it.Member, err = ec.unmarshalOmemberRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod"))
			it.PaymentMethod, err = ec.unmarshalOsubscriptionPaymentMethodType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionPaymentMethodType(ctx, v)
			if err != nil {
				return it, err
			}
		case "newebpayPayment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newebpayPayment"))
			it.NewebpayPayment, err = ec.unmarshalOnewebpayPaymentRelateToManyInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentRelateToManyInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "applepayPayment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applepayPayment"))
			it.ApplepayPayment, err = ec.unmarshalOapplepayPaymentRelateToManyInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentRelateToManyInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "androidpayPayment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("androidpayPayment"))
			it.AndroidpayPayment, err = ec.unmarshalOandroidpayPaymentRelateToManyInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentRelateToManyInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOsubscriptionStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionStatusType(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			it.Currency, err = ec.unmarshalOsubscriptionCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionCurrencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment"))
			it.Comment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber"))
			it.OrderNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isActive"))
			it.IsActive, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isCanceled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isCanceled"))
			it.IsCanceled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "frequency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frequency"))
			it.Frequency, err = ec.unmarshalOsubscriptionFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionFrequencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nextFrequency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextFrequency"))
			it.NextFrequency, err = ec.unmarshalOsubscriptionNextFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionNextFrequencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFailureTimes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFailureTimes"))
			it.PeriodFailureTimes, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodLastSuccessDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodLastSuccessDatetime"))
			it.PeriodLastSuccessDatetime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodNextPayDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodNextPayDatetime"))
			it.PeriodNextPayDatetime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodCreateDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodCreateDatetime"))
			it.PeriodCreateDatetime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFirstDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFirstDatetime"))
			it.PeriodFirstDatetime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodEndDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodEndDatetime"))
			it.PeriodEndDatetime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "changePlanDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changePlanDatetime"))
			it.ChangePlanDatetime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "promoteId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promoteId"))
			it.PromoteID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId"))
			it.PostID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeStartDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeStartDatetime"))
			it.OneTimeStartDatetime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeEndDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeEndDatetime"))
			it.OneTimeEndDatetime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "newebpayPaymentInfo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newebpayPaymentInfo"))
			it.NewebpayPaymentInfo, err = ec.unmarshalOnewebpayPaymentInfoRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentInfoRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "loveCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loveCode"))
			it.LoveCode, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierType"))
			it.CarrierType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum"))
			it.CarrierNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName"))
			it.BuyerName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN"))
			it.BuyerUbn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsubscriptionHistoryCreateInput(ctx context.Context, obj interface{}) (model.SubscriptionHistoryCreateInput, error) {
	var it model.SubscriptionHistoryCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "subscription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription"))
			it.Subscription, err = ec.unmarshalOsubscriptionRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscriptionCreatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptionCreatedAt"))
			it.SubscriptionCreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscriptionUpdatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptionUpdatedAt"))
			it.SubscriptionUpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "member":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("member"))
			it.Member, err = ec.unmarshalOmemberRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOsubscriptionHistoryStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryStatusType(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			it.Currency, err = ec.unmarshalOsubscriptionHistoryCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryCurrencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber"))
			it.OrderNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "frequency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frequency"))
			it.Frequency, err = ec.unmarshalOsubscriptionHistoryFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryFrequencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue"))
			it.TokenValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife"))
			it.TokenLife, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm"))
			it.TokenTerm, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodLastSuccessDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodLastSuccessDate"))
			it.PeriodLastSuccessDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodNextPayDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodNextPayDate"))
			it.PeriodNextPayDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFirstDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFirstDate"))
			it.PeriodFirstDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "changePlanDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changePlanDatetime"))
			it.ChangePlanDatetime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "promoteId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promoteId"))
			it.PromoteID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId"))
			it.PostID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeStartDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeStartDate"))
			it.OneTimeStartDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeEndDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeEndDate"))
			it.OneTimeEndDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "action":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("action"))
			it.Action, err = ec.unmarshalOsubscriptionHistoryActionType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryActionType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsubscriptionHistoryOrderByInput(ctx context.Context, obj interface{}) (model.SubscriptionHistoryOrderByInput, error) {
	var it model.SubscriptionHistoryOrderByInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscriptionCreatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptionCreatedAt"))
			it.SubscriptionCreatedAt, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscriptionUpdatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptionUpdatedAt"))
			it.SubscriptionUpdatedAt, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			it.Currency, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber"))
			it.OrderNumber, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "frequency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frequency"))
			it.Frequency, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue"))
			it.TokenValue, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife"))
			it.TokenLife, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm"))
			it.TokenTerm, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodLastSuccessDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodLastSuccessDate"))
			it.PeriodLastSuccessDate, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodNextPayDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodNextPayDate"))
			it.PeriodNextPayDate, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFirstDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFirstDate"))
			it.PeriodFirstDate, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "changePlanDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changePlanDatetime"))
			it.ChangePlanDatetime, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "promoteId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promoteId"))
			it.PromoteID, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId"))
			it.PostID, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeStartDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeStartDate"))
			it.OneTimeStartDate, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeEndDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeEndDate"))
			it.OneTimeEndDate, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "action":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("action"))
			it.Action, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsubscriptionHistoryUpdateInput(ctx context.Context, obj interface{}) (model.SubscriptionHistoryUpdateInput, error) {
	var it model.SubscriptionHistoryUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "subscription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription"))
			it.Subscription, err = ec.unmarshalOsubscriptionRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscriptionCreatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptionCreatedAt"))
			it.SubscriptionCreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscriptionUpdatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptionUpdatedAt"))
			it.SubscriptionUpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "member":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("member"))
			it.Member, err = ec.unmarshalOmemberRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOsubscriptionHistoryStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryStatusType(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			it.Currency, err = ec.unmarshalOsubscriptionHistoryCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryCurrencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber"))
			it.OrderNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "frequency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frequency"))
			it.Frequency, err = ec.unmarshalOsubscriptionHistoryFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryFrequencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue"))
			it.TokenValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife"))
			it.TokenLife, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm"))
			it.TokenTerm, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodLastSuccessDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodLastSuccessDate"))
			it.PeriodLastSuccessDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodNextPayDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodNextPayDate"))
			it.PeriodNextPayDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFirstDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFirstDate"))
			it.PeriodFirstDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "changePlanDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changePlanDatetime"))
			it.ChangePlanDatetime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "promoteId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promoteId"))
			it.PromoteID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId"))
			it.PostID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeStartDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeStartDate"))
			it.OneTimeStartDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeEndDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeEndDate"))
			it.OneTimeEndDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "action":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("action"))
			it.Action, err = ec.unmarshalOsubscriptionHistoryActionType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryActionType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsubscriptionHistoryWhereInput(ctx context.Context, obj interface{}) (model.SubscriptionHistoryWhereInput, error) {
	var it model.SubscriptionHistoryWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOsubscriptionHistoryWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOsubscriptionHistoryWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not"))
			it.IDNot, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription"))
			it.Subscription, err = ec.unmarshalOsubscriptionWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscription_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription_is_null"))
			it.SubscriptionIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscriptionCreatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptionCreatedAt"))
			it.SubscriptionCreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscriptionCreatedAt_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptionCreatedAt_not"))
			it.SubscriptionCreatedAtNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscriptionCreatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptionCreatedAt_lt"))
			it.SubscriptionCreatedAtLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscriptionCreatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptionCreatedAt_lte"))
			it.SubscriptionCreatedAtLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscriptionCreatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptionCreatedAt_gt"))
			it.SubscriptionCreatedAtGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscriptionCreatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptionCreatedAt_gte"))
			it.SubscriptionCreatedAtGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscriptionCreatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptionCreatedAt_in"))
			it.SubscriptionCreatedAtIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscriptionCreatedAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptionCreatedAt_not_in"))
			it.SubscriptionCreatedAtNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscriptionUpdatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptionUpdatedAt"))
			it.SubscriptionUpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscriptionUpdatedAt_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptionUpdatedAt_not"))
			it.SubscriptionUpdatedAtNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscriptionUpdatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptionUpdatedAt_lt"))
			it.SubscriptionUpdatedAtLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscriptionUpdatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptionUpdatedAt_lte"))
			it.SubscriptionUpdatedAtLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscriptionUpdatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptionUpdatedAt_gt"))
			it.SubscriptionUpdatedAtGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscriptionUpdatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptionUpdatedAt_gte"))
			it.SubscriptionUpdatedAtGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscriptionUpdatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptionUpdatedAt_in"))
			it.SubscriptionUpdatedAtIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscriptionUpdatedAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptionUpdatedAt_not_in"))
			it.SubscriptionUpdatedAtNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "member":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("member"))
			it.Member, err = ec.unmarshalOmemberWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "member_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("member_is_null"))
			it.MemberIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOsubscriptionHistoryStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryStatusType(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_not"))
			it.StatusNot, err = ec.unmarshalOsubscriptionHistoryStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryStatusType(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_in"))
			it.StatusIn, err = ec.unmarshalOsubscriptionHistoryStatusType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryStatusType(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_not_in"))
			it.StatusNotIn, err = ec.unmarshalOsubscriptionHistoryStatusType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryStatusType(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_not"))
			it.AmountNot, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_lt"))
			it.AmountLt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_lte"))
			it.AmountLte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_gt"))
			it.AmountGt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_gte"))
			it.AmountGte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_in"))
			it.AmountIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_not_in"))
			it.AmountNotIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			it.Currency, err = ec.unmarshalOsubscriptionHistoryCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryCurrencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency_not"))
			it.CurrencyNot, err = ec.unmarshalOsubscriptionHistoryCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryCurrencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency_in"))
			it.CurrencyIn, err = ec.unmarshalOsubscriptionHistoryCurrencyType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryCurrencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency_not_in"))
			it.CurrencyNotIn, err = ec.unmarshalOsubscriptionHistoryCurrencyType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryCurrencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not"))
			it.DescNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_contains"))
			it.DescContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_contains"))
			it.DescNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_starts_with"))
			it.DescStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_starts_with"))
			it.DescNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_ends_with"))
			it.DescEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_ends_with"))
			it.DescNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_i"))
			it.DescI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_i"))
			it.DescNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_contains_i"))
			it.DescContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_contains_i"))
			it.DescNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_starts_with_i"))
			it.DescStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_starts_with_i"))
			it.DescNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_ends_with_i"))
			it.DescEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_ends_with_i"))
			it.DescNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_in"))
			it.DescIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_in"))
			it.DescNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not"))
			it.EmailNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_contains"))
			it.EmailContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_contains"))
			it.EmailNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_starts_with"))
			it.EmailStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_starts_with"))
			it.EmailNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_ends_with"))
			it.EmailEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_ends_with"))
			it.EmailNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_i"))
			it.EmailI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_i"))
			it.EmailNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_contains_i"))
			it.EmailContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_contains_i"))
			it.EmailNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_starts_with_i"))
			it.EmailStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_starts_with_i"))
			it.EmailNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_ends_with_i"))
			it.EmailEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_ends_with_i"))
			it.EmailNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_in"))
			it.EmailIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_in"))
			it.EmailNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber"))
			it.OrderNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not"))
			it.OrderNumberNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_contains"))
			it.OrderNumberContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not_contains"))
			it.OrderNumberNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_starts_with"))
			it.OrderNumberStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not_starts_with"))
			it.OrderNumberNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_ends_with"))
			it.OrderNumberEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not_ends_with"))
			it.OrderNumberNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_i"))
			it.OrderNumberI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not_i"))
			it.OrderNumberNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_contains_i"))
			it.OrderNumberContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not_contains_i"))
			it.OrderNumberNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_starts_with_i"))
			it.OrderNumberStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not_starts_with_i"))
			it.OrderNumberNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_ends_with_i"))
			it.OrderNumberEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not_ends_with_i"))
			it.OrderNumberNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_in"))
			it.OrderNumberIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not_in"))
			it.OrderNumberNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "frequency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frequency"))
			it.Frequency, err = ec.unmarshalOsubscriptionHistoryFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryFrequencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "frequency_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frequency_not"))
			it.FrequencyNot, err = ec.unmarshalOsubscriptionHistoryFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryFrequencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "frequency_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frequency_in"))
			it.FrequencyIn, err = ec.unmarshalOsubscriptionHistoryFrequencyType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryFrequencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "frequency_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frequency_not_in"))
			it.FrequencyNotIn, err = ec.unmarshalOsubscriptionHistoryFrequencyType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryFrequencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue"))
			it.TokenValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_not"))
			it.TokenValueNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_contains"))
			it.TokenValueContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_not_contains"))
			it.TokenValueNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_starts_with"))
			it.TokenValueStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_not_starts_with"))
			it.TokenValueNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_ends_with"))
			it.TokenValueEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_not_ends_with"))
			it.TokenValueNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_i"))
			it.TokenValueI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_not_i"))
			it.TokenValueNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_contains_i"))
			it.TokenValueContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_not_contains_i"))
			it.TokenValueNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_starts_with_i"))
			it.TokenValueStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_not_starts_with_i"))
			it.TokenValueNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_ends_with_i"))
			it.TokenValueEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_not_ends_with_i"))
			it.TokenValueNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_in"))
			it.TokenValueIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenValue_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenValue_not_in"))
			it.TokenValueNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife"))
			it.TokenLife, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife_not"))
			it.TokenLifeNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife_contains"))
			it.TokenLifeContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife_not_contains"))
			it.TokenLifeNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife_starts_with"))
			it.TokenLifeStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife_not_starts_with"))
			it.TokenLifeNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife_ends_with"))
			it.TokenLifeEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife_not_ends_with"))
			it.TokenLifeNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife_i"))
			it.TokenLifeI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife_not_i"))
			it.TokenLifeNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife_contains_i"))
			it.TokenLifeContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife_not_contains_i"))
			it.TokenLifeNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife_starts_with_i"))
			it.TokenLifeStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife_not_starts_with_i"))
			it.TokenLifeNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife_ends_with_i"))
			it.TokenLifeEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife_not_ends_with_i"))
			it.TokenLifeNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife_in"))
			it.TokenLifeIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenLife_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenLife_not_in"))
			it.TokenLifeNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm"))
			it.TokenTerm, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_not"))
			it.TokenTermNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_contains"))
			it.TokenTermContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_not_contains"))
			it.TokenTermNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_starts_with"))
			it.TokenTermStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_not_starts_with"))
			it.TokenTermNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_ends_with"))
			it.TokenTermEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_not_ends_with"))
			it.TokenTermNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_i"))
			it.TokenTermI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_not_i"))
			it.TokenTermNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_contains_i"))
			it.TokenTermContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_not_contains_i"))
			it.TokenTermNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_starts_with_i"))
			it.TokenTermStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_not_starts_with_i"))
			it.TokenTermNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_ends_with_i"))
			it.TokenTermEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_not_ends_with_i"))
			it.TokenTermNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_in"))
			it.TokenTermIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokenTerm_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenTerm_not_in"))
			it.TokenTermNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodLastSuccessDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodLastSuccessDate"))
			it.PeriodLastSuccessDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodLastSuccessDate_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodLastSuccessDate_not"))
			it.PeriodLastSuccessDateNot, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodLastSuccessDate_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodLastSuccessDate_lt"))
			it.PeriodLastSuccessDateLt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodLastSuccessDate_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodLastSuccessDate_lte"))
			it.PeriodLastSuccessDateLte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodLastSuccessDate_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodLastSuccessDate_gt"))
			it.PeriodLastSuccessDateGt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodLastSuccessDate_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodLastSuccessDate_gte"))
			it.PeriodLastSuccessDateGte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodLastSuccessDate_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodLastSuccessDate_in"))
			it.PeriodLastSuccessDateIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodLastSuccessDate_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodLastSuccessDate_not_in"))
			it.PeriodLastSuccessDateNotIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodNextPayDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodNextPayDate"))
			it.PeriodNextPayDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodNextPayDate_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodNextPayDate_not"))
			it.PeriodNextPayDateNot, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodNextPayDate_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodNextPayDate_lt"))
			it.PeriodNextPayDateLt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodNextPayDate_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodNextPayDate_lte"))
			it.PeriodNextPayDateLte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodNextPayDate_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodNextPayDate_gt"))
			it.PeriodNextPayDateGt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodNextPayDate_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodNextPayDate_gte"))
			it.PeriodNextPayDateGte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodNextPayDate_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodNextPayDate_in"))
			it.PeriodNextPayDateIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodNextPayDate_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodNextPayDate_not_in"))
			it.PeriodNextPayDateNotIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFirstDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFirstDate"))
			it.PeriodFirstDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFirstDate_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFirstDate_not"))
			it.PeriodFirstDateNot, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFirstDate_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFirstDate_lt"))
			it.PeriodFirstDateLt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFirstDate_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFirstDate_lte"))
			it.PeriodFirstDateLte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFirstDate_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFirstDate_gt"))
			it.PeriodFirstDateGt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFirstDate_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFirstDate_gte"))
			it.PeriodFirstDateGte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFirstDate_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFirstDate_in"))
			it.PeriodFirstDateIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFirstDate_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFirstDate_not_in"))
			it.PeriodFirstDateNotIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "changePlanDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changePlanDatetime"))
			it.ChangePlanDatetime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "changePlanDatetime_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changePlanDatetime_not"))
			it.ChangePlanDatetimeNot, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "changePlanDatetime_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changePlanDatetime_lt"))
			it.ChangePlanDatetimeLt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "changePlanDatetime_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changePlanDatetime_lte"))
			it.ChangePlanDatetimeLte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "changePlanDatetime_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changePlanDatetime_gt"))
			it.ChangePlanDatetimeGt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "changePlanDatetime_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changePlanDatetime_gte"))
			it.ChangePlanDatetimeGte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "changePlanDatetime_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changePlanDatetime_in"))
			it.ChangePlanDatetimeIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "changePlanDatetime_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changePlanDatetime_not_in"))
			it.ChangePlanDatetimeNotIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_not"))
			it.NoteNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_contains"))
			it.NoteContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_not_contains"))
			it.NoteNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_starts_with"))
			it.NoteStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_not_starts_with"))
			it.NoteNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_ends_with"))
			it.NoteEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_not_ends_with"))
			it.NoteNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_i"))
			it.NoteI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_not_i"))
			it.NoteNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_contains_i"))
			it.NoteContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_not_contains_i"))
			it.NoteNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_starts_with_i"))
			it.NoteStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_not_starts_with_i"))
			it.NoteNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_ends_with_i"))
			it.NoteEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_not_ends_with_i"))
			it.NoteNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_in"))
			it.NoteIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_not_in"))
			it.NoteNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "promoteId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promoteId"))
			it.PromoteID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "promoteId_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promoteId_not"))
			it.PromoteIDNot, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "promoteId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promoteId_lt"))
			it.PromoteIDLt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "promoteId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promoteId_lte"))
			it.PromoteIDLte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "promoteId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promoteId_gt"))
			it.PromoteIDGt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "promoteId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promoteId_gte"))
			it.PromoteIDGte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "promoteId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promoteId_in"))
			it.PromoteIDIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "promoteId_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promoteId_not_in"))
			it.PromoteIDNotIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId"))
			it.PostID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_not"))
			it.PostIDNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_contains"))
			it.PostIDContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_not_contains"))
			it.PostIDNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_starts_with"))
			it.PostIDStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_not_starts_with"))
			it.PostIDNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_ends_with"))
			it.PostIDEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_not_ends_with"))
			it.PostIDNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_i"))
			it.PostIDI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_not_i"))
			it.PostIDNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_contains_i"))
			it.PostIDContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_not_contains_i"))
			it.PostIDNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_starts_with_i"))
			it.PostIDStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_not_starts_with_i"))
			it.PostIDNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_ends_with_i"))
			it.PostIDEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_not_ends_with_i"))
			it.PostIDNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_in"))
			it.PostIDIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_not_in"))
			it.PostIDNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeStartDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeStartDate"))
			it.OneTimeStartDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeStartDate_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeStartDate_not"))
			it.OneTimeStartDateNot, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeStartDate_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeStartDate_lt"))
			it.OneTimeStartDateLt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeStartDate_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeStartDate_lte"))
			it.OneTimeStartDateLte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeStartDate_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeStartDate_gt"))
			it.OneTimeStartDateGt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeStartDate_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeStartDate_gte"))
			it.OneTimeStartDateGte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeStartDate_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeStartDate_in"))
			it.OneTimeStartDateIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeStartDate_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeStartDate_not_in"))
			it.OneTimeStartDateNotIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeEndDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeEndDate"))
			it.OneTimeEndDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeEndDate_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeEndDate_not"))
			it.OneTimeEndDateNot, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeEndDate_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeEndDate_lt"))
			it.OneTimeEndDateLt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeEndDate_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeEndDate_lte"))
			it.OneTimeEndDateLte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeEndDate_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeEndDate_gt"))
			it.OneTimeEndDateGt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeEndDate_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeEndDate_gte"))
			it.OneTimeEndDateGte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeEndDate_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeEndDate_in"))
			it.OneTimeEndDateIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeEndDate_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeEndDate_not_in"))
			it.OneTimeEndDateNotIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "action":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("action"))
			it.Action, err = ec.unmarshalOsubscriptionHistoryActionType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryActionType(ctx, v)
			if err != nil {
				return it, err
			}
		case "action_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("action_not"))
			it.ActionNot, err = ec.unmarshalOsubscriptionHistoryActionType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryActionType(ctx, v)
			if err != nil {
				return it, err
			}
		case "action_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("action_in"))
			it.ActionIn, err = ec.unmarshalOsubscriptionHistoryActionType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryActionType(ctx, v)
			if err != nil {
				return it, err
			}
		case "action_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("action_not_in"))
			it.ActionNotIn, err = ec.unmarshalOsubscriptionHistoryActionType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryActionType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsubscriptionHistoryWhereUniqueInput(ctx context.Context, obj interface{}) (model.SubscriptionHistoryWhereUniqueInput, error) {
	var it model.SubscriptionHistoryWhereUniqueInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsubscriptionOneTimeCreateInfo(ctx context.Context, obj interface{}) (model.SubscriptionOneTimeCreateInfo, error) {
	var it model.SubscriptionOneTimeCreateInfo
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "postSlug":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postSlug"))
			it.PostSlug, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "postTitle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postTitle"))
			it.PostTitle, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "returnToPath":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("returnToPath"))
			it.ReturnToPath, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsubscriptionOrderByInput(ctx context.Context, obj interface{}) (model.SubscriptionOrderByInput, error) {
	var it model.SubscriptionOrderByInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod"))
			it.PaymentMethod, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			it.Currency, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment"))
			it.Comment, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber"))
			it.OrderNumber, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isActive"))
			it.IsActive, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "isCanceled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isCanceled"))
			it.IsCanceled, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "frequency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frequency"))
			it.Frequency, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "nextFrequency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextFrequency"))
			it.NextFrequency, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFailureTimes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFailureTimes"))
			it.PeriodFailureTimes, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodLastSuccessDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodLastSuccessDatetime"))
			it.PeriodLastSuccessDatetime, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodNextPayDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodNextPayDatetime"))
			it.PeriodNextPayDatetime, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodCreateDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodCreateDatetime"))
			it.PeriodCreateDatetime, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFirstDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFirstDatetime"))
			it.PeriodFirstDatetime, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodEndDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodEndDatetime"))
			it.PeriodEndDatetime, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "changePlanDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changePlanDatetime"))
			it.ChangePlanDatetime, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "promoteId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promoteId"))
			it.PromoteID, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId"))
			it.PostID, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeStartDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeStartDatetime"))
			it.OneTimeStartDatetime, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeEndDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeEndDatetime"))
			it.OneTimeEndDatetime, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "loveCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loveCode"))
			it.LoveCode, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierType"))
			it.CarrierType, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum"))
			it.CarrierNum, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName"))
			it.BuyerName, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN"))
			it.BuyerUbn, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsubscriptionPrivateUpdateInput(ctx context.Context, obj interface{}) (model.SubscriptionPrivateUpdateInput, error) {
	var it model.SubscriptionPrivateUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "member":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("member"))
			it.Member, err = ec.unmarshalOmemberRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod"))
			it.PaymentMethod, err = ec.unmarshalOsubscriptionPaymentMethodType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionPaymentMethodType(ctx, v)
			if err != nil {
				return it, err
			}
		case "newebpayPayment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newebpayPayment"))
			it.NewebpayPayment, err = ec.unmarshalOnewebpayPaymentRelateToManyInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentRelateToManyInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "applepayPayment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applepayPayment"))
			it.ApplepayPayment, err = ec.unmarshalOapplepayPaymentRelateToManyInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentRelateToManyInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "androidpayPayment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("androidpayPayment"))
			it.AndroidpayPayment, err = ec.unmarshalOandroidpayPaymentRelateToManyInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentRelateToManyInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOsubscriptionStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionStatusType(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			it.Currency, err = ec.unmarshalOsubscriptionCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionCurrencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment"))
			it.Comment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber"))
			it.OrderNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isActive"))
			it.IsActive, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isCanceled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isCanceled"))
			it.IsCanceled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "frequency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frequency"))
			it.Frequency, err = ec.unmarshalOsubscriptionFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionFrequencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nextFrequency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextFrequency"))
			it.NextFrequency, err = ec.unmarshalOsubscriptionNextFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionNextFrequencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFailureTimes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFailureTimes"))
			it.PeriodFailureTimes, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodLastSuccessDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodLastSuccessDatetime"))
			it.PeriodLastSuccessDatetime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodNextPayDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodNextPayDatetime"))
			it.PeriodNextPayDatetime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodCreateDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodCreateDatetime"))
			it.PeriodCreateDatetime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFirstDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFirstDatetime"))
			it.PeriodFirstDatetime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodEndDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodEndDatetime"))
			it.PeriodEndDatetime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "changePlanDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changePlanDatetime"))
			it.ChangePlanDatetime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "promoteId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promoteId"))
			it.PromoteID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId"))
			it.PostID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeStartDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeStartDatetime"))
			it.OneTimeStartDatetime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeEndDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeEndDatetime"))
			it.OneTimeEndDatetime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "newebpayPaymentInfo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newebpayPaymentInfo"))
			it.NewebpayPaymentInfo, err = ec.unmarshalOnewebpayPaymentInfoRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentInfoRelateToOneInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "loveCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loveCode"))
			it.LoveCode, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierType"))
			it.CarrierType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum"))
			it.CarrierNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName"))
			it.BuyerName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN"))
			it.BuyerUbn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsubscriptionRecurringCreateInfo(ctx context.Context, obj interface{}) (model.SubscriptionRecurringCreateInfo, error) {
	var it model.SubscriptionRecurringCreateInfo
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "returnToPath":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("returnToPath"))
			it.ReturnToPath, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsubscriptionRelateToManyInput(ctx context.Context, obj interface{}) (model.SubscriptionRelateToManyInput, error) {
	var it model.SubscriptionRelateToManyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "create":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create"))
			it.Create, err = ec.unmarshalOsubscriptionCreateInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "connect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connect"))
			it.Connect, err = ec.unmarshalOsubscriptionWhereUniqueInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionWhereUniqueInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "disconnect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disconnect"))
			it.Disconnect, err = ec.unmarshalOsubscriptionWhereUniqueInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionWhereUniqueInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "disconnectAll":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disconnectAll"))
			it.DisconnectAll, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsubscriptionRelateToOneInput(ctx context.Context, obj interface{}) (model.SubscriptionRelateToOneInput, error) {
	var it model.SubscriptionRelateToOneInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "create":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create"))
			it.Create, err = ec.unmarshalOsubscriptionCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "connect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connect"))
			it.Connect, err = ec.unmarshalOsubscriptionWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionWhereUniqueInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "disconnect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disconnect"))
			it.Disconnect, err = ec.unmarshalOsubscriptionWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionWhereUniqueInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "disconnectAll":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disconnectAll"))
			it.DisconnectAll, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsubscriptionWhereInput(ctx context.Context, obj interface{}) (model.SubscriptionWhereInput, error) {
	var it model.SubscriptionWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOsubscriptionWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOsubscriptionWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not"))
			it.IDNot, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "member":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("member"))
			it.Member, err = ec.unmarshalOmemberWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "member_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("member_is_null"))
			it.MemberIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod"))
			it.PaymentMethod, err = ec.unmarshalOsubscriptionPaymentMethodType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionPaymentMethodType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod_not"))
			it.PaymentMethodNot, err = ec.unmarshalOsubscriptionPaymentMethodType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionPaymentMethodType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod_in"))
			it.PaymentMethodIn, err = ec.unmarshalOsubscriptionPaymentMethodType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionPaymentMethodType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethod_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethod_not_in"))
			it.PaymentMethodNotIn, err = ec.unmarshalOsubscriptionPaymentMethodType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionPaymentMethodType(ctx, v)
			if err != nil {
				return it, err
			}
		case "newebpayPayment_every":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newebpayPayment_every"))
			it.NewebpayPaymentEvery, err = ec.unmarshalOnewebpayPaymentWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "newebpayPayment_some":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newebpayPayment_some"))
			it.NewebpayPaymentSome, err = ec.unmarshalOnewebpayPaymentWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "newebpayPayment_none":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newebpayPayment_none"))
			it.NewebpayPaymentNone, err = ec.unmarshalOnewebpayPaymentWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "applepayPayment_every":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applepayPayment_every"))
			it.ApplepayPaymentEvery, err = ec.unmarshalOapplepayPaymentWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "applepayPayment_some":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applepayPayment_some"))
			it.ApplepayPaymentSome, err = ec.unmarshalOapplepayPaymentWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "applepayPayment_none":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applepayPayment_none"))
			it.ApplepayPaymentNone, err = ec.unmarshalOapplepayPaymentWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "androidpayPayment_every":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("androidpayPayment_every"))
			it.AndroidpayPaymentEvery, err = ec.unmarshalOandroidpayPaymentWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "androidpayPayment_some":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("androidpayPayment_some"))
			it.AndroidpayPaymentSome, err = ec.unmarshalOandroidpayPaymentWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "androidpayPayment_none":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("androidpayPayment_none"))
			it.AndroidpayPaymentNone, err = ec.unmarshalOandroidpayPaymentWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOsubscriptionStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionStatusType(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_not"))
			it.StatusNot, err = ec.unmarshalOsubscriptionStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionStatusType(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_in"))
			it.StatusIn, err = ec.unmarshalOsubscriptionStatusType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionStatusType(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_not_in"))
			it.StatusNotIn, err = ec.unmarshalOsubscriptionStatusType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionStatusType(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_not"))
			it.AmountNot, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_lt"))
			it.AmountLt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_lte"))
			it.AmountLte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_gt"))
			it.AmountGt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_gte"))
			it.AmountGte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_in"))
			it.AmountIn, err = ec.unmarshalOFloat2ᚕᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_not_in"))
			it.AmountNotIn, err = ec.unmarshalOFloat2ᚕᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			it.Currency, err = ec.unmarshalOsubscriptionCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionCurrencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency_not"))
			it.CurrencyNot, err = ec.unmarshalOsubscriptionCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionCurrencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency_in"))
			it.CurrencyIn, err = ec.unmarshalOsubscriptionCurrencyType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionCurrencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency_not_in"))
			it.CurrencyNotIn, err = ec.unmarshalOsubscriptionCurrencyType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionCurrencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not"))
			it.DescNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_contains"))
			it.DescContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_contains"))
			it.DescNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_starts_with"))
			it.DescStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_starts_with"))
			it.DescNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_ends_with"))
			it.DescEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_ends_with"))
			it.DescNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_i"))
			it.DescI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_i"))
			it.DescNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_contains_i"))
			it.DescContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_contains_i"))
			it.DescNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_starts_with_i"))
			it.DescStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_starts_with_i"))
			it.DescNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_ends_with_i"))
			it.DescEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_ends_with_i"))
			it.DescNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_in"))
			it.DescIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc_not_in"))
			it.DescNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment"))
			it.Comment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_not"))
			it.CommentNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_contains"))
			it.CommentContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_not_contains"))
			it.CommentNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_starts_with"))
			it.CommentStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_not_starts_with"))
			it.CommentNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_ends_with"))
			it.CommentEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_not_ends_with"))
			it.CommentNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_i"))
			it.CommentI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_not_i"))
			it.CommentNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_contains_i"))
			it.CommentContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_not_contains_i"))
			it.CommentNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_starts_with_i"))
			it.CommentStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_not_starts_with_i"))
			it.CommentNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_ends_with_i"))
			it.CommentEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_not_ends_with_i"))
			it.CommentNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_in"))
			it.CommentIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment_not_in"))
			it.CommentNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not"))
			it.EmailNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_contains"))
			it.EmailContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_contains"))
			it.EmailNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_starts_with"))
			it.EmailStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_starts_with"))
			it.EmailNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_ends_with"))
			it.EmailEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_ends_with"))
			it.EmailNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_i"))
			it.EmailI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_i"))
			it.EmailNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_contains_i"))
			it.EmailContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_contains_i"))
			it.EmailNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_starts_with_i"))
			it.EmailStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_starts_with_i"))
			it.EmailNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_ends_with_i"))
			it.EmailEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_ends_with_i"))
			it.EmailNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_in"))
			it.EmailIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_in"))
			it.EmailNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber"))
			it.OrderNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not"))
			it.OrderNumberNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_contains"))
			it.OrderNumberContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not_contains"))
			it.OrderNumberNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_starts_with"))
			it.OrderNumberStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not_starts_with"))
			it.OrderNumberNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_ends_with"))
			it.OrderNumberEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not_ends_with"))
			it.OrderNumberNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_i"))
			it.OrderNumberI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not_i"))
			it.OrderNumberNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_contains_i"))
			it.OrderNumberContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not_contains_i"))
			it.OrderNumberNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_starts_with_i"))
			it.OrderNumberStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not_starts_with_i"))
			it.OrderNumberNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_ends_with_i"))
			it.OrderNumberEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not_ends_with_i"))
			it.OrderNumberNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_in"))
			it.OrderNumberIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber_not_in"))
			it.OrderNumberNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isActive"))
			it.IsActive, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isActive_not"))
			it.IsActiveNot, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isCanceled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isCanceled"))
			it.IsCanceled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isCanceled_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isCanceled_not"))
			it.IsCanceledNot, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "frequency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frequency"))
			it.Frequency, err = ec.unmarshalOsubscriptionFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionFrequencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "frequency_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frequency_not"))
			it.FrequencyNot, err = ec.unmarshalOsubscriptionFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionFrequencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "frequency_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frequency_in"))
			it.FrequencyIn, err = ec.unmarshalOsubscriptionFrequencyType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionFrequencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "frequency_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frequency_not_in"))
			it.FrequencyNotIn, err = ec.unmarshalOsubscriptionFrequencyType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionFrequencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nextFrequency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextFrequency"))
			it.NextFrequency, err = ec.unmarshalOsubscriptionNextFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionNextFrequencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nextFrequency_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextFrequency_not"))
			it.NextFrequencyNot, err = ec.unmarshalOsubscriptionNextFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionNextFrequencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nextFrequency_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextFrequency_in"))
			it.NextFrequencyIn, err = ec.unmarshalOsubscriptionNextFrequencyType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionNextFrequencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nextFrequency_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextFrequency_not_in"))
			it.NextFrequencyNotIn, err = ec.unmarshalOsubscriptionNextFrequencyType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionNextFrequencyType(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFailureTimes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFailureTimes"))
			it.PeriodFailureTimes, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFailureTimes_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFailureTimes_not"))
			it.PeriodFailureTimesNot, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFailureTimes_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFailureTimes_lt"))
			it.PeriodFailureTimesLt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFailureTimes_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFailureTimes_lte"))
			it.PeriodFailureTimesLte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFailureTimes_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFailureTimes_gt"))
			it.PeriodFailureTimesGt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFailureTimes_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFailureTimes_gte"))
			it.PeriodFailureTimesGte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFailureTimes_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFailureTimes_in"))
			it.PeriodFailureTimesIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFailureTimes_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFailureTimes_not_in"))
			it.PeriodFailureTimesNotIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodLastSuccessDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodLastSuccessDatetime"))
			it.PeriodLastSuccessDatetime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodLastSuccessDatetime_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodLastSuccessDatetime_not"))
			it.PeriodLastSuccessDatetimeNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodLastSuccessDatetime_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodLastSuccessDatetime_lt"))
			it.PeriodLastSuccessDatetimeLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodLastSuccessDatetime_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodLastSuccessDatetime_lte"))
			it.PeriodLastSuccessDatetimeLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodLastSuccessDatetime_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodLastSuccessDatetime_gt"))
			it.PeriodLastSuccessDatetimeGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodLastSuccessDatetime_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodLastSuccessDatetime_gte"))
			it.PeriodLastSuccessDatetimeGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodLastSuccessDatetime_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodLastSuccessDatetime_in"))
			it.PeriodLastSuccessDatetimeIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodLastSuccessDatetime_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodLastSuccessDatetime_not_in"))
			it.PeriodLastSuccessDatetimeNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodNextPayDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodNextPayDatetime"))
			it.PeriodNextPayDatetime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodNextPayDatetime_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodNextPayDatetime_not"))
			it.PeriodNextPayDatetimeNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodNextPayDatetime_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodNextPayDatetime_lt"))
			it.PeriodNextPayDatetimeLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodNextPayDatetime_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodNextPayDatetime_lte"))
			it.PeriodNextPayDatetimeLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodNextPayDatetime_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodNextPayDatetime_gt"))
			it.PeriodNextPayDatetimeGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodNextPayDatetime_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodNextPayDatetime_gte"))
			it.PeriodNextPayDatetimeGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodNextPayDatetime_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodNextPayDatetime_in"))
			it.PeriodNextPayDatetimeIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodNextPayDatetime_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodNextPayDatetime_not_in"))
			it.PeriodNextPayDatetimeNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodCreateDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodCreateDatetime"))
			it.PeriodCreateDatetime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodCreateDatetime_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodCreateDatetime_not"))
			it.PeriodCreateDatetimeNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodCreateDatetime_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodCreateDatetime_lt"))
			it.PeriodCreateDatetimeLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodCreateDatetime_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodCreateDatetime_lte"))
			it.PeriodCreateDatetimeLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodCreateDatetime_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodCreateDatetime_gt"))
			it.PeriodCreateDatetimeGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodCreateDatetime_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodCreateDatetime_gte"))
			it.PeriodCreateDatetimeGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodCreateDatetime_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodCreateDatetime_in"))
			it.PeriodCreateDatetimeIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodCreateDatetime_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodCreateDatetime_not_in"))
			it.PeriodCreateDatetimeNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFirstDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFirstDatetime"))
			it.PeriodFirstDatetime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFirstDatetime_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFirstDatetime_not"))
			it.PeriodFirstDatetimeNot, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFirstDatetime_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFirstDatetime_lt"))
			it.PeriodFirstDatetimeLt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFirstDatetime_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFirstDatetime_lte"))
			it.PeriodFirstDatetimeLte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFirstDatetime_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFirstDatetime_gt"))
			it.PeriodFirstDatetimeGt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFirstDatetime_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFirstDatetime_gte"))
			it.PeriodFirstDatetimeGte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFirstDatetime_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFirstDatetime_in"))
			it.PeriodFirstDatetimeIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodFirstDatetime_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodFirstDatetime_not_in"))
			it.PeriodFirstDatetimeNotIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodEndDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodEndDatetime"))
			it.PeriodEndDatetime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodEndDatetime_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodEndDatetime_not"))
			it.PeriodEndDatetimeNot, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodEndDatetime_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodEndDatetime_lt"))
			it.PeriodEndDatetimeLt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodEndDatetime_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodEndDatetime_lte"))
			it.PeriodEndDatetimeLte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodEndDatetime_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodEndDatetime_gt"))
			it.PeriodEndDatetimeGt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodEndDatetime_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodEndDatetime_gte"))
			it.PeriodEndDatetimeGte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodEndDatetime_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodEndDatetime_in"))
			it.PeriodEndDatetimeIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodEndDatetime_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodEndDatetime_not_in"))
			it.PeriodEndDatetimeNotIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "changePlanDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changePlanDatetime"))
			it.ChangePlanDatetime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "changePlanDatetime_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changePlanDatetime_not"))
			it.ChangePlanDatetimeNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "changePlanDatetime_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changePlanDatetime_lt"))
			it.ChangePlanDatetimeLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "changePlanDatetime_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changePlanDatetime_lte"))
			it.ChangePlanDatetimeLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "changePlanDatetime_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changePlanDatetime_gt"))
			it.ChangePlanDatetimeGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "changePlanDatetime_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changePlanDatetime_gte"))
			it.ChangePlanDatetimeGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "changePlanDatetime_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changePlanDatetime_in"))
			it.ChangePlanDatetimeIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "changePlanDatetime_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changePlanDatetime_not_in"))
			it.ChangePlanDatetimeNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_not"))
			it.NoteNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_contains"))
			it.NoteContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_not_contains"))
			it.NoteNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_starts_with"))
			it.NoteStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_not_starts_with"))
			it.NoteNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_ends_with"))
			it.NoteEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_not_ends_with"))
			it.NoteNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_i"))
			it.NoteI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_not_i"))
			it.NoteNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_contains_i"))
			it.NoteContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_not_contains_i"))
			it.NoteNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_starts_with_i"))
			it.NoteStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_not_starts_with_i"))
			it.NoteNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_ends_with_i"))
			it.NoteEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_not_ends_with_i"))
			it.NoteNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_in"))
			it.NoteIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note_not_in"))
			it.NoteNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "promoteId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promoteId"))
			it.PromoteID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "promoteId_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promoteId_not"))
			it.PromoteIDNot, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "promoteId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promoteId_lt"))
			it.PromoteIDLt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "promoteId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promoteId_lte"))
			it.PromoteIDLte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "promoteId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promoteId_gt"))
			it.PromoteIDGt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "promoteId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promoteId_gte"))
			it.PromoteIDGte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "promoteId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promoteId_in"))
			it.PromoteIDIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "promoteId_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promoteId_not_in"))
			it.PromoteIDNotIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId"))
			it.PostID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_not"))
			it.PostIDNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_contains"))
			it.PostIDContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_not_contains"))
			it.PostIDNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_starts_with"))
			it.PostIDStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_not_starts_with"))
			it.PostIDNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_ends_with"))
			it.PostIDEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_not_ends_with"))
			it.PostIDNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_i"))
			it.PostIDI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_not_i"))
			it.PostIDNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_contains_i"))
			it.PostIDContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_not_contains_i"))
			it.PostIDNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_starts_with_i"))
			it.PostIDStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_not_starts_with_i"))
			it.PostIDNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_ends_with_i"))
			it.PostIDEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_not_ends_with_i"))
			it.PostIDNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_in"))
			it.PostIDIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId_not_in"))
			it.PostIDNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeStartDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeStartDatetime"))
			it.OneTimeStartDatetime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeStartDatetime_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeStartDatetime_not"))
			it.OneTimeStartDatetimeNot, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeStartDatetime_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeStartDatetime_lt"))
			it.OneTimeStartDatetimeLt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeStartDatetime_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeStartDatetime_lte"))
			it.OneTimeStartDatetimeLte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeStartDatetime_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeStartDatetime_gt"))
			it.OneTimeStartDatetimeGt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeStartDatetime_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeStartDatetime_gte"))
			it.OneTimeStartDatetimeGte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeStartDatetime_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeStartDatetime_in"))
			it.OneTimeStartDatetimeIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeStartDatetime_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeStartDatetime_not_in"))
			it.OneTimeStartDatetimeNotIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeEndDatetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeEndDatetime"))
			it.OneTimeEndDatetime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeEndDatetime_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeEndDatetime_not"))
			it.OneTimeEndDatetimeNot, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeEndDatetime_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeEndDatetime_lt"))
			it.OneTimeEndDatetimeLt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeEndDatetime_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeEndDatetime_lte"))
			it.OneTimeEndDatetimeLte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeEndDatetime_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeEndDatetime_gt"))
			it.OneTimeEndDatetimeGt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeEndDatetime_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeEndDatetime_gte"))
			it.OneTimeEndDatetimeGte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeEndDatetime_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeEndDatetime_in"))
			it.OneTimeEndDatetimeIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oneTimeEndDatetime_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oneTimeEndDatetime_not_in"))
			it.OneTimeEndDatetimeNotIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "newebpayPaymentInfo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newebpayPaymentInfo"))
			it.NewebpayPaymentInfo, err = ec.unmarshalOnewebpayPaymentInfoWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentInfoWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "newebpayPaymentInfo_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newebpayPaymentInfo_is_null"))
			it.NewebpayPaymentInfoIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "loveCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loveCode"))
			it.LoveCode, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "loveCode_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loveCode_not"))
			it.LoveCodeNot, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "loveCode_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loveCode_lt"))
			it.LoveCodeLt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "loveCode_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loveCode_lte"))
			it.LoveCodeLte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "loveCode_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loveCode_gt"))
			it.LoveCodeGt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "loveCode_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loveCode_gte"))
			it.LoveCodeGte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "loveCode_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loveCode_in"))
			it.LoveCodeIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "loveCode_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loveCode_not_in"))
			it.LoveCodeNotIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierType"))
			it.CarrierType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierType_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierType_not"))
			it.CarrierTypeNot, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierType_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierType_in"))
			it.CarrierTypeIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierType_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierType_not_in"))
			it.CarrierTypeNotIn, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum"))
			it.CarrierNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_not"))
			it.CarrierNumNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_contains"))
			it.CarrierNumContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_not_contains"))
			it.CarrierNumNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_starts_with"))
			it.CarrierNumStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_not_starts_with"))
			it.CarrierNumNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_ends_with"))
			it.CarrierNumEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_not_ends_with"))
			it.CarrierNumNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_i"))
			it.CarrierNumI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_not_i"))
			it.CarrierNumNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_contains_i"))
			it.CarrierNumContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_not_contains_i"))
			it.CarrierNumNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_starts_with_i"))
			it.CarrierNumStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_not_starts_with_i"))
			it.CarrierNumNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_ends_with_i"))
			it.CarrierNumEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_not_ends_with_i"))
			it.CarrierNumNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_in"))
			it.CarrierNumIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrierNum_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierNum_not_in"))
			it.CarrierNumNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName"))
			it.BuyerName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_not"))
			it.BuyerNameNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_contains"))
			it.BuyerNameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_not_contains"))
			it.BuyerNameNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_starts_with"))
			it.BuyerNameStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_not_starts_with"))
			it.BuyerNameNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_ends_with"))
			it.BuyerNameEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_not_ends_with"))
			it.BuyerNameNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_i"))
			it.BuyerNameI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_not_i"))
			it.BuyerNameNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_contains_i"))
			it.BuyerNameContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_not_contains_i"))
			it.BuyerNameNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_starts_with_i"))
			it.BuyerNameStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_not_starts_with_i"))
			it.BuyerNameNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_ends_with_i"))
			it.BuyerNameEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_not_ends_with_i"))
			it.BuyerNameNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_in"))
			it.BuyerNameIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerName_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerName_not_in"))
			it.BuyerNameNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN"))
			it.BuyerUbn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_not"))
			it.BuyerUbnNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_contains"))
			it.BuyerUbnContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_not_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_not_contains"))
			it.BuyerUbnNotContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_starts_with"))
			it.BuyerUbnStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_not_starts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_not_starts_with"))
			it.BuyerUbnNotStartsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_ends_with"))
			it.BuyerUbnEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_not_ends_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_not_ends_with"))
			it.BuyerUbnNotEndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_i"))
			it.BuyerUbnI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_not_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_not_i"))
			it.BuyerUbnNotI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_contains_i"))
			it.BuyerUbnContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_not_contains_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_not_contains_i"))
			it.BuyerUbnNotContainsI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_starts_with_i"))
			it.BuyerUbnStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_not_starts_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_not_starts_with_i"))
			it.BuyerUbnNotStartsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_ends_with_i"))
			it.BuyerUbnEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_not_ends_with_i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_not_ends_with_i"))
			it.BuyerUbnNotEndsWithI, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_in"))
			it.BuyerUbnIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buyerUBN_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerUBN_not_in"))
			it.BuyerUbnNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not"))
			it.CreatedAtNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not_in"))
			it.CreatedAtNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not"))
			it.UpdatedAtNot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not_in"))
			it.UpdatedAtNotIn, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_is_null"))
			it.CreatedByIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_is_null"))
			it.UpdatedByIsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsubscriptionWhereUniqueInput(ctx context.Context, obj interface{}) (model.SubscriptionWhereUniqueInput, error) {
	var it model.SubscriptionWhereUniqueInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber"))
			it.OrderNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createmember":
			out.Values[i] = ec._Mutation_createmember(ctx, field)
		case "updatemember":
			out.Values[i] = ec._Mutation_updatemember(ctx, field)
		case "createSubscriptionRecurring":
			out.Values[i] = ec._Mutation_createSubscriptionRecurring(ctx, field)
		case "createsSubscriptionOneTime":
			out.Values[i] = ec._Mutation_createsSubscriptionOneTime(ctx, field)
		case "updatesubscription":
			out.Values[i] = ec._Mutation_updatesubscription(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var androidpayPaymentImplementors = []string{"androidpayPayment"}

func (ec *executionContext) _androidpayPayment(ctx context.Context, sel ast.SelectionSet, obj *model.AndroidpayPayment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, androidpayPaymentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("androidpayPayment")
		case "id":
			out.Values[i] = ec._androidpayPayment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subscription":
			out.Values[i] = ec._androidpayPayment_subscription(ctx, field, obj)
		case "invoice":
			out.Values[i] = ec._androidpayPayment_invoice(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._androidpayPayment_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._androidpayPayment_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var applepayPaymentImplementors = []string{"applepayPayment"}

func (ec *executionContext) _applepayPayment(ctx context.Context, sel ast.SelectionSet, obj *model.ApplepayPayment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, applepayPaymentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("applepayPayment")
		case "id":
			out.Values[i] = ec._applepayPayment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subscription":
			out.Values[i] = ec._applepayPayment_subscription(ctx, field, obj)
		case "invoice":
			out.Values[i] = ec._applepayPayment_invoice(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._applepayPayment_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._applepayPayment_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var invoiceImplementors = []string{"invoice"}

func (ec *executionContext) _invoice(ctx context.Context, sel ast.SelectionSet, obj *model.Invoice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, invoiceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("invoice")
		case "id":
			out.Values[i] = ec._invoice_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "newebpayPayment":
			out.Values[i] = ec._invoice_newebpayPayment(ctx, field, obj)
		case "applepayPayment":
			out.Values[i] = ec._invoice_applepayPayment(ctx, field, obj)
		case "androidpayPayment":
			out.Values[i] = ec._invoice_androidpayPayment(ctx, field, obj)
		case "amount":
			out.Values[i] = ec._invoice_amount(ctx, field, obj)
		case "email":
			out.Values[i] = ec._invoice_email(ctx, field, obj)
		case "desc":
			out.Values[i] = ec._invoice_desc(ctx, field, obj)
		case "invoiceNo":
			out.Values[i] = ec._invoice_invoiceNo(ctx, field, obj)
		case "category":
			out.Values[i] = ec._invoice_category(ctx, field, obj)
		case "loveCode":
			out.Values[i] = ec._invoice_loveCode(ctx, field, obj)
		case "carrierType":
			out.Values[i] = ec._invoice_carrierType(ctx, field, obj)
		case "carrierNum":
			out.Values[i] = ec._invoice_carrierNum(ctx, field, obj)
		case "buyerName":
			out.Values[i] = ec._invoice_buyerName(ctx, field, obj)
		case "buyerUBN":
			out.Values[i] = ec._invoice_buyerUBN(ctx, field, obj)
		case "status":
			out.Values[i] = ec._invoice_status(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._invoice_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._invoice_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var marketingMembershipImplementors = []string{"marketingMembership"}

func (ec *executionContext) _marketingMembership(ctx context.Context, sel ast.SelectionSet, obj *model.MarketingMembership) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, marketingMembershipImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("marketingMembership")
		case "id":
			out.Values[i] = ec._marketingMembership_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "member":
			out.Values[i] = ec._marketingMembership_member(ctx, field, obj)
		case "status":
			out.Values[i] = ec._marketingMembership_status(ctx, field, obj)
		case "startDate":
			out.Values[i] = ec._marketingMembership_startDate(ctx, field, obj)
		case "endDate":
			out.Values[i] = ec._marketingMembership_endDate(ctx, field, obj)
		case "requesterEmail":
			out.Values[i] = ec._marketingMembership_requesterEmail(ctx, field, obj)
		case "approvedBy":
			out.Values[i] = ec._marketingMembership_approvedBy(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._marketingMembership_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._marketingMembership_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var memberImplementors = []string{"member"}

func (ec *executionContext) _member(ctx context.Context, sel ast.SelectionSet, obj *model.Member) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, memberImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("member")
		case "id":
			out.Values[i] = ec._member_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "firebaseId":
			out.Values[i] = ec._member_firebaseId(ctx, field, obj)
		case "email":
			out.Values[i] = ec._member_email(ctx, field, obj)
		case "marketingMembership":
			out.Values[i] = ec._member_marketingMembership(ctx, field, obj)
		case "type":
			out.Values[i] = ec._member_type(ctx, field, obj)
		case "state":
			out.Values[i] = ec._member_state(ctx, field, obj)
		case "tos":
			out.Values[i] = ec._member_tos(ctx, field, obj)
		case "dateJoined":
			out.Values[i] = ec._member_dateJoined(ctx, field, obj)
		case "firstName":
			out.Values[i] = ec._member_firstName(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._member_lastName(ctx, field, obj)
		case "name":
			out.Values[i] = ec._member_name(ctx, field, obj)
		case "gender":
			out.Values[i] = ec._member_gender(ctx, field, obj)
		case "phone":
			out.Values[i] = ec._member_phone(ctx, field, obj)
		case "birthday":
			out.Values[i] = ec._member_birthday(ctx, field, obj)
		case "address":
			out.Values[i] = ec._member_address(ctx, field, obj)
		case "nickname":
			out.Values[i] = ec._member_nickname(ctx, field, obj)
		case "profileImage":
			out.Values[i] = ec._member_profileImage(ctx, field, obj)
		case "city":
			out.Values[i] = ec._member_city(ctx, field, obj)
		case "country":
			out.Values[i] = ec._member_country(ctx, field, obj)
		case "district":
			out.Values[i] = ec._member_district(ctx, field, obj)
		case "subscription":
			out.Values[i] = ec._member_subscription(ctx, field, obj)
		case "subscriptionCount":
			out.Values[i] = ec._member_subscriptionCount(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._member_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._member_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var memberInfoImplementors = []string{"memberInfo"}

func (ec *executionContext) _memberInfo(ctx context.Context, sel ast.SelectionSet, obj *model.MemberInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, memberInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("memberInfo")
		case "id":
			out.Values[i] = ec._memberInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "firebaseId":
			out.Values[i] = ec._memberInfo_firebaseId(ctx, field, obj)
		case "email":
			out.Values[i] = ec._memberInfo_email(ctx, field, obj)
		case "type":
			out.Values[i] = ec._memberInfo_type(ctx, field, obj)
		case "state":
			out.Values[i] = ec._memberInfo_state(ctx, field, obj)
		case "tos":
			out.Values[i] = ec._memberInfo_tos(ctx, field, obj)
		case "dateJoined":
			out.Values[i] = ec._memberInfo_dateJoined(ctx, field, obj)
		case "firstName":
			out.Values[i] = ec._memberInfo_firstName(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._memberInfo_lastName(ctx, field, obj)
		case "name":
			out.Values[i] = ec._memberInfo_name(ctx, field, obj)
		case "gender":
			out.Values[i] = ec._memberInfo_gender(ctx, field, obj)
		case "phone":
			out.Values[i] = ec._memberInfo_phone(ctx, field, obj)
		case "birthday":
			out.Values[i] = ec._memberInfo_birthday(ctx, field, obj)
		case "address":
			out.Values[i] = ec._memberInfo_address(ctx, field, obj)
		case "nickname":
			out.Values[i] = ec._memberInfo_nickname(ctx, field, obj)
		case "profileImage":
			out.Values[i] = ec._memberInfo_profileImage(ctx, field, obj)
		case "city":
			out.Values[i] = ec._memberInfo_city(ctx, field, obj)
		case "country":
			out.Values[i] = ec._memberInfo_country(ctx, field, obj)
		case "district":
			out.Values[i] = ec._memberInfo_district(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._memberInfo_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._memberInfo_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var merchandiseImplementors = []string{"merchandise"}

func (ec *executionContext) _merchandise(ctx context.Context, sel ast.SelectionSet, obj *model.Merchandise) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, merchandiseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("merchandise")
		case "id":
			out.Values[i] = ec._merchandise_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._merchandise_name(ctx, field, obj)
		case "code":
			out.Values[i] = ec._merchandise_code(ctx, field, obj)
		case "price":
			out.Values[i] = ec._merchandise_price(ctx, field, obj)
		case "currency":
			out.Values[i] = ec._merchandise_currency(ctx, field, obj)
		case "state":
			out.Values[i] = ec._merchandise_state(ctx, field, obj)
		case "desc":
			out.Values[i] = ec._merchandise_desc(ctx, field, obj)
		case "comment":
			out.Values[i] = ec._merchandise_comment(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._merchandise_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._merchandise_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newebpayPaymentImplementors = []string{"newebpayPayment"}

func (ec *executionContext) _newebpayPayment(ctx context.Context, sel ast.SelectionSet, obj *model.NewebpayPayment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newebpayPaymentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("newebpayPayment")
		case "id":
			out.Values[i] = ec._newebpayPayment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subscription":
			out.Values[i] = ec._newebpayPayment_subscription(ctx, field, obj)
		case "invoice":
			out.Values[i] = ec._newebpayPayment_invoice(ctx, field, obj)
		case "amount":
			out.Values[i] = ec._newebpayPayment_amount(ctx, field, obj)
		case "status":
			out.Values[i] = ec._newebpayPayment_status(ctx, field, obj)
		case "paymentMethod":
			out.Values[i] = ec._newebpayPayment_paymentMethod(ctx, field, obj)
		case "paymentTime":
			out.Values[i] = ec._newebpayPayment_paymentTime(ctx, field, obj)
		case "tradeNumber":
			out.Values[i] = ec._newebpayPayment_tradeNumber(ctx, field, obj)
		case "message":
			out.Values[i] = ec._newebpayPayment_message(ctx, field, obj)
		case "merchantId":
			out.Values[i] = ec._newebpayPayment_merchantId(ctx, field, obj)
		case "orderNumber":
			out.Values[i] = ec._newebpayPayment_orderNumber(ctx, field, obj)
		case "tokenUseStatus":
			out.Values[i] = ec._newebpayPayment_tokenUseStatus(ctx, field, obj)
		case "respondCode":
			out.Values[i] = ec._newebpayPayment_respondCode(ctx, field, obj)
		case "ECI":
			out.Values[i] = ec._newebpayPayment_ECI(ctx, field, obj)
		case "authCode":
			out.Values[i] = ec._newebpayPayment_authCode(ctx, field, obj)
		case "authBank":
			out.Values[i] = ec._newebpayPayment_authBank(ctx, field, obj)
		case "cardInfoLastFour":
			out.Values[i] = ec._newebpayPayment_cardInfoLastFour(ctx, field, obj)
		case "cardInfoFirstSix":
			out.Values[i] = ec._newebpayPayment_cardInfoFirstSix(ctx, field, obj)
		case "cardInfoExp":
			out.Values[i] = ec._newebpayPayment_cardInfoExp(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._newebpayPayment_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._newebpayPayment_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newebpayPaymentInfoImplementors = []string{"newebpayPaymentInfo"}

func (ec *executionContext) _newebpayPaymentInfo(ctx context.Context, sel ast.SelectionSet, obj *model.NewebpayPaymentInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newebpayPaymentInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("newebpayPaymentInfo")
		case "id":
			out.Values[i] = ec._newebpayPaymentInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subscription":
			out.Values[i] = ec._newebpayPaymentInfo_subscription(ctx, field, obj)
		case "tokenTerm":
			out.Values[i] = ec._newebpayPaymentInfo_tokenTerm(ctx, field, obj)
		case "tokenValue":
			out.Values[i] = ec._newebpayPaymentInfo_tokenValue(ctx, field, obj)
		case "tokenLife":
			out.Values[i] = ec._newebpayPaymentInfo_tokenLife(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._newebpayPaymentInfo_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._newebpayPaymentInfo_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var promotionImplementors = []string{"promotion"}

func (ec *executionContext) _promotion(ctx context.Context, sel ast.SelectionSet, obj *model.Promotion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, promotionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("promotion")
		case "id":
			out.Values[i] = ec._promotion_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._promotion_code(ctx, field, obj)
		case "plan":
			out.Values[i] = ec._promotion_plan(ctx, field, obj)
		case "state":
			out.Values[i] = ec._promotion_state(ctx, field, obj)
		case "startAt":
			out.Values[i] = ec._promotion_startAt(ctx, field, obj)
		case "endAt":
			out.Values[i] = ec._promotion_endAt(ctx, field, obj)
		case "discount":
			out.Values[i] = ec._promotion_discount(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._promotion_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._promotion_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionImplementors = []string{"subscription"}

func (ec *executionContext) _subscription(ctx context.Context, sel ast.SelectionSet, obj *model.Subscription) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("subscription")
		case "id":
			out.Values[i] = ec._subscription_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "member":
			out.Values[i] = ec._subscription_member(ctx, field, obj)
		case "paymentMethod":
			out.Values[i] = ec._subscription_paymentMethod(ctx, field, obj)
		case "newebpayPayment":
			out.Values[i] = ec._subscription_newebpayPayment(ctx, field, obj)
		case "newebpayPaymentCount":
			out.Values[i] = ec._subscription_newebpayPaymentCount(ctx, field, obj)
		case "applepayPayment":
			out.Values[i] = ec._subscription_applepayPayment(ctx, field, obj)
		case "applepayPaymentCount":
			out.Values[i] = ec._subscription_applepayPaymentCount(ctx, field, obj)
		case "androidpayPayment":
			out.Values[i] = ec._subscription_androidpayPayment(ctx, field, obj)
		case "androidpayPaymentCount":
			out.Values[i] = ec._subscription_androidpayPaymentCount(ctx, field, obj)
		case "status":
			out.Values[i] = ec._subscription_status(ctx, field, obj)
		case "amount":
			out.Values[i] = ec._subscription_amount(ctx, field, obj)
		case "currency":
			out.Values[i] = ec._subscription_currency(ctx, field, obj)
		case "desc":
			out.Values[i] = ec._subscription_desc(ctx, field, obj)
		case "comment":
			out.Values[i] = ec._subscription_comment(ctx, field, obj)
		case "email":
			out.Values[i] = ec._subscription_email(ctx, field, obj)
		case "orderNumber":
			out.Values[i] = ec._subscription_orderNumber(ctx, field, obj)
		case "isActive":
			out.Values[i] = ec._subscription_isActive(ctx, field, obj)
		case "isCanceled":
			out.Values[i] = ec._subscription_isCanceled(ctx, field, obj)
		case "frequency":
			out.Values[i] = ec._subscription_frequency(ctx, field, obj)
		case "nextFrequency":
			out.Values[i] = ec._subscription_nextFrequency(ctx, field, obj)
		case "periodFailureTimes":
			out.Values[i] = ec._subscription_periodFailureTimes(ctx, field, obj)
		case "periodLastSuccessDatetime":
			out.Values[i] = ec._subscription_periodLastSuccessDatetime(ctx, field, obj)
		case "periodNextPayDatetime":
			out.Values[i] = ec._subscription_periodNextPayDatetime(ctx, field, obj)
		case "periodCreateDatetime":
			out.Values[i] = ec._subscription_periodCreateDatetime(ctx, field, obj)
		case "periodFirstDatetime":
			out.Values[i] = ec._subscription_periodFirstDatetime(ctx, field, obj)
		case "periodEndDatetime":
			out.Values[i] = ec._subscription_periodEndDatetime(ctx, field, obj)
		case "changePlanDatetime":
			out.Values[i] = ec._subscription_changePlanDatetime(ctx, field, obj)
		case "note":
			out.Values[i] = ec._subscription_note(ctx, field, obj)
		case "promoteId":
			out.Values[i] = ec._subscription_promoteId(ctx, field, obj)
		case "postId":
			out.Values[i] = ec._subscription_postId(ctx, field, obj)
		case "oneTimeStartDatetime":
			out.Values[i] = ec._subscription_oneTimeStartDatetime(ctx, field, obj)
		case "oneTimeEndDatetime":
			out.Values[i] = ec._subscription_oneTimeEndDatetime(ctx, field, obj)
		case "newebpayPaymentInfo":
			out.Values[i] = ec._subscription_newebpayPaymentInfo(ctx, field, obj)
		case "loveCode":
			out.Values[i] = ec._subscription_loveCode(ctx, field, obj)
		case "carrierType":
			out.Values[i] = ec._subscription_carrierType(ctx, field, obj)
		case "carrierNum":
			out.Values[i] = ec._subscription_carrierNum(ctx, field, obj)
		case "buyerName":
			out.Values[i] = ec._subscription_buyerName(ctx, field, obj)
		case "buyerUBN":
			out.Values[i] = ec._subscription_buyerUBN(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._subscription_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._subscription_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionCreationImplementors = []string{"subscriptionCreation"}

func (ec *executionContext) _subscriptionCreation(ctx context.Context, sel ast.SelectionSet, obj *model.SubscriptionCreation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionCreationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("subscriptionCreation")
		case "subscription":
			out.Values[i] = ec._subscriptionCreation_subscription(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "newebpayPayload":
			out.Values[i] = ec._subscriptionCreation_newebpayPayload(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionHistoryImplementors = []string{"subscriptionHistory"}

func (ec *executionContext) _subscriptionHistory(ctx context.Context, sel ast.SelectionSet, obj *model.SubscriptionHistory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionHistoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("subscriptionHistory")
		case "id":
			out.Values[i] = ec._subscriptionHistory_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subscription":
			out.Values[i] = ec._subscriptionHistory_subscription(ctx, field, obj)
		case "subscriptionCreatedAt":
			out.Values[i] = ec._subscriptionHistory_subscriptionCreatedAt(ctx, field, obj)
		case "subscriptionUpdatedAt":
			out.Values[i] = ec._subscriptionHistory_subscriptionUpdatedAt(ctx, field, obj)
		case "member":
			out.Values[i] = ec._subscriptionHistory_member(ctx, field, obj)
		case "status":
			out.Values[i] = ec._subscriptionHistory_status(ctx, field, obj)
		case "amount":
			out.Values[i] = ec._subscriptionHistory_amount(ctx, field, obj)
		case "currency":
			out.Values[i] = ec._subscriptionHistory_currency(ctx, field, obj)
		case "desc":
			out.Values[i] = ec._subscriptionHistory_desc(ctx, field, obj)
		case "email":
			out.Values[i] = ec._subscriptionHistory_email(ctx, field, obj)
		case "orderNumber":
			out.Values[i] = ec._subscriptionHistory_orderNumber(ctx, field, obj)
		case "frequency":
			out.Values[i] = ec._subscriptionHistory_frequency(ctx, field, obj)
		case "tokenValue":
			out.Values[i] = ec._subscriptionHistory_tokenValue(ctx, field, obj)
		case "tokenLife":
			out.Values[i] = ec._subscriptionHistory_tokenLife(ctx, field, obj)
		case "tokenTerm":
			out.Values[i] = ec._subscriptionHistory_tokenTerm(ctx, field, obj)
		case "periodLastSuccessDate":
			out.Values[i] = ec._subscriptionHistory_periodLastSuccessDate(ctx, field, obj)
		case "periodNextPayDate":
			out.Values[i] = ec._subscriptionHistory_periodNextPayDate(ctx, field, obj)
		case "periodFirstDate":
			out.Values[i] = ec._subscriptionHistory_periodFirstDate(ctx, field, obj)
		case "changePlanDatetime":
			out.Values[i] = ec._subscriptionHistory_changePlanDatetime(ctx, field, obj)
		case "note":
			out.Values[i] = ec._subscriptionHistory_note(ctx, field, obj)
		case "promoteId":
			out.Values[i] = ec._subscriptionHistory_promoteId(ctx, field, obj)
		case "postId":
			out.Values[i] = ec._subscriptionHistory_postId(ctx, field, obj)
		case "oneTimeStartDate":
			out.Values[i] = ec._subscriptionHistory_oneTimeStartDate(ctx, field, obj)
		case "oneTimeEndDate":
			out.Values[i] = ec._subscriptionHistory_oneTimeEndDate(ctx, field, obj)
		case "action":
			out.Values[i] = ec._subscriptionHistory_action(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionInfoImplementors = []string{"subscriptionInfo"}

func (ec *executionContext) _subscriptionInfo(ctx context.Context, sel ast.SelectionSet, obj *model.SubscriptionInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("subscriptionInfo")
		case "id":
			out.Values[i] = ec._subscriptionInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._subscriptionInfo_status(ctx, field, obj)
		case "amount":
			out.Values[i] = ec._subscriptionInfo_amount(ctx, field, obj)
		case "currency":
			out.Values[i] = ec._subscriptionInfo_currency(ctx, field, obj)
		case "desc":
			out.Values[i] = ec._subscriptionInfo_desc(ctx, field, obj)
		case "email":
			out.Values[i] = ec._subscriptionInfo_email(ctx, field, obj)
		case "orderNumber":
			out.Values[i] = ec._subscriptionInfo_orderNumber(ctx, field, obj)
		case "isActive":
			out.Values[i] = ec._subscriptionInfo_isActive(ctx, field, obj)
		case "isCanceled":
			out.Values[i] = ec._subscriptionInfo_isCanceled(ctx, field, obj)
		case "frequency":
			out.Values[i] = ec._subscriptionInfo_frequency(ctx, field, obj)
		case "nextFrequency":
			out.Values[i] = ec._subscriptionInfo_nextFrequency(ctx, field, obj)
		case "periodFailureTimes":
			out.Values[i] = ec._subscriptionInfo_periodFailureTimes(ctx, field, obj)
		case "periodLastSuccessDatetime":
			out.Values[i] = ec._subscriptionInfo_periodLastSuccessDatetime(ctx, field, obj)
		case "periodNextPayDatetime":
			out.Values[i] = ec._subscriptionInfo_periodNextPayDatetime(ctx, field, obj)
		case "periodCreateDatetime":
			out.Values[i] = ec._subscriptionInfo_periodCreateDatetime(ctx, field, obj)
		case "periodFirstDatetime":
			out.Values[i] = ec._subscriptionInfo_periodFirstDatetime(ctx, field, obj)
		case "periodEndDatetime":
			out.Values[i] = ec._subscriptionInfo_periodEndDatetime(ctx, field, obj)
		case "changePlanDatetime":
			out.Values[i] = ec._subscriptionInfo_changePlanDatetime(ctx, field, obj)
		case "note":
			out.Values[i] = ec._subscriptionInfo_note(ctx, field, obj)
		case "promoteId":
			out.Values[i] = ec._subscriptionInfo_promoteId(ctx, field, obj)
		case "postId":
			out.Values[i] = ec._subscriptionInfo_postId(ctx, field, obj)
		case "oneTimeStartDatetime":
			out.Values[i] = ec._subscriptionInfo_oneTimeStartDatetime(ctx, field, obj)
		case "oneTimeEndDatetime":
			out.Values[i] = ec._subscriptionInfo_oneTimeEndDatetime(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._subscriptionInfo_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._subscriptionInfo_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNandroidpayPayment2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPayment(ctx context.Context, sel ast.SelectionSet, v *model.AndroidpayPayment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._androidpayPayment(ctx, sel, v)
}

func (ec *executionContext) unmarshalNandroidpayPaymentOrderByInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentOrderByInputᚄ(ctx context.Context, v interface{}) ([]*model.AndroidpayPaymentOrderByInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AndroidpayPaymentOrderByInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNandroidpayPaymentOrderByInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentOrderByInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNandroidpayPaymentOrderByInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentOrderByInput(ctx context.Context, v interface{}) (*model.AndroidpayPaymentOrderByInput, error) {
	res, err := ec.unmarshalInputandroidpayPaymentOrderByInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNandroidpayPaymentWhereInput2githubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentWhereInput(ctx context.Context, v interface{}) (model.AndroidpayPaymentWhereInput, error) {
	res, err := ec.unmarshalInputandroidpayPaymentWhereInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNandroidpayPaymentWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentWhereInput(ctx context.Context, v interface{}) (*model.AndroidpayPaymentWhereInput, error) {
	res, err := ec.unmarshalInputandroidpayPaymentWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNapplepayPayment2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPayment(ctx context.Context, sel ast.SelectionSet, v *model.ApplepayPayment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._applepayPayment(ctx, sel, v)
}

func (ec *executionContext) unmarshalNapplepayPaymentOrderByInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentOrderByInputᚄ(ctx context.Context, v interface{}) ([]*model.ApplepayPaymentOrderByInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ApplepayPaymentOrderByInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNapplepayPaymentOrderByInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentOrderByInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNapplepayPaymentOrderByInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentOrderByInput(ctx context.Context, v interface{}) (*model.ApplepayPaymentOrderByInput, error) {
	res, err := ec.unmarshalInputapplepayPaymentOrderByInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNapplepayPaymentWhereInput2githubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentWhereInput(ctx context.Context, v interface{}) (model.ApplepayPaymentWhereInput, error) {
	res, err := ec.unmarshalInputapplepayPaymentWhereInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNapplepayPaymentWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentWhereInput(ctx context.Context, v interface{}) (*model.ApplepayPaymentWhereInput, error) {
	res, err := ec.unmarshalInputapplepayPaymentWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateSubscriptionStatusType2githubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐCreateSubscriptionStatusType(ctx context.Context, v interface{}) (model.CreateSubscriptionStatusType, error) {
	var res model.CreateSubscriptionStatusType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNcreateSubscriptionStatusType2githubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐCreateSubscriptionStatusType(ctx context.Context, sel ast.SelectionSet, v model.CreateSubscriptionStatusType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNinvoiceWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceWhereInput(ctx context.Context, v interface{}) (*model.InvoiceWhereInput, error) {
	res, err := ec.unmarshalInputinvoiceWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNmarketingMembershipWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipWhereInput(ctx context.Context, v interface{}) (*model.MarketingMembershipWhereInput, error) {
	res, err := ec.unmarshalInputmarketingMembershipWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNmemberCreateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNmemberTypeType2githubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberTypeType(ctx context.Context, v interface{}) (model.MemberTypeType, error) {
	var res model.MemberTypeType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNmemberTypeType2githubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberTypeType(ctx context.Context, sel ast.SelectionSet, v model.MemberTypeType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNmemberUpdateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNmemberWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberWhereInput(ctx context.Context, v interface{}) (*model.MemberWhereInput, error) {
	res, err := ec.unmarshalInputmemberWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNmerchandiseWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseWhereInput(ctx context.Context, v interface{}) (*model.MerchandiseWhereInput, error) {
	res, err := ec.unmarshalInputmerchandiseWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNnewebpayPayment2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPayment(ctx context.Context, sel ast.SelectionSet, v *model.NewebpayPayment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._newebpayPayment(ctx, sel, v)
}

func (ec *executionContext) unmarshalNnewebpayPaymentInfoWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentInfoWhereInput(ctx context.Context, v interface{}) (*model.NewebpayPaymentInfoWhereInput, error) {
	res, err := ec.unmarshalInputnewebpayPaymentInfoWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNnewebpayPaymentOrderByInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentOrderByInputᚄ(ctx context.Context, v interface{}) ([]*model.NewebpayPaymentOrderByInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.NewebpayPaymentOrderByInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNnewebpayPaymentOrderByInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentOrderByInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNnewebpayPaymentOrderByInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentOrderByInput(ctx context.Context, v interface{}) (*model.NewebpayPaymentOrderByInput, error) {
	res, err := ec.unmarshalInputnewebpayPaymentOrderByInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNnewebpayPaymentWhereInput2githubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentWhereInput(ctx context.Context, v interface{}) (model.NewebpayPaymentWhereInput, error) {
	res, err := ec.unmarshalInputnewebpayPaymentWhereInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNnewebpayPaymentWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentWhereInput(ctx context.Context, v interface{}) (*model.NewebpayPaymentWhereInput, error) {
	res, err := ec.unmarshalInputnewebpayPaymentWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNpromotionWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionWhereInput(ctx context.Context, v interface{}) (*model.PromotionWhereInput, error) {
	res, err := ec.unmarshalInputpromotionWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNsubscription2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscription(ctx context.Context, sel ast.SelectionSet, v *model.Subscription) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._subscription(ctx, sel, v)
}

func (ec *executionContext) unmarshalNsubscriptionFrequencyType2githubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionFrequencyType(ctx context.Context, v interface{}) (model.SubscriptionFrequencyType, error) {
	var res model.SubscriptionFrequencyType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNsubscriptionFrequencyType2githubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionFrequencyType(ctx context.Context, sel ast.SelectionSet, v model.SubscriptionFrequencyType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNsubscriptionHistoryWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryWhereInput(ctx context.Context, v interface{}) (*model.SubscriptionHistoryWhereInput, error) {
	res, err := ec.unmarshalInputsubscriptionHistoryWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNsubscriptionInfo2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionInfo(ctx context.Context, sel ast.SelectionSet, v *model.SubscriptionInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._subscriptionInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNsubscriptionOneTimeCreateInfo2githubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionOneTimeCreateInfo(ctx context.Context, v interface{}) (model.SubscriptionOneTimeCreateInfo, error) {
	res, err := ec.unmarshalInputsubscriptionOneTimeCreateInfo(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNsubscriptionOneTimeCreateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNsubscriptionOrderByInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionOrderByInputᚄ(ctx context.Context, v interface{}) ([]*model.SubscriptionOrderByInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SubscriptionOrderByInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNsubscriptionOrderByInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionOrderByInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNsubscriptionOrderByInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionOrderByInput(ctx context.Context, v interface{}) (*model.SubscriptionOrderByInput, error) {
	res, err := ec.unmarshalInputsubscriptionOrderByInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNsubscriptionPaymentMethodType2githubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionPaymentMethodType(ctx context.Context, v interface{}) (model.SubscriptionPaymentMethodType, error) {
	var res model.SubscriptionPaymentMethodType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNsubscriptionPaymentMethodType2githubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionPaymentMethodType(ctx context.Context, sel ast.SelectionSet, v model.SubscriptionPaymentMethodType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNsubscriptionRecurringCreateInfo2githubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionRecurringCreateInfo(ctx context.Context, v interface{}) (model.SubscriptionRecurringCreateInfo, error) {
	res, err := ec.unmarshalInputsubscriptionRecurringCreateInfo(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNsubscriptionRecurringCreateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNsubscriptionUpdateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNsubscriptionWhereInput2githubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionWhereInput(ctx context.Context, v interface{}) (model.SubscriptionWhereInput, error) {
	res, err := ec.unmarshalInputsubscriptionWhereInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNsubscriptionWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionWhereInput(ctx context.Context, v interface{}) (*model.SubscriptionWhereInput, error) {
	res, err := ec.unmarshalInputsubscriptionWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOFloat2ᚕᚖfloat64(ctx context.Context, v interface{}) ([]*float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFloat2ᚖfloat64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕᚖfloat64(ctx context.Context, sel ast.SelectionSet, v []*float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOFloat2ᚖfloat64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalID(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕᚖint(ctx context.Context, v interface{}) ([]*int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOInt2ᚖint(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕᚖint(ctx context.Context, sel ast.SelectionSet, v []*int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOInt2ᚖint(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx context.Context, v interface{}) (*model.OrderDirection, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.OrderDirection)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrderDirection2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐOrderDirection(ctx context.Context, sel ast.SelectionSet, v *model.OrderDirection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) marshalOandroidpayPayment2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AndroidpayPayment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNandroidpayPayment2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPayment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOandroidpayPayment2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPayment(ctx context.Context, sel ast.SelectionSet, v *model.AndroidpayPayment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._androidpayPayment(ctx, sel, v)
}

func (ec *executionContext) unmarshalOandroidpayPaymentCreateInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentCreateInput(ctx context.Context, v interface{}) ([]*model.AndroidpayPaymentCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AndroidpayPaymentCreateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOandroidpayPaymentCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOandroidpayPaymentCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentCreateInput(ctx context.Context, v interface{}) (*model.AndroidpayPaymentCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputandroidpayPaymentCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOandroidpayPaymentRelateToManyInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentRelateToManyInput(ctx context.Context, v interface{}) (*model.AndroidpayPaymentRelateToManyInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputandroidpayPaymentRelateToManyInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOandroidpayPaymentRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentRelateToOneInput(ctx context.Context, v interface{}) (*model.AndroidpayPaymentRelateToOneInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputandroidpayPaymentRelateToOneInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOandroidpayPaymentUpdateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentUpdateInput(ctx context.Context, v interface{}) (*model.AndroidpayPaymentUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputandroidpayPaymentUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOandroidpayPaymentWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentWhereInputᚄ(ctx context.Context, v interface{}) ([]*model.AndroidpayPaymentWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AndroidpayPaymentWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNandroidpayPaymentWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOandroidpayPaymentWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentWhereInput(ctx context.Context, v interface{}) (*model.AndroidpayPaymentWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputandroidpayPaymentWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOandroidpayPaymentWhereUniqueInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentWhereUniqueInput(ctx context.Context, v interface{}) ([]*model.AndroidpayPaymentWhereUniqueInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AndroidpayPaymentWhereUniqueInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOandroidpayPaymentWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentWhereUniqueInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOandroidpayPaymentWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐAndroidpayPaymentWhereUniqueInput(ctx context.Context, v interface{}) (*model.AndroidpayPaymentWhereUniqueInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputandroidpayPaymentWhereUniqueInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOapplepayPayment2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ApplepayPayment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNapplepayPayment2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPayment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOapplepayPayment2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPayment(ctx context.Context, sel ast.SelectionSet, v *model.ApplepayPayment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._applepayPayment(ctx, sel, v)
}

func (ec *executionContext) unmarshalOapplepayPaymentCreateInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentCreateInput(ctx context.Context, v interface{}) ([]*model.ApplepayPaymentCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ApplepayPaymentCreateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOapplepayPaymentCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOapplepayPaymentCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentCreateInput(ctx context.Context, v interface{}) (*model.ApplepayPaymentCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputapplepayPaymentCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOapplepayPaymentRelateToManyInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentRelateToManyInput(ctx context.Context, v interface{}) (*model.ApplepayPaymentRelateToManyInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputapplepayPaymentRelateToManyInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOapplepayPaymentRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentRelateToOneInput(ctx context.Context, v interface{}) (*model.ApplepayPaymentRelateToOneInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputapplepayPaymentRelateToOneInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOapplepayPaymentUpdateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentUpdateInput(ctx context.Context, v interface{}) (*model.ApplepayPaymentUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputapplepayPaymentUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOapplepayPaymentWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentWhereInputᚄ(ctx context.Context, v interface{}) ([]*model.ApplepayPaymentWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ApplepayPaymentWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNapplepayPaymentWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOapplepayPaymentWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentWhereInput(ctx context.Context, v interface{}) (*model.ApplepayPaymentWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputapplepayPaymentWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOapplepayPaymentWhereUniqueInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentWhereUniqueInput(ctx context.Context, v interface{}) ([]*model.ApplepayPaymentWhereUniqueInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ApplepayPaymentWhereUniqueInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOapplepayPaymentWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentWhereUniqueInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOapplepayPaymentWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐApplepayPaymentWhereUniqueInput(ctx context.Context, v interface{}) (*model.ApplepayPaymentWhereUniqueInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputapplepayPaymentWhereUniqueInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOinvoice2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoice(ctx context.Context, sel ast.SelectionSet, v *model.Invoice) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._invoice(ctx, sel, v)
}

func (ec *executionContext) unmarshalOinvoiceCategoryType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceCategoryType(ctx context.Context, v interface{}) ([]*model.InvoiceCategoryType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.InvoiceCategoryType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOinvoiceCategoryType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceCategoryType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOinvoiceCategoryType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceCategoryType(ctx context.Context, sel ast.SelectionSet, v []*model.InvoiceCategoryType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOinvoiceCategoryType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceCategoryType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOinvoiceCategoryType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceCategoryType(ctx context.Context, v interface{}) (*model.InvoiceCategoryType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.InvoiceCategoryType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOinvoiceCategoryType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceCategoryType(ctx context.Context, sel ast.SelectionSet, v *model.InvoiceCategoryType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOinvoiceCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceCreateInput(ctx context.Context, v interface{}) (*model.InvoiceCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputinvoiceCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOinvoiceRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceRelateToOneInput(ctx context.Context, v interface{}) (*model.InvoiceRelateToOneInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputinvoiceRelateToOneInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOinvoiceStatusType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceStatusType(ctx context.Context, v interface{}) ([]*model.InvoiceStatusType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.InvoiceStatusType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOinvoiceStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceStatusType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOinvoiceStatusType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceStatusType(ctx context.Context, sel ast.SelectionSet, v []*model.InvoiceStatusType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOinvoiceStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceStatusType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOinvoiceStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceStatusType(ctx context.Context, v interface{}) (*model.InvoiceStatusType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.InvoiceStatusType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOinvoiceStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceStatusType(ctx context.Context, sel ast.SelectionSet, v *model.InvoiceStatusType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOinvoiceUpdateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceUpdateInput(ctx context.Context, v interface{}) (*model.InvoiceUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputinvoiceUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOinvoiceWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceWhereInputᚄ(ctx context.Context, v interface{}) ([]*model.InvoiceWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.InvoiceWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNinvoiceWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOinvoiceWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceWhereInput(ctx context.Context, v interface{}) (*model.InvoiceWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputinvoiceWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOinvoiceWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐInvoiceWhereUniqueInput(ctx context.Context, v interface{}) (*model.InvoiceWhereUniqueInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputinvoiceWhereUniqueInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmarketingMembership2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembership(ctx context.Context, sel ast.SelectionSet, v *model.MarketingMembership) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._marketingMembership(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmarketingMembershipCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipCreateInput(ctx context.Context, v interface{}) (*model.MarketingMembershipCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmarketingMembershipCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOmarketingMembershipRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipRelateToOneInput(ctx context.Context, v interface{}) (*model.MarketingMembershipRelateToOneInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmarketingMembershipRelateToOneInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOmarketingMembershipStatusType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipStatusType(ctx context.Context, v interface{}) ([]*model.MarketingMembershipStatusType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MarketingMembershipStatusType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOmarketingMembershipStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipStatusType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOmarketingMembershipStatusType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipStatusType(ctx context.Context, sel ast.SelectionSet, v []*model.MarketingMembershipStatusType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOmarketingMembershipStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipStatusType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOmarketingMembershipStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipStatusType(ctx context.Context, v interface{}) (*model.MarketingMembershipStatusType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.MarketingMembershipStatusType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmarketingMembershipStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipStatusType(ctx context.Context, sel ast.SelectionSet, v *model.MarketingMembershipStatusType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOmarketingMembershipUpdateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipUpdateInput(ctx context.Context, v interface{}) (*model.MarketingMembershipUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmarketingMembershipUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOmarketingMembershipWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipWhereInputᚄ(ctx context.Context, v interface{}) ([]*model.MarketingMembershipWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MarketingMembershipWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNmarketingMembershipWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOmarketingMembershipWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipWhereInput(ctx context.Context, v interface{}) (*model.MarketingMembershipWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmarketingMembershipWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOmarketingMembershipWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMarketingMembershipWhereUniqueInput(ctx context.Context, v interface{}) (*model.MarketingMembershipWhereUniqueInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmarketingMembershipWhereUniqueInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmember2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMember(ctx context.Context, sel ast.SelectionSet, v *model.Member) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._member(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmemberCreateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	if v == nil {
		return nil, nil
	}
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalOmemberGenderType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberGenderType(ctx context.Context, v interface{}) ([]*model.MemberGenderType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MemberGenderType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOmemberGenderType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberGenderType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOmemberGenderType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberGenderType(ctx context.Context, sel ast.SelectionSet, v []*model.MemberGenderType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOmemberGenderType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberGenderType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOmemberGenderType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberGenderType(ctx context.Context, v interface{}) (*model.MemberGenderType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.MemberGenderType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmemberGenderType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberGenderType(ctx context.Context, sel ast.SelectionSet, v *model.MemberGenderType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOmemberInfo2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberInfo(ctx context.Context, sel ast.SelectionSet, v *model.MemberInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._memberInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmemberRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberRelateToOneInput(ctx context.Context, v interface{}) (*model.MemberRelateToOneInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmemberRelateToOneInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOmemberStateType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberStateType(ctx context.Context, v interface{}) ([]*model.MemberStateType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MemberStateType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOmemberStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberStateType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOmemberStateType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberStateType(ctx context.Context, sel ast.SelectionSet, v []*model.MemberStateType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOmemberStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberStateType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOmemberStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberStateType(ctx context.Context, v interface{}) (*model.MemberStateType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.MemberStateType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmemberStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberStateType(ctx context.Context, sel ast.SelectionSet, v *model.MemberStateType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOmemberTypeType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberTypeType(ctx context.Context, v interface{}) ([]*model.MemberTypeType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MemberTypeType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOmemberTypeType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberTypeType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOmemberTypeType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberTypeType(ctx context.Context, sel ast.SelectionSet, v []*model.MemberTypeType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOmemberTypeType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberTypeType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOmemberTypeType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberTypeType(ctx context.Context, v interface{}) (*model.MemberTypeType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.MemberTypeType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmemberTypeType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberTypeType(ctx context.Context, sel ast.SelectionSet, v *model.MemberTypeType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOmemberUpdateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	if v == nil {
		return nil, nil
	}
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalOmemberWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberWhereInputᚄ(ctx context.Context, v interface{}) ([]*model.MemberWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MemberWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNmemberWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOmemberWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberWhereInput(ctx context.Context, v interface{}) (*model.MemberWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmemberWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOmemberWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMemberWhereUniqueInput(ctx context.Context, v interface{}) (*model.MemberWhereUniqueInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmemberWhereUniqueInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOmerchandiseCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseCreateInput(ctx context.Context, v interface{}) (*model.MerchandiseCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmerchandiseCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOmerchandiseCurrencyType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseCurrencyType(ctx context.Context, v interface{}) ([]*model.MerchandiseCurrencyType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MerchandiseCurrencyType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOmerchandiseCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseCurrencyType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOmerchandiseCurrencyType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseCurrencyType(ctx context.Context, sel ast.SelectionSet, v []*model.MerchandiseCurrencyType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOmerchandiseCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseCurrencyType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOmerchandiseCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseCurrencyType(ctx context.Context, v interface{}) (*model.MerchandiseCurrencyType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.MerchandiseCurrencyType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmerchandiseCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseCurrencyType(ctx context.Context, sel ast.SelectionSet, v *model.MerchandiseCurrencyType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOmerchandiseStateType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseStateType(ctx context.Context, v interface{}) ([]*model.MerchandiseStateType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MerchandiseStateType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOmerchandiseStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseStateType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOmerchandiseStateType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseStateType(ctx context.Context, sel ast.SelectionSet, v []*model.MerchandiseStateType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOmerchandiseStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseStateType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOmerchandiseStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseStateType(ctx context.Context, v interface{}) (*model.MerchandiseStateType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.MerchandiseStateType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmerchandiseStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseStateType(ctx context.Context, sel ast.SelectionSet, v *model.MerchandiseStateType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOmerchandiseUpdateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseUpdateInput(ctx context.Context, v interface{}) (*model.MerchandiseUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmerchandiseUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOmerchandiseWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseWhereInputᚄ(ctx context.Context, v interface{}) ([]*model.MerchandiseWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MerchandiseWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNmerchandiseWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐMerchandiseWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOnewebpayPayment2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.NewebpayPayment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNnewebpayPayment2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPayment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOnewebpayPayment2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPayment(ctx context.Context, sel ast.SelectionSet, v *model.NewebpayPayment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._newebpayPayment(ctx, sel, v)
}

func (ec *executionContext) unmarshalOnewebpayPaymentCreateInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentCreateInput(ctx context.Context, v interface{}) ([]*model.NewebpayPaymentCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.NewebpayPaymentCreateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOnewebpayPaymentCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOnewebpayPaymentCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentCreateInput(ctx context.Context, v interface{}) (*model.NewebpayPaymentCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputnewebpayPaymentCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOnewebpayPaymentInfo2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentInfo(ctx context.Context, sel ast.SelectionSet, v *model.NewebpayPaymentInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._newebpayPaymentInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOnewebpayPaymentInfoCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentInfoCreateInput(ctx context.Context, v interface{}) (*model.NewebpayPaymentInfoCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputnewebpayPaymentInfoCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOnewebpayPaymentInfoRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentInfoRelateToOneInput(ctx context.Context, v interface{}) (*model.NewebpayPaymentInfoRelateToOneInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputnewebpayPaymentInfoRelateToOneInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOnewebpayPaymentInfoUpdateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentInfoUpdateInput(ctx context.Context, v interface{}) (*model.NewebpayPaymentInfoUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputnewebpayPaymentInfoUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOnewebpayPaymentInfoWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentInfoWhereInputᚄ(ctx context.Context, v interface{}) ([]*model.NewebpayPaymentInfoWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.NewebpayPaymentInfoWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNnewebpayPaymentInfoWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentInfoWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOnewebpayPaymentInfoWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentInfoWhereInput(ctx context.Context, v interface{}) (*model.NewebpayPaymentInfoWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputnewebpayPaymentInfoWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOnewebpayPaymentInfoWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentInfoWhereUniqueInput(ctx context.Context, v interface{}) (*model.NewebpayPaymentInfoWhereUniqueInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputnewebpayPaymentInfoWhereUniqueInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOnewebpayPaymentRelateToManyInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentRelateToManyInput(ctx context.Context, v interface{}) (*model.NewebpayPaymentRelateToManyInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputnewebpayPaymentRelateToManyInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOnewebpayPaymentRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentRelateToOneInput(ctx context.Context, v interface{}) (*model.NewebpayPaymentRelateToOneInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputnewebpayPaymentRelateToOneInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOnewebpayPaymentUpdateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentUpdateInput(ctx context.Context, v interface{}) (*model.NewebpayPaymentUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputnewebpayPaymentUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOnewebpayPaymentWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentWhereInputᚄ(ctx context.Context, v interface{}) ([]*model.NewebpayPaymentWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.NewebpayPaymentWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNnewebpayPaymentWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOnewebpayPaymentWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentWhereInput(ctx context.Context, v interface{}) (*model.NewebpayPaymentWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputnewebpayPaymentWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOnewebpayPaymentWhereUniqueInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentWhereUniqueInput(ctx context.Context, v interface{}) ([]*model.NewebpayPaymentWhereUniqueInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.NewebpayPaymentWhereUniqueInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOnewebpayPaymentWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentWhereUniqueInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOnewebpayPaymentWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐNewebpayPaymentWhereUniqueInput(ctx context.Context, v interface{}) (*model.NewebpayPaymentWhereUniqueInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputnewebpayPaymentWhereUniqueInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOpromotionCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionCreateInput(ctx context.Context, v interface{}) (*model.PromotionCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputpromotionCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOpromotionPlanType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionPlanType(ctx context.Context, v interface{}) ([]*model.PromotionPlanType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.PromotionPlanType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOpromotionPlanType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionPlanType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOpromotionPlanType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionPlanType(ctx context.Context, sel ast.SelectionSet, v []*model.PromotionPlanType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOpromotionPlanType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionPlanType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOpromotionPlanType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionPlanType(ctx context.Context, v interface{}) (*model.PromotionPlanType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.PromotionPlanType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOpromotionPlanType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionPlanType(ctx context.Context, sel ast.SelectionSet, v *model.PromotionPlanType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOpromotionStateType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionStateType(ctx context.Context, v interface{}) ([]*model.PromotionStateType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.PromotionStateType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOpromotionStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionStateType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOpromotionStateType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionStateType(ctx context.Context, sel ast.SelectionSet, v []*model.PromotionStateType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOpromotionStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionStateType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOpromotionStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionStateType(ctx context.Context, v interface{}) (*model.PromotionStateType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.PromotionStateType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOpromotionStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionStateType(ctx context.Context, sel ast.SelectionSet, v *model.PromotionStateType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOpromotionUpdateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionUpdateInput(ctx context.Context, v interface{}) (*model.PromotionUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputpromotionUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOpromotionWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionWhereInputᚄ(ctx context.Context, v interface{}) ([]*model.PromotionWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.PromotionWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNpromotionWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐPromotionWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOsubscription2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Subscription) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNsubscription2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscription(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOsubscription2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscription(ctx context.Context, sel ast.SelectionSet, v *model.Subscription) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._subscription(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsubscriptionCreateInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionCreateInput(ctx context.Context, v interface{}) ([]*model.SubscriptionCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SubscriptionCreateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOsubscriptionCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOsubscriptionCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionCreateInput(ctx context.Context, v interface{}) (*model.SubscriptionCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsubscriptionCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsubscriptionCreation2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionCreation(ctx context.Context, sel ast.SelectionSet, v *model.SubscriptionCreation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._subscriptionCreation(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsubscriptionCurrencyType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionCurrencyType(ctx context.Context, v interface{}) ([]*model.SubscriptionCurrencyType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SubscriptionCurrencyType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOsubscriptionCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionCurrencyType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOsubscriptionCurrencyType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionCurrencyType(ctx context.Context, sel ast.SelectionSet, v []*model.SubscriptionCurrencyType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOsubscriptionCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionCurrencyType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOsubscriptionCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionCurrencyType(ctx context.Context, v interface{}) (*model.SubscriptionCurrencyType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.SubscriptionCurrencyType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsubscriptionCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionCurrencyType(ctx context.Context, sel ast.SelectionSet, v *model.SubscriptionCurrencyType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOsubscriptionFrequencyType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionFrequencyType(ctx context.Context, v interface{}) ([]*model.SubscriptionFrequencyType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SubscriptionFrequencyType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOsubscriptionFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionFrequencyType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOsubscriptionFrequencyType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionFrequencyType(ctx context.Context, sel ast.SelectionSet, v []*model.SubscriptionFrequencyType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOsubscriptionFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionFrequencyType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOsubscriptionFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionFrequencyType(ctx context.Context, v interface{}) (*model.SubscriptionFrequencyType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.SubscriptionFrequencyType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsubscriptionFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionFrequencyType(ctx context.Context, sel ast.SelectionSet, v *model.SubscriptionFrequencyType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOsubscriptionHistoryActionType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryActionType(ctx context.Context, v interface{}) ([]*model.SubscriptionHistoryActionType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SubscriptionHistoryActionType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOsubscriptionHistoryActionType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryActionType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOsubscriptionHistoryActionType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryActionType(ctx context.Context, sel ast.SelectionSet, v []*model.SubscriptionHistoryActionType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOsubscriptionHistoryActionType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryActionType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOsubscriptionHistoryActionType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryActionType(ctx context.Context, v interface{}) (*model.SubscriptionHistoryActionType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.SubscriptionHistoryActionType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsubscriptionHistoryActionType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryActionType(ctx context.Context, sel ast.SelectionSet, v *model.SubscriptionHistoryActionType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOsubscriptionHistoryCreateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryCreateInput(ctx context.Context, v interface{}) (*model.SubscriptionHistoryCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsubscriptionHistoryCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOsubscriptionHistoryCurrencyType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryCurrencyType(ctx context.Context, v interface{}) ([]*model.SubscriptionHistoryCurrencyType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SubscriptionHistoryCurrencyType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOsubscriptionHistoryCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryCurrencyType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOsubscriptionHistoryCurrencyType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryCurrencyType(ctx context.Context, sel ast.SelectionSet, v []*model.SubscriptionHistoryCurrencyType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOsubscriptionHistoryCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryCurrencyType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOsubscriptionHistoryCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryCurrencyType(ctx context.Context, v interface{}) (*model.SubscriptionHistoryCurrencyType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.SubscriptionHistoryCurrencyType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsubscriptionHistoryCurrencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryCurrencyType(ctx context.Context, sel ast.SelectionSet, v *model.SubscriptionHistoryCurrencyType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOsubscriptionHistoryFrequencyType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryFrequencyType(ctx context.Context, v interface{}) ([]*model.SubscriptionHistoryFrequencyType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SubscriptionHistoryFrequencyType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOsubscriptionHistoryFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryFrequencyType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOsubscriptionHistoryFrequencyType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryFrequencyType(ctx context.Context, sel ast.SelectionSet, v []*model.SubscriptionHistoryFrequencyType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOsubscriptionHistoryFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryFrequencyType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOsubscriptionHistoryFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryFrequencyType(ctx context.Context, v interface{}) (*model.SubscriptionHistoryFrequencyType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.SubscriptionHistoryFrequencyType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsubscriptionHistoryFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryFrequencyType(ctx context.Context, sel ast.SelectionSet, v *model.SubscriptionHistoryFrequencyType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOsubscriptionHistoryStatusType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryStatusType(ctx context.Context, v interface{}) ([]*model.SubscriptionHistoryStatusType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SubscriptionHistoryStatusType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOsubscriptionHistoryStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryStatusType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOsubscriptionHistoryStatusType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryStatusType(ctx context.Context, sel ast.SelectionSet, v []*model.SubscriptionHistoryStatusType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOsubscriptionHistoryStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryStatusType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOsubscriptionHistoryStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryStatusType(ctx context.Context, v interface{}) (*model.SubscriptionHistoryStatusType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.SubscriptionHistoryStatusType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsubscriptionHistoryStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryStatusType(ctx context.Context, sel ast.SelectionSet, v *model.SubscriptionHistoryStatusType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOsubscriptionHistoryUpdateInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryUpdateInput(ctx context.Context, v interface{}) (*model.SubscriptionHistoryUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsubscriptionHistoryUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOsubscriptionHistoryWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryWhereInputᚄ(ctx context.Context, v interface{}) ([]*model.SubscriptionHistoryWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SubscriptionHistoryWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNsubscriptionHistoryWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionHistoryWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOsubscriptionInfo2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionInfo(ctx context.Context, sel ast.SelectionSet, v *model.SubscriptionInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._subscriptionInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsubscriptionNextFrequencyType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionNextFrequencyType(ctx context.Context, v interface{}) ([]*model.SubscriptionNextFrequencyType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SubscriptionNextFrequencyType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOsubscriptionNextFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionNextFrequencyType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOsubscriptionNextFrequencyType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionNextFrequencyType(ctx context.Context, sel ast.SelectionSet, v []*model.SubscriptionNextFrequencyType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOsubscriptionNextFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionNextFrequencyType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOsubscriptionNextFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionNextFrequencyType(ctx context.Context, v interface{}) (*model.SubscriptionNextFrequencyType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.SubscriptionNextFrequencyType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsubscriptionNextFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionNextFrequencyType(ctx context.Context, sel ast.SelectionSet, v *model.SubscriptionNextFrequencyType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOsubscriptionPaymentMethodType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionPaymentMethodType(ctx context.Context, v interface{}) ([]*model.SubscriptionPaymentMethodType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SubscriptionPaymentMethodType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOsubscriptionPaymentMethodType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionPaymentMethodType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOsubscriptionPaymentMethodType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionPaymentMethodType(ctx context.Context, sel ast.SelectionSet, v []*model.SubscriptionPaymentMethodType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOsubscriptionPaymentMethodType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionPaymentMethodType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOsubscriptionPaymentMethodType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionPaymentMethodType(ctx context.Context, v interface{}) (*model.SubscriptionPaymentMethodType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.SubscriptionPaymentMethodType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsubscriptionPaymentMethodType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionPaymentMethodType(ctx context.Context, sel ast.SelectionSet, v *model.SubscriptionPaymentMethodType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOsubscriptionRelateToManyInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionRelateToManyInput(ctx context.Context, v interface{}) (*model.SubscriptionRelateToManyInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsubscriptionRelateToManyInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOsubscriptionRelateToOneInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionRelateToOneInput(ctx context.Context, v interface{}) (*model.SubscriptionRelateToOneInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsubscriptionRelateToOneInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOsubscriptionStatusType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionStatusType(ctx context.Context, v interface{}) ([]*model.SubscriptionStatusType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SubscriptionStatusType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOsubscriptionStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionStatusType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOsubscriptionStatusType2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionStatusType(ctx context.Context, sel ast.SelectionSet, v []*model.SubscriptionStatusType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOsubscriptionStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionStatusType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOsubscriptionStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionStatusType(ctx context.Context, v interface{}) (*model.SubscriptionStatusType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.SubscriptionStatusType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsubscriptionStatusType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionStatusType(ctx context.Context, sel ast.SelectionSet, v *model.SubscriptionStatusType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOsubscriptionUpdateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	if v == nil {
		return nil, nil
	}
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalOsubscriptionWhereInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionWhereInputᚄ(ctx context.Context, v interface{}) ([]*model.SubscriptionWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SubscriptionWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNsubscriptionWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOsubscriptionWhereInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionWhereInput(ctx context.Context, v interface{}) (*model.SubscriptionWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsubscriptionWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOsubscriptionWhereUniqueInput2ᚕᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionWhereUniqueInput(ctx context.Context, v interface{}) ([]*model.SubscriptionWhereUniqueInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SubscriptionWhereUniqueInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOsubscriptionWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionWhereUniqueInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOsubscriptionWhereUniqueInput2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐSubscriptionWhereUniqueInput(ctx context.Context, v interface{}) (*model.SubscriptionWhereUniqueInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsubscriptionWhereUniqueInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOupdateMemberStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐUpdateMemberStateType(ctx context.Context, v interface{}) (*model.UpdateMemberStateType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.UpdateMemberStateType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOupdateMemberStateType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐUpdateMemberStateType(ctx context.Context, sel ast.SelectionSet, v *model.UpdateMemberStateType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOupdateSubscriptionNextFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐUpdateSubscriptionNextFrequencyType(ctx context.Context, v interface{}) (*model.UpdateSubscriptionNextFrequencyType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.UpdateSubscriptionNextFrequencyType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOupdateSubscriptionNextFrequencyType2ᚖgithubᚗcomᚋmirrorᚑmediaᚋapigatewayᚋgraphᚋmemberᚋmodelᚐUpdateSubscriptionNextFrequencyType(ctx context.Context, sel ast.SelectionSet, v *model.UpdateSubscriptionNextFrequencyType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

// endregion ***************************** type.gotpl *****************************
