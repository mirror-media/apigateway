// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AndroidpayPaymentsCreateInput struct {
	Data *AndroidpayPaymentCreateInput `json:"data"`
}

type AndroidpayPaymentsUpdateInput struct {
	ID   string                        `json:"id"`
	Data *AndroidpayPaymentUpdateInput `json:"data"`
}

type ApplepayPaymentsCreateInput struct {
	Data *ApplepayPaymentCreateInput `json:"data"`
}

type ApplepayPaymentsUpdateInput struct {
	ID   string                      `json:"id"`
	Data *ApplepayPaymentUpdateInput `json:"data"`
}

type InvoicesCreateInput struct {
	Data *InvoiceCreateInput `json:"data"`
}

type InvoicesUpdateInput struct {
	ID   string              `json:"id"`
	Data *InvoiceUpdateInput `json:"data"`
}

type MarketingMembershipsCreateInput struct {
	Data *MarketingMembershipCreateInput `json:"data"`
}

type MarketingMembershipsUpdateInput struct {
	ID   string                          `json:"id"`
	Data *MarketingMembershipUpdateInput `json:"data"`
}

type MembersCreateInput struct {
	Data map[string]interface{} `json:"data"`
}

type MembersPrivateCreateInput struct {
	Data map[string]interface{} `json:"data"`
}

type MembersPrivateUpdateInput struct {
	ID   string                 `json:"id"`
	Data map[string]interface{} `json:"data"`
}

type MembersUpdateInput struct {
	ID   string                 `json:"id"`
	Data map[string]interface{} `json:"data"`
}

type MerchandisesCreateInput struct {
	Data *MerchandiseCreateInput `json:"data"`
}

type MerchandisesUpdateInput struct {
	ID   string                  `json:"id"`
	Data *MerchandiseUpdateInput `json:"data"`
}

type NewebpayPaymentInfosCreateInput struct {
	Data *NewebpayPaymentInfoCreateInput `json:"data"`
}

type NewebpayPaymentInfosUpdateInput struct {
	ID   string                          `json:"id"`
	Data *NewebpayPaymentInfoUpdateInput `json:"data"`
}

type NewebpayPaymentsCreateInput struct {
	Data *NewebpayPaymentCreateInput `json:"data"`
}

type NewebpayPaymentsUpdateInput struct {
	ID   string                      `json:"id"`
	Data *NewebpayPaymentUpdateInput `json:"data"`
}

type PromotionsCreateInput struct {
	Data *PromotionCreateInput `json:"data"`
}

type PromotionsUpdateInput struct {
	ID   string                `json:"id"`
	Data *PromotionUpdateInput `json:"data"`
}

type SubscriptionHistoriesCreateInput struct {
	Data *SubscriptionHistoryCreateInput `json:"data"`
}

type SubscriptionHistoriesUpdateInput struct {
	ID   string                          `json:"id"`
	Data *SubscriptionHistoryUpdateInput `json:"data"`
}

type SubscriptionsCreateInput struct {
	Data *SubscriptionCreateInput `json:"data"`
}

type SubscriptionsUpdateInput struct {
	ID   string                 `json:"id"`
	Data map[string]interface{} `json:"data"`
}

type AndroidpayPayment struct {
	ID           string        `json:"id"`
	Subscription *Subscription `json:"subscription"`
	Invoice      *Invoice      `json:"invoice"`
	CreatedAt    *string       `json:"createdAt"`
	UpdatedAt    *string       `json:"updatedAt"`
}

type AndroidpayPaymentCreateInput struct {
	Subscription *SubscriptionRelateToOneInput `json:"subscription"`
	Invoice      *InvoiceRelateToOneInput      `json:"invoice"`
	CreatedAt    *string                       `json:"createdAt"`
	UpdatedAt    *string                       `json:"updatedAt"`
}

type AndroidpayPaymentOrderByInput struct {
	ID        *OrderDirection `json:"id"`
	CreatedAt *OrderDirection `json:"createdAt"`
	UpdatedAt *OrderDirection `json:"updatedAt"`
}

type AndroidpayPaymentRelateToManyInput struct {
	Create        []*AndroidpayPaymentCreateInput      `json:"create"`
	Connect       []*AndroidpayPaymentWhereUniqueInput `json:"connect"`
	Disconnect    []*AndroidpayPaymentWhereUniqueInput `json:"disconnect"`
	DisconnectAll *bool                                `json:"disconnectAll"`
}

type AndroidpayPaymentRelateToOneInput struct {
	Create        *AndroidpayPaymentCreateInput      `json:"create"`
	Connect       *AndroidpayPaymentWhereUniqueInput `json:"connect"`
	Disconnect    *AndroidpayPaymentWhereUniqueInput `json:"disconnect"`
	DisconnectAll *bool                              `json:"disconnectAll"`
}

type AndroidpayPaymentUpdateInput struct {
	Subscription *SubscriptionRelateToOneInput `json:"subscription"`
	Invoice      *InvoiceRelateToOneInput      `json:"invoice"`
	CreatedAt    *string                       `json:"createdAt"`
	UpdatedAt    *string                       `json:"updatedAt"`
}

type AndroidpayPaymentWhereInput struct {
	And                []*AndroidpayPaymentWhereInput `json:"AND"`
	Or                 []*AndroidpayPaymentWhereInput `json:"OR"`
	ID                 *string                        `json:"id"`
	IDNot              *string                        `json:"id_not"`
	IDLt               *string                        `json:"id_lt"`
	IDLte              *string                        `json:"id_lte"`
	IDGt               *string                        `json:"id_gt"`
	IDGte              *string                        `json:"id_gte"`
	IDIn               []string                       `json:"id_in"`
	IDNotIn            []string                       `json:"id_not_in"`
	Subscription       *SubscriptionWhereInput        `json:"subscription"`
	SubscriptionIsNull *bool                          `json:"subscription_is_null"`
	Invoice            *InvoiceWhereInput             `json:"invoice"`
	InvoiceIsNull      *bool                          `json:"invoice_is_null"`
	CreatedAt          *string                        `json:"createdAt"`
	CreatedAtNot       *string                        `json:"createdAt_not"`
	CreatedAtLt        *string                        `json:"createdAt_lt"`
	CreatedAtLte       *string                        `json:"createdAt_lte"`
	CreatedAtGt        *string                        `json:"createdAt_gt"`
	CreatedAtGte       *string                        `json:"createdAt_gte"`
	CreatedAtIn        []*string                      `json:"createdAt_in"`
	CreatedAtNotIn     []*string                      `json:"createdAt_not_in"`
	UpdatedAt          *string                        `json:"updatedAt"`
	UpdatedAtNot       *string                        `json:"updatedAt_not"`
	UpdatedAtLt        *string                        `json:"updatedAt_lt"`
	UpdatedAtLte       *string                        `json:"updatedAt_lte"`
	UpdatedAtGt        *string                        `json:"updatedAt_gt"`
	UpdatedAtGte       *string                        `json:"updatedAt_gte"`
	UpdatedAtIn        []*string                      `json:"updatedAt_in"`
	UpdatedAtNotIn     []*string                      `json:"updatedAt_not_in"`
	CreatedByIsNull    *bool                          `json:"createdBy_is_null"`
	UpdatedByIsNull    *bool                          `json:"updatedBy_is_null"`
}

type AndroidpayPaymentWhereUniqueInput struct {
	ID *string `json:"id"`
}

type ApplepayPayment struct {
	ID           string        `json:"id"`
	Subscription *Subscription `json:"subscription"`
	Invoice      *Invoice      `json:"invoice"`
	CreatedAt    *string       `json:"createdAt"`
	UpdatedAt    *string       `json:"updatedAt"`
}

type ApplepayPaymentCreateInput struct {
	Subscription *SubscriptionRelateToOneInput `json:"subscription"`
	Invoice      *InvoiceRelateToOneInput      `json:"invoice"`
	CreatedAt    *string                       `json:"createdAt"`
	UpdatedAt    *string                       `json:"updatedAt"`
}

type ApplepayPaymentOrderByInput struct {
	ID        *OrderDirection `json:"id"`
	CreatedAt *OrderDirection `json:"createdAt"`
	UpdatedAt *OrderDirection `json:"updatedAt"`
}

type ApplepayPaymentRelateToManyInput struct {
	Create        []*ApplepayPaymentCreateInput      `json:"create"`
	Connect       []*ApplepayPaymentWhereUniqueInput `json:"connect"`
	Disconnect    []*ApplepayPaymentWhereUniqueInput `json:"disconnect"`
	DisconnectAll *bool                              `json:"disconnectAll"`
}

type ApplepayPaymentRelateToOneInput struct {
	Create        *ApplepayPaymentCreateInput      `json:"create"`
	Connect       *ApplepayPaymentWhereUniqueInput `json:"connect"`
	Disconnect    *ApplepayPaymentWhereUniqueInput `json:"disconnect"`
	DisconnectAll *bool                            `json:"disconnectAll"`
}

type ApplepayPaymentUpdateInput struct {
	Subscription *SubscriptionRelateToOneInput `json:"subscription"`
	Invoice      *InvoiceRelateToOneInput      `json:"invoice"`
	CreatedAt    *string                       `json:"createdAt"`
	UpdatedAt    *string                       `json:"updatedAt"`
}

type ApplepayPaymentWhereInput struct {
	And                []*ApplepayPaymentWhereInput `json:"AND"`
	Or                 []*ApplepayPaymentWhereInput `json:"OR"`
	ID                 *string                      `json:"id"`
	IDNot              *string                      `json:"id_not"`
	IDLt               *string                      `json:"id_lt"`
	IDLte              *string                      `json:"id_lte"`
	IDGt               *string                      `json:"id_gt"`
	IDGte              *string                      `json:"id_gte"`
	IDIn               []string                     `json:"id_in"`
	IDNotIn            []string                     `json:"id_not_in"`
	Subscription       *SubscriptionWhereInput      `json:"subscription"`
	SubscriptionIsNull *bool                        `json:"subscription_is_null"`
	Invoice            *InvoiceWhereInput           `json:"invoice"`
	InvoiceIsNull      *bool                        `json:"invoice_is_null"`
	CreatedAt          *string                      `json:"createdAt"`
	CreatedAtNot       *string                      `json:"createdAt_not"`
	CreatedAtLt        *string                      `json:"createdAt_lt"`
	CreatedAtLte       *string                      `json:"createdAt_lte"`
	CreatedAtGt        *string                      `json:"createdAt_gt"`
	CreatedAtGte       *string                      `json:"createdAt_gte"`
	CreatedAtIn        []*string                    `json:"createdAt_in"`
	CreatedAtNotIn     []*string                    `json:"createdAt_not_in"`
	UpdatedAt          *string                      `json:"updatedAt"`
	UpdatedAtNot       *string                      `json:"updatedAt_not"`
	UpdatedAtLt        *string                      `json:"updatedAt_lt"`
	UpdatedAtLte       *string                      `json:"updatedAt_lte"`
	UpdatedAtGt        *string                      `json:"updatedAt_gt"`
	UpdatedAtGte       *string                      `json:"updatedAt_gte"`
	UpdatedAtIn        []*string                    `json:"updatedAt_in"`
	UpdatedAtNotIn     []*string                    `json:"updatedAt_not_in"`
	CreatedByIsNull    *bool                        `json:"createdBy_is_null"`
	UpdatedByIsNull    *bool                        `json:"updatedBy_is_null"`
}

type ApplepayPaymentWhereUniqueInput struct {
	ID *string `json:"id"`
}

type Invoice struct {
	ID                string               `json:"id"`
	NewebpayPayment   *NewebpayPayment     `json:"newebpayPayment"`
	ApplepayPayment   *ApplepayPayment     `json:"applepayPayment"`
	AndroidpayPayment *AndroidpayPayment   `json:"androidpayPayment"`
	Amount            *int                 `json:"amount"`
	Email             *string              `json:"email"`
	Desc              *string              `json:"desc"`
	InvoiceNo         *string              `json:"invoiceNo"`
	Category          *InvoiceCategoryType `json:"category"`
	BuyerName         *string              `json:"buyerName"`
	BuyerUbn          *string              `json:"buyerUBN"`
	CarrierType       *int                 `json:"carrierType"`
	CarrierNum        *string              `json:"carrierNum"`
	LoveCode          *int                 `json:"loveCode"`
	Status            *InvoiceStatusType   `json:"status"`
	CreatedAt         *string              `json:"createdAt"`
	UpdatedAt         *string              `json:"updatedAt"`
}

type InvoiceCreateInput struct {
	NewebpayPayment   *NewebpayPaymentRelateToOneInput   `json:"newebpayPayment"`
	ApplepayPayment   *ApplepayPaymentRelateToOneInput   `json:"applepayPayment"`
	AndroidpayPayment *AndroidpayPaymentRelateToOneInput `json:"androidpayPayment"`
	Amount            *int                               `json:"amount"`
	Email             *string                            `json:"email"`
	Desc              *string                            `json:"desc"`
	InvoiceNo         *string                            `json:"invoiceNo"`
	Category          *InvoiceCategoryType               `json:"category"`
	BuyerName         *string                            `json:"buyerName"`
	BuyerUbn          *string                            `json:"buyerUBN"`
	CarrierType       *int                               `json:"carrierType"`
	CarrierNum        *string                            `json:"carrierNum"`
	LoveCode          *int                               `json:"loveCode"`
	Status            *InvoiceStatusType                 `json:"status"`
	CreatedAt         *string                            `json:"createdAt"`
	UpdatedAt         *string                            `json:"updatedAt"`
}

type InvoiceOrderByInput struct {
	ID          *OrderDirection `json:"id"`
	Amount      *OrderDirection `json:"amount"`
	Email       *OrderDirection `json:"email"`
	Desc        *OrderDirection `json:"desc"`
	InvoiceNo   *OrderDirection `json:"invoiceNo"`
	Category    *OrderDirection `json:"category"`
	BuyerName   *OrderDirection `json:"buyerName"`
	BuyerUbn    *OrderDirection `json:"buyerUBN"`
	CarrierType *OrderDirection `json:"carrierType"`
	CarrierNum  *OrderDirection `json:"carrierNum"`
	LoveCode    *OrderDirection `json:"loveCode"`
	Status      *OrderDirection `json:"status"`
	CreatedAt   *OrderDirection `json:"createdAt"`
	UpdatedAt   *OrderDirection `json:"updatedAt"`
}

type InvoiceRelateToOneInput struct {
	Create        *InvoiceCreateInput      `json:"create"`
	Connect       *InvoiceWhereUniqueInput `json:"connect"`
	Disconnect    *InvoiceWhereUniqueInput `json:"disconnect"`
	DisconnectAll *bool                    `json:"disconnectAll"`
}

type InvoiceUpdateInput struct {
	NewebpayPayment   *NewebpayPaymentRelateToOneInput   `json:"newebpayPayment"`
	ApplepayPayment   *ApplepayPaymentRelateToOneInput   `json:"applepayPayment"`
	AndroidpayPayment *AndroidpayPaymentRelateToOneInput `json:"androidpayPayment"`
	Amount            *int                               `json:"amount"`
	Email             *string                            `json:"email"`
	Desc              *string                            `json:"desc"`
	InvoiceNo         *string                            `json:"invoiceNo"`
	Category          *InvoiceCategoryType               `json:"category"`
	BuyerName         *string                            `json:"buyerName"`
	BuyerUbn          *string                            `json:"buyerUBN"`
	CarrierType       *int                               `json:"carrierType"`
	CarrierNum        *string                            `json:"carrierNum"`
	LoveCode          *int                               `json:"loveCode"`
	Status            *InvoiceStatusType                 `json:"status"`
	CreatedAt         *string                            `json:"createdAt"`
	UpdatedAt         *string                            `json:"updatedAt"`
}

type InvoiceWhereInput struct {
	And                      []*InvoiceWhereInput         `json:"AND"`
	Or                       []*InvoiceWhereInput         `json:"OR"`
	ID                       *string                      `json:"id"`
	IDNot                    *string                      `json:"id_not"`
	IDLt                     *string                      `json:"id_lt"`
	IDLte                    *string                      `json:"id_lte"`
	IDGt                     *string                      `json:"id_gt"`
	IDGte                    *string                      `json:"id_gte"`
	IDIn                     []string                     `json:"id_in"`
	IDNotIn                  []string                     `json:"id_not_in"`
	NewebpayPayment          *NewebpayPaymentWhereInput   `json:"newebpayPayment"`
	NewebpayPaymentIsNull    *bool                        `json:"newebpayPayment_is_null"`
	ApplepayPayment          *ApplepayPaymentWhereInput   `json:"applepayPayment"`
	ApplepayPaymentIsNull    *bool                        `json:"applepayPayment_is_null"`
	AndroidpayPayment        *AndroidpayPaymentWhereInput `json:"androidpayPayment"`
	AndroidpayPaymentIsNull  *bool                        `json:"androidpayPayment_is_null"`
	Amount                   *int                         `json:"amount"`
	AmountNot                *int                         `json:"amount_not"`
	AmountLt                 *int                         `json:"amount_lt"`
	AmountLte                *int                         `json:"amount_lte"`
	AmountGt                 *int                         `json:"amount_gt"`
	AmountGte                *int                         `json:"amount_gte"`
	AmountIn                 []*int                       `json:"amount_in"`
	AmountNotIn              []*int                       `json:"amount_not_in"`
	Email                    *string                      `json:"email"`
	EmailNot                 *string                      `json:"email_not"`
	EmailContains            *string                      `json:"email_contains"`
	EmailNotContains         *string                      `json:"email_not_contains"`
	EmailStartsWith          *string                      `json:"email_starts_with"`
	EmailNotStartsWith       *string                      `json:"email_not_starts_with"`
	EmailEndsWith            *string                      `json:"email_ends_with"`
	EmailNotEndsWith         *string                      `json:"email_not_ends_with"`
	EmailI                   *string                      `json:"email_i"`
	EmailNotI                *string                      `json:"email_not_i"`
	EmailContainsI           *string                      `json:"email_contains_i"`
	EmailNotContainsI        *string                      `json:"email_not_contains_i"`
	EmailStartsWithI         *string                      `json:"email_starts_with_i"`
	EmailNotStartsWithI      *string                      `json:"email_not_starts_with_i"`
	EmailEndsWithI           *string                      `json:"email_ends_with_i"`
	EmailNotEndsWithI        *string                      `json:"email_not_ends_with_i"`
	EmailIn                  []*string                    `json:"email_in"`
	EmailNotIn               []*string                    `json:"email_not_in"`
	Desc                     *string                      `json:"desc"`
	DescNot                  *string                      `json:"desc_not"`
	DescContains             *string                      `json:"desc_contains"`
	DescNotContains          *string                      `json:"desc_not_contains"`
	DescStartsWith           *string                      `json:"desc_starts_with"`
	DescNotStartsWith        *string                      `json:"desc_not_starts_with"`
	DescEndsWith             *string                      `json:"desc_ends_with"`
	DescNotEndsWith          *string                      `json:"desc_not_ends_with"`
	DescI                    *string                      `json:"desc_i"`
	DescNotI                 *string                      `json:"desc_not_i"`
	DescContainsI            *string                      `json:"desc_contains_i"`
	DescNotContainsI         *string                      `json:"desc_not_contains_i"`
	DescStartsWithI          *string                      `json:"desc_starts_with_i"`
	DescNotStartsWithI       *string                      `json:"desc_not_starts_with_i"`
	DescEndsWithI            *string                      `json:"desc_ends_with_i"`
	DescNotEndsWithI         *string                      `json:"desc_not_ends_with_i"`
	DescIn                   []*string                    `json:"desc_in"`
	DescNotIn                []*string                    `json:"desc_not_in"`
	InvoiceNo                *string                      `json:"invoiceNo"`
	InvoiceNoNot             *string                      `json:"invoiceNo_not"`
	InvoiceNoContains        *string                      `json:"invoiceNo_contains"`
	InvoiceNoNotContains     *string                      `json:"invoiceNo_not_contains"`
	InvoiceNoStartsWith      *string                      `json:"invoiceNo_starts_with"`
	InvoiceNoNotStartsWith   *string                      `json:"invoiceNo_not_starts_with"`
	InvoiceNoEndsWith        *string                      `json:"invoiceNo_ends_with"`
	InvoiceNoNotEndsWith     *string                      `json:"invoiceNo_not_ends_with"`
	InvoiceNoI               *string                      `json:"invoiceNo_i"`
	InvoiceNoNotI            *string                      `json:"invoiceNo_not_i"`
	InvoiceNoContainsI       *string                      `json:"invoiceNo_contains_i"`
	InvoiceNoNotContainsI    *string                      `json:"invoiceNo_not_contains_i"`
	InvoiceNoStartsWithI     *string                      `json:"invoiceNo_starts_with_i"`
	InvoiceNoNotStartsWithI  *string                      `json:"invoiceNo_not_starts_with_i"`
	InvoiceNoEndsWithI       *string                      `json:"invoiceNo_ends_with_i"`
	InvoiceNoNotEndsWithI    *string                      `json:"invoiceNo_not_ends_with_i"`
	InvoiceNoIn              []*string                    `json:"invoiceNo_in"`
	InvoiceNoNotIn           []*string                    `json:"invoiceNo_not_in"`
	Category                 *InvoiceCategoryType         `json:"category"`
	CategoryNot              *InvoiceCategoryType         `json:"category_not"`
	CategoryIn               []*InvoiceCategoryType       `json:"category_in"`
	CategoryNotIn            []*InvoiceCategoryType       `json:"category_not_in"`
	BuyerName                *string                      `json:"buyerName"`
	BuyerNameNot             *string                      `json:"buyerName_not"`
	BuyerNameContains        *string                      `json:"buyerName_contains"`
	BuyerNameNotContains     *string                      `json:"buyerName_not_contains"`
	BuyerNameStartsWith      *string                      `json:"buyerName_starts_with"`
	BuyerNameNotStartsWith   *string                      `json:"buyerName_not_starts_with"`
	BuyerNameEndsWith        *string                      `json:"buyerName_ends_with"`
	BuyerNameNotEndsWith     *string                      `json:"buyerName_not_ends_with"`
	BuyerNameI               *string                      `json:"buyerName_i"`
	BuyerNameNotI            *string                      `json:"buyerName_not_i"`
	BuyerNameContainsI       *string                      `json:"buyerName_contains_i"`
	BuyerNameNotContainsI    *string                      `json:"buyerName_not_contains_i"`
	BuyerNameStartsWithI     *string                      `json:"buyerName_starts_with_i"`
	BuyerNameNotStartsWithI  *string                      `json:"buyerName_not_starts_with_i"`
	BuyerNameEndsWithI       *string                      `json:"buyerName_ends_with_i"`
	BuyerNameNotEndsWithI    *string                      `json:"buyerName_not_ends_with_i"`
	BuyerNameIn              []*string                    `json:"buyerName_in"`
	BuyerNameNotIn           []*string                    `json:"buyerName_not_in"`
	BuyerUbn                 *string                      `json:"buyerUBN"`
	BuyerUbnNot              *string                      `json:"buyerUBN_not"`
	BuyerUbnContains         *string                      `json:"buyerUBN_contains"`
	BuyerUbnNotContains      *string                      `json:"buyerUBN_not_contains"`
	BuyerUbnStartsWith       *string                      `json:"buyerUBN_starts_with"`
	BuyerUbnNotStartsWith    *string                      `json:"buyerUBN_not_starts_with"`
	BuyerUbnEndsWith         *string                      `json:"buyerUBN_ends_with"`
	BuyerUbnNotEndsWith      *string                      `json:"buyerUBN_not_ends_with"`
	BuyerUbnI                *string                      `json:"buyerUBN_i"`
	BuyerUbnNotI             *string                      `json:"buyerUBN_not_i"`
	BuyerUbnContainsI        *string                      `json:"buyerUBN_contains_i"`
	BuyerUbnNotContainsI     *string                      `json:"buyerUBN_not_contains_i"`
	BuyerUbnStartsWithI      *string                      `json:"buyerUBN_starts_with_i"`
	BuyerUbnNotStartsWithI   *string                      `json:"buyerUBN_not_starts_with_i"`
	BuyerUbnEndsWithI        *string                      `json:"buyerUBN_ends_with_i"`
	BuyerUbnNotEndsWithI     *string                      `json:"buyerUBN_not_ends_with_i"`
	BuyerUbnIn               []*string                    `json:"buyerUBN_in"`
	BuyerUbnNotIn            []*string                    `json:"buyerUBN_not_in"`
	CarrierType              *int                         `json:"carrierType"`
	CarrierTypeNot           *int                         `json:"carrierType_not"`
	CarrierTypeIn            []*int                       `json:"carrierType_in"`
	CarrierTypeNotIn         []*int                       `json:"carrierType_not_in"`
	CarrierNum               *string                      `json:"carrierNum"`
	CarrierNumNot            *string                      `json:"carrierNum_not"`
	CarrierNumContains       *string                      `json:"carrierNum_contains"`
	CarrierNumNotContains    *string                      `json:"carrierNum_not_contains"`
	CarrierNumStartsWith     *string                      `json:"carrierNum_starts_with"`
	CarrierNumNotStartsWith  *string                      `json:"carrierNum_not_starts_with"`
	CarrierNumEndsWith       *string                      `json:"carrierNum_ends_with"`
	CarrierNumNotEndsWith    *string                      `json:"carrierNum_not_ends_with"`
	CarrierNumI              *string                      `json:"carrierNum_i"`
	CarrierNumNotI           *string                      `json:"carrierNum_not_i"`
	CarrierNumContainsI      *string                      `json:"carrierNum_contains_i"`
	CarrierNumNotContainsI   *string                      `json:"carrierNum_not_contains_i"`
	CarrierNumStartsWithI    *string                      `json:"carrierNum_starts_with_i"`
	CarrierNumNotStartsWithI *string                      `json:"carrierNum_not_starts_with_i"`
	CarrierNumEndsWithI      *string                      `json:"carrierNum_ends_with_i"`
	CarrierNumNotEndsWithI   *string                      `json:"carrierNum_not_ends_with_i"`
	CarrierNumIn             []*string                    `json:"carrierNum_in"`
	CarrierNumNotIn          []*string                    `json:"carrierNum_not_in"`
	LoveCode                 *int                         `json:"loveCode"`
	LoveCodeNot              *int                         `json:"loveCode_not"`
	LoveCodeLt               *int                         `json:"loveCode_lt"`
	LoveCodeLte              *int                         `json:"loveCode_lte"`
	LoveCodeGt               *int                         `json:"loveCode_gt"`
	LoveCodeGte              *int                         `json:"loveCode_gte"`
	LoveCodeIn               []*int                       `json:"loveCode_in"`
	LoveCodeNotIn            []*int                       `json:"loveCode_not_in"`
	Status                   *InvoiceStatusType           `json:"status"`
	StatusNot                *InvoiceStatusType           `json:"status_not"`
	StatusIn                 []*InvoiceStatusType         `json:"status_in"`
	StatusNotIn              []*InvoiceStatusType         `json:"status_not_in"`
	CreatedAt                *string                      `json:"createdAt"`
	CreatedAtNot             *string                      `json:"createdAt_not"`
	CreatedAtLt              *string                      `json:"createdAt_lt"`
	CreatedAtLte             *string                      `json:"createdAt_lte"`
	CreatedAtGt              *string                      `json:"createdAt_gt"`
	CreatedAtGte             *string                      `json:"createdAt_gte"`
	CreatedAtIn              []*string                    `json:"createdAt_in"`
	CreatedAtNotIn           []*string                    `json:"createdAt_not_in"`
	UpdatedAt                *string                      `json:"updatedAt"`
	UpdatedAtNot             *string                      `json:"updatedAt_not"`
	UpdatedAtLt              *string                      `json:"updatedAt_lt"`
	UpdatedAtLte             *string                      `json:"updatedAt_lte"`
	UpdatedAtGt              *string                      `json:"updatedAt_gt"`
	UpdatedAtGte             *string                      `json:"updatedAt_gte"`
	UpdatedAtIn              []*string                    `json:"updatedAt_in"`
	UpdatedAtNotIn           []*string                    `json:"updatedAt_not_in"`
	CreatedByIsNull          *bool                        `json:"createdBy_is_null"`
	UpdatedByIsNull          *bool                        `json:"updatedBy_is_null"`
}

type InvoiceWhereUniqueInput struct {
	ID        *string `json:"id"`
	InvoiceNo *string `json:"invoiceNo"`
}

type MarketingMembership struct {
	ID             string                         `json:"id"`
	Member         *Member                        `json:"member"`
	Status         *MarketingMembershipStatusType `json:"status"`
	StartDate      *string                        `json:"startDate"`
	EndDate        *string                        `json:"endDate"`
	RequesterEmail *string                        `json:"requesterEmail"`
	ApprovedBy     *string                        `json:"approvedBy"`
	CreatedAt      *string                        `json:"createdAt"`
	UpdatedAt      *string                        `json:"updatedAt"`
}

type MarketingMembershipCreateInput struct {
	Member         *MemberRelateToOneInput        `json:"member"`
	Status         *MarketingMembershipStatusType `json:"status"`
	StartDate      *string                        `json:"startDate"`
	EndDate        *string                        `json:"endDate"`
	RequesterEmail *string                        `json:"requesterEmail"`
	ApprovedBy     *string                        `json:"approvedBy"`
	CreatedAt      *string                        `json:"createdAt"`
	UpdatedAt      *string                        `json:"updatedAt"`
}

type MarketingMembershipOrderByInput struct {
	ID             *OrderDirection `json:"id"`
	Status         *OrderDirection `json:"status"`
	StartDate      *OrderDirection `json:"startDate"`
	EndDate        *OrderDirection `json:"endDate"`
	RequesterEmail *OrderDirection `json:"requesterEmail"`
	ApprovedBy     *OrderDirection `json:"approvedBy"`
	CreatedAt      *OrderDirection `json:"createdAt"`
	UpdatedAt      *OrderDirection `json:"updatedAt"`
}

type MarketingMembershipRelateToOneInput struct {
	Create        *MarketingMembershipCreateInput      `json:"create"`
	Connect       *MarketingMembershipWhereUniqueInput `json:"connect"`
	Disconnect    *MarketingMembershipWhereUniqueInput `json:"disconnect"`
	DisconnectAll *bool                                `json:"disconnectAll"`
}

type MarketingMembershipUpdateInput struct {
	Member         *MemberRelateToOneInput        `json:"member"`
	Status         *MarketingMembershipStatusType `json:"status"`
	StartDate      *string                        `json:"startDate"`
	EndDate        *string                        `json:"endDate"`
	RequesterEmail *string                        `json:"requesterEmail"`
	ApprovedBy     *string                        `json:"approvedBy"`
	CreatedAt      *string                        `json:"createdAt"`
	UpdatedAt      *string                        `json:"updatedAt"`
}

type MarketingMembershipWhereInput struct {
	And                          []*MarketingMembershipWhereInput `json:"AND"`
	Or                           []*MarketingMembershipWhereInput `json:"OR"`
	ID                           *string                          `json:"id"`
	IDNot                        *string                          `json:"id_not"`
	IDLt                         *string                          `json:"id_lt"`
	IDLte                        *string                          `json:"id_lte"`
	IDGt                         *string                          `json:"id_gt"`
	IDGte                        *string                          `json:"id_gte"`
	IDIn                         []string                         `json:"id_in"`
	IDNotIn                      []string                         `json:"id_not_in"`
	Member                       *MemberWhereInput                `json:"member"`
	MemberIsNull                 *bool                            `json:"member_is_null"`
	Status                       *MarketingMembershipStatusType   `json:"status"`
	StatusNot                    *MarketingMembershipStatusType   `json:"status_not"`
	StatusIn                     []*MarketingMembershipStatusType `json:"status_in"`
	StatusNotIn                  []*MarketingMembershipStatusType `json:"status_not_in"`
	StartDate                    *string                          `json:"startDate"`
	StartDateNot                 *string                          `json:"startDate_not"`
	StartDateLt                  *string                          `json:"startDate_lt"`
	StartDateLte                 *string                          `json:"startDate_lte"`
	StartDateGt                  *string                          `json:"startDate_gt"`
	StartDateGte                 *string                          `json:"startDate_gte"`
	StartDateIn                  []*string                        `json:"startDate_in"`
	StartDateNotIn               []*string                        `json:"startDate_not_in"`
	EndDate                      *string                          `json:"endDate"`
	EndDateNot                   *string                          `json:"endDate_not"`
	EndDateLt                    *string                          `json:"endDate_lt"`
	EndDateLte                   *string                          `json:"endDate_lte"`
	EndDateGt                    *string                          `json:"endDate_gt"`
	EndDateGte                   *string                          `json:"endDate_gte"`
	EndDateIn                    []*string                        `json:"endDate_in"`
	EndDateNotIn                 []*string                        `json:"endDate_not_in"`
	RequesterEmail               *string                          `json:"requesterEmail"`
	RequesterEmailNot            *string                          `json:"requesterEmail_not"`
	RequesterEmailContains       *string                          `json:"requesterEmail_contains"`
	RequesterEmailNotContains    *string                          `json:"requesterEmail_not_contains"`
	RequesterEmailStartsWith     *string                          `json:"requesterEmail_starts_with"`
	RequesterEmailNotStartsWith  *string                          `json:"requesterEmail_not_starts_with"`
	RequesterEmailEndsWith       *string                          `json:"requesterEmail_ends_with"`
	RequesterEmailNotEndsWith    *string                          `json:"requesterEmail_not_ends_with"`
	RequesterEmailI              *string                          `json:"requesterEmail_i"`
	RequesterEmailNotI           *string                          `json:"requesterEmail_not_i"`
	RequesterEmailContainsI      *string                          `json:"requesterEmail_contains_i"`
	RequesterEmailNotContainsI   *string                          `json:"requesterEmail_not_contains_i"`
	RequesterEmailStartsWithI    *string                          `json:"requesterEmail_starts_with_i"`
	RequesterEmailNotStartsWithI *string                          `json:"requesterEmail_not_starts_with_i"`
	RequesterEmailEndsWithI      *string                          `json:"requesterEmail_ends_with_i"`
	RequesterEmailNotEndsWithI   *string                          `json:"requesterEmail_not_ends_with_i"`
	RequesterEmailIn             []*string                        `json:"requesterEmail_in"`
	RequesterEmailNotIn          []*string                        `json:"requesterEmail_not_in"`
	ApprovedBy                   *string                          `json:"approvedBy"`
	ApprovedByNot                *string                          `json:"approvedBy_not"`
	ApprovedByContains           *string                          `json:"approvedBy_contains"`
	ApprovedByNotContains        *string                          `json:"approvedBy_not_contains"`
	ApprovedByStartsWith         *string                          `json:"approvedBy_starts_with"`
	ApprovedByNotStartsWith      *string                          `json:"approvedBy_not_starts_with"`
	ApprovedByEndsWith           *string                          `json:"approvedBy_ends_with"`
	ApprovedByNotEndsWith        *string                          `json:"approvedBy_not_ends_with"`
	ApprovedByI                  *string                          `json:"approvedBy_i"`
	ApprovedByNotI               *string                          `json:"approvedBy_not_i"`
	ApprovedByContainsI          *string                          `json:"approvedBy_contains_i"`
	ApprovedByNotContainsI       *string                          `json:"approvedBy_not_contains_i"`
	ApprovedByStartsWithI        *string                          `json:"approvedBy_starts_with_i"`
	ApprovedByNotStartsWithI     *string                          `json:"approvedBy_not_starts_with_i"`
	ApprovedByEndsWithI          *string                          `json:"approvedBy_ends_with_i"`
	ApprovedByNotEndsWithI       *string                          `json:"approvedBy_not_ends_with_i"`
	ApprovedByIn                 []*string                        `json:"approvedBy_in"`
	ApprovedByNotIn              []*string                        `json:"approvedBy_not_in"`
	CreatedAt                    *string                          `json:"createdAt"`
	CreatedAtNot                 *string                          `json:"createdAt_not"`
	CreatedAtLt                  *string                          `json:"createdAt_lt"`
	CreatedAtLte                 *string                          `json:"createdAt_lte"`
	CreatedAtGt                  *string                          `json:"createdAt_gt"`
	CreatedAtGte                 *string                          `json:"createdAt_gte"`
	CreatedAtIn                  []*string                        `json:"createdAt_in"`
	CreatedAtNotIn               []*string                        `json:"createdAt_not_in"`
	UpdatedAt                    *string                          `json:"updatedAt"`
	UpdatedAtNot                 *string                          `json:"updatedAt_not"`
	UpdatedAtLt                  *string                          `json:"updatedAt_lt"`
	UpdatedAtLte                 *string                          `json:"updatedAt_lte"`
	UpdatedAtGt                  *string                          `json:"updatedAt_gt"`
	UpdatedAtGte                 *string                          `json:"updatedAt_gte"`
	UpdatedAtIn                  []*string                        `json:"updatedAt_in"`
	UpdatedAtNotIn               []*string                        `json:"updatedAt_not_in"`
	CreatedByIsNull              *bool                            `json:"createdBy_is_null"`
	UpdatedByIsNull              *bool                            `json:"updatedBy_is_null"`
}

type MarketingMembershipWhereUniqueInput struct {
	ID *string `json:"id"`
}

type Member struct {
	ID                  string               `json:"id"`
	FirebaseID          *string              `json:"firebaseId"`
	Email               *string              `json:"email"`
	MarketingMembership *MarketingMembership `json:"marketingMembership"`
	Type                *MemberTypeType      `json:"type"`
	State               *MemberStateType     `json:"state"`
	Tos                 *bool                `json:"tos"`
	DateJoined          *string              `json:"dateJoined"`
	FirstName           *string              `json:"firstName"`
	LastName            *string              `json:"lastName"`
	Name                *string              `json:"name"`
	Gender              *MemberGenderType    `json:"gender"`
	Phone               *string              `json:"phone"`
	Birthday            *string              `json:"birthday"`
	Address             *string              `json:"address"`
	Nickname            *string              `json:"nickname"`
	ProfileImage        *string              `json:"profileImage"`
	City                *string              `json:"city"`
	Country             *string              `json:"country"`
	District            *string              `json:"district"`
	Subscription        []*Subscription      `json:"subscription"`
	SubscriptionCount   *int                 `json:"subscriptionCount"`
	CreatedAt           *string              `json:"createdAt"`
	UpdatedAt           *string              `json:"updatedAt"`
}

// Nested fields are removed
type MemberInfo struct {
	ID           string            `json:"id"`
	FirebaseID   *string           `json:"firebaseId"`
	Email        *string           `json:"email"`
	Type         *MemberTypeType   `json:"type"`
	State        *MemberStateType  `json:"state"`
	Tos          *bool             `json:"tos"`
	DateJoined   *string           `json:"dateJoined"`
	FirstName    *string           `json:"firstName"`
	LastName     *string           `json:"lastName"`
	Name         *string           `json:"name"`
	Gender       *MemberGenderType `json:"gender"`
	Phone        *string           `json:"phone"`
	Birthday     *string           `json:"birthday"`
	Address      *string           `json:"address"`
	Nickname     *string           `json:"nickname"`
	ProfileImage *string           `json:"profileImage"`
	City         *string           `json:"city"`
	Country      *string           `json:"country"`
	District     *string           `json:"district"`
	CreatedAt    *string           `json:"createdAt"`
	UpdatedAt    *string           `json:"updatedAt"`
}

type MemberOrderByInput struct {
	ID           *OrderDirection `json:"id"`
	FirebaseID   *OrderDirection `json:"firebaseId"`
	Email        *OrderDirection `json:"email"`
	Type         *OrderDirection `json:"type"`
	State        *OrderDirection `json:"state"`
	Tos          *OrderDirection `json:"tos"`
	DateJoined   *OrderDirection `json:"dateJoined"`
	FirstName    *OrderDirection `json:"firstName"`
	LastName     *OrderDirection `json:"lastName"`
	Name         *OrderDirection `json:"name"`
	Gender       *OrderDirection `json:"gender"`
	Phone        *OrderDirection `json:"phone"`
	Birthday     *OrderDirection `json:"birthday"`
	Address      *OrderDirection `json:"address"`
	Nickname     *OrderDirection `json:"nickname"`
	ProfileImage *OrderDirection `json:"profileImage"`
	City         *OrderDirection `json:"city"`
	Country      *OrderDirection `json:"country"`
	District     *OrderDirection `json:"district"`
	CreatedAt    *OrderDirection `json:"createdAt"`
	UpdatedAt    *OrderDirection `json:"updatedAt"`
}

type MemberPrivateCreateInput struct {
	FirebaseID          string                               `json:"firebaseId"`
	Email               string                               `json:"email"`
	MarketingMembership *MarketingMembershipRelateToOneInput `json:"marketingMembership"`
	Type                MemberTypeType                       `json:"type"`
	State               *MemberStateType                     `json:"state"`
	Tos                 *bool                                `json:"tos"`
	DateJoined          string                               `json:"dateJoined"`
	FirstName           *string                              `json:"firstName"`
	LastName            *string                              `json:"lastName"`
	Name                *string                              `json:"name"`
	Gender              *MemberGenderType                    `json:"gender"`
	Phone               *string                              `json:"phone"`
	Birthday            *string                              `json:"birthday"`
	Address             *string                              `json:"address"`
	Nickname            *string                              `json:"nickname"`
	ProfileImage        *string                              `json:"profileImage"`
	City                *string                              `json:"city"`
	Country             *string                              `json:"country"`
	District            *string                              `json:"district"`
	Subscription        *SubscriptionRelateToManyInput       `json:"subscription"`
	CreatedAt           *string                              `json:"createdAt"`
	UpdatedAt           *string                              `json:"updatedAt"`
}

type MemberPrivateUpdateInput struct {
	FirebaseID          *string                              `json:"firebaseId"`
	Email               *string                              `json:"email"`
	MarketingMembership *MarketingMembershipRelateToOneInput `json:"marketingMembership"`
	Type                *MemberTypeType                      `json:"type"`
	State               *MemberStateType                     `json:"state"`
	Tos                 *bool                                `json:"tos"`
	DateJoined          *string                              `json:"dateJoined"`
	FirstName           *string                              `json:"firstName"`
	LastName            *string                              `json:"lastName"`
	Name                *string                              `json:"name"`
	Gender              *MemberGenderType                    `json:"gender"`
	Phone               *string                              `json:"phone"`
	Birthday            *string                              `json:"birthday"`
	Address             *string                              `json:"address"`
	Nickname            *string                              `json:"nickname"`
	ProfileImage        *string                              `json:"profileImage"`
	City                *string                              `json:"city"`
	Country             *string                              `json:"country"`
	District            *string                              `json:"district"`
	Subscription        *SubscriptionRelateToManyInput       `json:"subscription"`
	CreatedAt           *string                              `json:"createdAt"`
	UpdatedAt           *string                              `json:"updatedAt"`
}

type MemberRelateToOneInput struct {
	Create        map[string]interface{}  `json:"create"`
	Connect       *MemberWhereUniqueInput `json:"connect"`
	Disconnect    *MemberWhereUniqueInput `json:"disconnect"`
	DisconnectAll *bool                   `json:"disconnectAll"`
}

type MemberWhereInput struct {
	And                        []*MemberWhereInput            `json:"AND"`
	Or                         []*MemberWhereInput            `json:"OR"`
	ID                         *string                        `json:"id"`
	IDNot                      *string                        `json:"id_not"`
	IDLt                       *string                        `json:"id_lt"`
	IDLte                      *string                        `json:"id_lte"`
	IDGt                       *string                        `json:"id_gt"`
	IDGte                      *string                        `json:"id_gte"`
	IDIn                       []string                       `json:"id_in"`
	IDNotIn                    []string                       `json:"id_not_in"`
	FirebaseID                 *string                        `json:"firebaseId"`
	FirebaseIDNot              *string                        `json:"firebaseId_not"`
	FirebaseIDContains         *string                        `json:"firebaseId_contains"`
	FirebaseIDNotContains      *string                        `json:"firebaseId_not_contains"`
	FirebaseIDStartsWith       *string                        `json:"firebaseId_starts_with"`
	FirebaseIDNotStartsWith    *string                        `json:"firebaseId_not_starts_with"`
	FirebaseIDEndsWith         *string                        `json:"firebaseId_ends_with"`
	FirebaseIDNotEndsWith      *string                        `json:"firebaseId_not_ends_with"`
	FirebaseIDI                *string                        `json:"firebaseId_i"`
	FirebaseIDNotI             *string                        `json:"firebaseId_not_i"`
	FirebaseIDContainsI        *string                        `json:"firebaseId_contains_i"`
	FirebaseIDNotContainsI     *string                        `json:"firebaseId_not_contains_i"`
	FirebaseIDStartsWithI      *string                        `json:"firebaseId_starts_with_i"`
	FirebaseIDNotStartsWithI   *string                        `json:"firebaseId_not_starts_with_i"`
	FirebaseIDEndsWithI        *string                        `json:"firebaseId_ends_with_i"`
	FirebaseIDNotEndsWithI     *string                        `json:"firebaseId_not_ends_with_i"`
	FirebaseIDIn               []*string                      `json:"firebaseId_in"`
	FirebaseIDNotIn            []*string                      `json:"firebaseId_not_in"`
	Email                      *string                        `json:"email"`
	EmailNot                   *string                        `json:"email_not"`
	EmailContains              *string                        `json:"email_contains"`
	EmailNotContains           *string                        `json:"email_not_contains"`
	EmailStartsWith            *string                        `json:"email_starts_with"`
	EmailNotStartsWith         *string                        `json:"email_not_starts_with"`
	EmailEndsWith              *string                        `json:"email_ends_with"`
	EmailNotEndsWith           *string                        `json:"email_not_ends_with"`
	EmailI                     *string                        `json:"email_i"`
	EmailNotI                  *string                        `json:"email_not_i"`
	EmailContainsI             *string                        `json:"email_contains_i"`
	EmailNotContainsI          *string                        `json:"email_not_contains_i"`
	EmailStartsWithI           *string                        `json:"email_starts_with_i"`
	EmailNotStartsWithI        *string                        `json:"email_not_starts_with_i"`
	EmailEndsWithI             *string                        `json:"email_ends_with_i"`
	EmailNotEndsWithI          *string                        `json:"email_not_ends_with_i"`
	EmailIn                    []*string                      `json:"email_in"`
	EmailNotIn                 []*string                      `json:"email_not_in"`
	MarketingMembership        *MarketingMembershipWhereInput `json:"marketingMembership"`
	MarketingMembershipIsNull  *bool                          `json:"marketingMembership_is_null"`
	Type                       *MemberTypeType                `json:"type"`
	TypeNot                    *MemberTypeType                `json:"type_not"`
	TypeIn                     []*MemberTypeType              `json:"type_in"`
	TypeNotIn                  []*MemberTypeType              `json:"type_not_in"`
	State                      *MemberStateType               `json:"state"`
	StateNot                   *MemberStateType               `json:"state_not"`
	StateIn                    []*MemberStateType             `json:"state_in"`
	StateNotIn                 []*MemberStateType             `json:"state_not_in"`
	Tos                        *bool                          `json:"tos"`
	TosNot                     *bool                          `json:"tos_not"`
	DateJoined                 *string                        `json:"dateJoined"`
	DateJoinedNot              *string                        `json:"dateJoined_not"`
	DateJoinedLt               *string                        `json:"dateJoined_lt"`
	DateJoinedLte              *string                        `json:"dateJoined_lte"`
	DateJoinedGt               *string                        `json:"dateJoined_gt"`
	DateJoinedGte              *string                        `json:"dateJoined_gte"`
	DateJoinedIn               []*string                      `json:"dateJoined_in"`
	DateJoinedNotIn            []*string                      `json:"dateJoined_not_in"`
	FirstName                  *string                        `json:"firstName"`
	FirstNameNot               *string                        `json:"firstName_not"`
	FirstNameContains          *string                        `json:"firstName_contains"`
	FirstNameNotContains       *string                        `json:"firstName_not_contains"`
	FirstNameStartsWith        *string                        `json:"firstName_starts_with"`
	FirstNameNotStartsWith     *string                        `json:"firstName_not_starts_with"`
	FirstNameEndsWith          *string                        `json:"firstName_ends_with"`
	FirstNameNotEndsWith       *string                        `json:"firstName_not_ends_with"`
	FirstNameI                 *string                        `json:"firstName_i"`
	FirstNameNotI              *string                        `json:"firstName_not_i"`
	FirstNameContainsI         *string                        `json:"firstName_contains_i"`
	FirstNameNotContainsI      *string                        `json:"firstName_not_contains_i"`
	FirstNameStartsWithI       *string                        `json:"firstName_starts_with_i"`
	FirstNameNotStartsWithI    *string                        `json:"firstName_not_starts_with_i"`
	FirstNameEndsWithI         *string                        `json:"firstName_ends_with_i"`
	FirstNameNotEndsWithI      *string                        `json:"firstName_not_ends_with_i"`
	FirstNameIn                []*string                      `json:"firstName_in"`
	FirstNameNotIn             []*string                      `json:"firstName_not_in"`
	LastName                   *string                        `json:"lastName"`
	LastNameNot                *string                        `json:"lastName_not"`
	LastNameContains           *string                        `json:"lastName_contains"`
	LastNameNotContains        *string                        `json:"lastName_not_contains"`
	LastNameStartsWith         *string                        `json:"lastName_starts_with"`
	LastNameNotStartsWith      *string                        `json:"lastName_not_starts_with"`
	LastNameEndsWith           *string                        `json:"lastName_ends_with"`
	LastNameNotEndsWith        *string                        `json:"lastName_not_ends_with"`
	LastNameI                  *string                        `json:"lastName_i"`
	LastNameNotI               *string                        `json:"lastName_not_i"`
	LastNameContainsI          *string                        `json:"lastName_contains_i"`
	LastNameNotContainsI       *string                        `json:"lastName_not_contains_i"`
	LastNameStartsWithI        *string                        `json:"lastName_starts_with_i"`
	LastNameNotStartsWithI     *string                        `json:"lastName_not_starts_with_i"`
	LastNameEndsWithI          *string                        `json:"lastName_ends_with_i"`
	LastNameNotEndsWithI       *string                        `json:"lastName_not_ends_with_i"`
	LastNameIn                 []*string                      `json:"lastName_in"`
	LastNameNotIn              []*string                      `json:"lastName_not_in"`
	Name                       *string                        `json:"name"`
	NameNot                    *string                        `json:"name_not"`
	NameContains               *string                        `json:"name_contains"`
	NameNotContains            *string                        `json:"name_not_contains"`
	NameStartsWith             *string                        `json:"name_starts_with"`
	NameNotStartsWith          *string                        `json:"name_not_starts_with"`
	NameEndsWith               *string                        `json:"name_ends_with"`
	NameNotEndsWith            *string                        `json:"name_not_ends_with"`
	NameI                      *string                        `json:"name_i"`
	NameNotI                   *string                        `json:"name_not_i"`
	NameContainsI              *string                        `json:"name_contains_i"`
	NameNotContainsI           *string                        `json:"name_not_contains_i"`
	NameStartsWithI            *string                        `json:"name_starts_with_i"`
	NameNotStartsWithI         *string                        `json:"name_not_starts_with_i"`
	NameEndsWithI              *string                        `json:"name_ends_with_i"`
	NameNotEndsWithI           *string                        `json:"name_not_ends_with_i"`
	NameIn                     []*string                      `json:"name_in"`
	NameNotIn                  []*string                      `json:"name_not_in"`
	Gender                     *MemberGenderType              `json:"gender"`
	GenderNot                  *MemberGenderType              `json:"gender_not"`
	GenderIn                   []*MemberGenderType            `json:"gender_in"`
	GenderNotIn                []*MemberGenderType            `json:"gender_not_in"`
	Phone                      *string                        `json:"phone"`
	PhoneNot                   *string                        `json:"phone_not"`
	PhoneContains              *string                        `json:"phone_contains"`
	PhoneNotContains           *string                        `json:"phone_not_contains"`
	PhoneStartsWith            *string                        `json:"phone_starts_with"`
	PhoneNotStartsWith         *string                        `json:"phone_not_starts_with"`
	PhoneEndsWith              *string                        `json:"phone_ends_with"`
	PhoneNotEndsWith           *string                        `json:"phone_not_ends_with"`
	PhoneI                     *string                        `json:"phone_i"`
	PhoneNotI                  *string                        `json:"phone_not_i"`
	PhoneContainsI             *string                        `json:"phone_contains_i"`
	PhoneNotContainsI          *string                        `json:"phone_not_contains_i"`
	PhoneStartsWithI           *string                        `json:"phone_starts_with_i"`
	PhoneNotStartsWithI        *string                        `json:"phone_not_starts_with_i"`
	PhoneEndsWithI             *string                        `json:"phone_ends_with_i"`
	PhoneNotEndsWithI          *string                        `json:"phone_not_ends_with_i"`
	PhoneIn                    []*string                      `json:"phone_in"`
	PhoneNotIn                 []*string                      `json:"phone_not_in"`
	Birthday                   *string                        `json:"birthday"`
	BirthdayNot                *string                        `json:"birthday_not"`
	BirthdayLt                 *string                        `json:"birthday_lt"`
	BirthdayLte                *string                        `json:"birthday_lte"`
	BirthdayGt                 *string                        `json:"birthday_gt"`
	BirthdayGte                *string                        `json:"birthday_gte"`
	BirthdayIn                 []*string                      `json:"birthday_in"`
	BirthdayNotIn              []*string                      `json:"birthday_not_in"`
	Address                    *string                        `json:"address"`
	AddressNot                 *string                        `json:"address_not"`
	AddressContains            *string                        `json:"address_contains"`
	AddressNotContains         *string                        `json:"address_not_contains"`
	AddressStartsWith          *string                        `json:"address_starts_with"`
	AddressNotStartsWith       *string                        `json:"address_not_starts_with"`
	AddressEndsWith            *string                        `json:"address_ends_with"`
	AddressNotEndsWith         *string                        `json:"address_not_ends_with"`
	AddressI                   *string                        `json:"address_i"`
	AddressNotI                *string                        `json:"address_not_i"`
	AddressContainsI           *string                        `json:"address_contains_i"`
	AddressNotContainsI        *string                        `json:"address_not_contains_i"`
	AddressStartsWithI         *string                        `json:"address_starts_with_i"`
	AddressNotStartsWithI      *string                        `json:"address_not_starts_with_i"`
	AddressEndsWithI           *string                        `json:"address_ends_with_i"`
	AddressNotEndsWithI        *string                        `json:"address_not_ends_with_i"`
	AddressIn                  []*string                      `json:"address_in"`
	AddressNotIn               []*string                      `json:"address_not_in"`
	Nickname                   *string                        `json:"nickname"`
	NicknameNot                *string                        `json:"nickname_not"`
	NicknameContains           *string                        `json:"nickname_contains"`
	NicknameNotContains        *string                        `json:"nickname_not_contains"`
	NicknameStartsWith         *string                        `json:"nickname_starts_with"`
	NicknameNotStartsWith      *string                        `json:"nickname_not_starts_with"`
	NicknameEndsWith           *string                        `json:"nickname_ends_with"`
	NicknameNotEndsWith        *string                        `json:"nickname_not_ends_with"`
	NicknameI                  *string                        `json:"nickname_i"`
	NicknameNotI               *string                        `json:"nickname_not_i"`
	NicknameContainsI          *string                        `json:"nickname_contains_i"`
	NicknameNotContainsI       *string                        `json:"nickname_not_contains_i"`
	NicknameStartsWithI        *string                        `json:"nickname_starts_with_i"`
	NicknameNotStartsWithI     *string                        `json:"nickname_not_starts_with_i"`
	NicknameEndsWithI          *string                        `json:"nickname_ends_with_i"`
	NicknameNotEndsWithI       *string                        `json:"nickname_not_ends_with_i"`
	NicknameIn                 []*string                      `json:"nickname_in"`
	NicknameNotIn              []*string                      `json:"nickname_not_in"`
	ProfileImage               *string                        `json:"profileImage"`
	ProfileImageNot            *string                        `json:"profileImage_not"`
	ProfileImageContains       *string                        `json:"profileImage_contains"`
	ProfileImageNotContains    *string                        `json:"profileImage_not_contains"`
	ProfileImageStartsWith     *string                        `json:"profileImage_starts_with"`
	ProfileImageNotStartsWith  *string                        `json:"profileImage_not_starts_with"`
	ProfileImageEndsWith       *string                        `json:"profileImage_ends_with"`
	ProfileImageNotEndsWith    *string                        `json:"profileImage_not_ends_with"`
	ProfileImageI              *string                        `json:"profileImage_i"`
	ProfileImageNotI           *string                        `json:"profileImage_not_i"`
	ProfileImageContainsI      *string                        `json:"profileImage_contains_i"`
	ProfileImageNotContainsI   *string                        `json:"profileImage_not_contains_i"`
	ProfileImageStartsWithI    *string                        `json:"profileImage_starts_with_i"`
	ProfileImageNotStartsWithI *string                        `json:"profileImage_not_starts_with_i"`
	ProfileImageEndsWithI      *string                        `json:"profileImage_ends_with_i"`
	ProfileImageNotEndsWithI   *string                        `json:"profileImage_not_ends_with_i"`
	ProfileImageIn             []*string                      `json:"profileImage_in"`
	ProfileImageNotIn          []*string                      `json:"profileImage_not_in"`
	City                       *string                        `json:"city"`
	CityNot                    *string                        `json:"city_not"`
	CityContains               *string                        `json:"city_contains"`
	CityNotContains            *string                        `json:"city_not_contains"`
	CityStartsWith             *string                        `json:"city_starts_with"`
	CityNotStartsWith          *string                        `json:"city_not_starts_with"`
	CityEndsWith               *string                        `json:"city_ends_with"`
	CityNotEndsWith            *string                        `json:"city_not_ends_with"`
	CityI                      *string                        `json:"city_i"`
	CityNotI                   *string                        `json:"city_not_i"`
	CityContainsI              *string                        `json:"city_contains_i"`
	CityNotContainsI           *string                        `json:"city_not_contains_i"`
	CityStartsWithI            *string                        `json:"city_starts_with_i"`
	CityNotStartsWithI         *string                        `json:"city_not_starts_with_i"`
	CityEndsWithI              *string                        `json:"city_ends_with_i"`
	CityNotEndsWithI           *string                        `json:"city_not_ends_with_i"`
	CityIn                     []*string                      `json:"city_in"`
	CityNotIn                  []*string                      `json:"city_not_in"`
	Country                    *string                        `json:"country"`
	CountryNot                 *string                        `json:"country_not"`
	CountryContains            *string                        `json:"country_contains"`
	CountryNotContains         *string                        `json:"country_not_contains"`
	CountryStartsWith          *string                        `json:"country_starts_with"`
	CountryNotStartsWith       *string                        `json:"country_not_starts_with"`
	CountryEndsWith            *string                        `json:"country_ends_with"`
	CountryNotEndsWith         *string                        `json:"country_not_ends_with"`
	CountryI                   *string                        `json:"country_i"`
	CountryNotI                *string                        `json:"country_not_i"`
	CountryContainsI           *string                        `json:"country_contains_i"`
	CountryNotContainsI        *string                        `json:"country_not_contains_i"`
	CountryStartsWithI         *string                        `json:"country_starts_with_i"`
	CountryNotStartsWithI      *string                        `json:"country_not_starts_with_i"`
	CountryEndsWithI           *string                        `json:"country_ends_with_i"`
	CountryNotEndsWithI        *string                        `json:"country_not_ends_with_i"`
	CountryIn                  []*string                      `json:"country_in"`
	CountryNotIn               []*string                      `json:"country_not_in"`
	District                   *string                        `json:"district"`
	DistrictNot                *string                        `json:"district_not"`
	DistrictContains           *string                        `json:"district_contains"`
	DistrictNotContains        *string                        `json:"district_not_contains"`
	DistrictStartsWith         *string                        `json:"district_starts_with"`
	DistrictNotStartsWith      *string                        `json:"district_not_starts_with"`
	DistrictEndsWith           *string                        `json:"district_ends_with"`
	DistrictNotEndsWith        *string                        `json:"district_not_ends_with"`
	DistrictI                  *string                        `json:"district_i"`
	DistrictNotI               *string                        `json:"district_not_i"`
	DistrictContainsI          *string                        `json:"district_contains_i"`
	DistrictNotContainsI       *string                        `json:"district_not_contains_i"`
	DistrictStartsWithI        *string                        `json:"district_starts_with_i"`
	DistrictNotStartsWithI     *string                        `json:"district_not_starts_with_i"`
	DistrictEndsWithI          *string                        `json:"district_ends_with_i"`
	DistrictNotEndsWithI       *string                        `json:"district_not_ends_with_i"`
	DistrictIn                 []*string                      `json:"district_in"`
	DistrictNotIn              []*string                      `json:"district_not_in"`
	SubscriptionEvery          *SubscriptionWhereInput        `json:"subscription_every"`
	SubscriptionSome           *SubscriptionWhereInput        `json:"subscription_some"`
	SubscriptionNone           *SubscriptionWhereInput        `json:"subscription_none"`
	CreatedAt                  *string                        `json:"createdAt"`
	CreatedAtNot               *string                        `json:"createdAt_not"`
	CreatedAtLt                *string                        `json:"createdAt_lt"`
	CreatedAtLte               *string                        `json:"createdAt_lte"`
	CreatedAtGt                *string                        `json:"createdAt_gt"`
	CreatedAtGte               *string                        `json:"createdAt_gte"`
	CreatedAtIn                []*string                      `json:"createdAt_in"`
	CreatedAtNotIn             []*string                      `json:"createdAt_not_in"`
	UpdatedAt                  *string                        `json:"updatedAt"`
	UpdatedAtNot               *string                        `json:"updatedAt_not"`
	UpdatedAtLt                *string                        `json:"updatedAt_lt"`
	UpdatedAtLte               *string                        `json:"updatedAt_lte"`
	UpdatedAtGt                *string                        `json:"updatedAt_gt"`
	UpdatedAtGte               *string                        `json:"updatedAt_gte"`
	UpdatedAtIn                []*string                      `json:"updatedAt_in"`
	UpdatedAtNotIn             []*string                      `json:"updatedAt_not_in"`
	CreatedByIsNull            *bool                          `json:"createdBy_is_null"`
	UpdatedByIsNull            *bool                          `json:"updatedBy_is_null"`
}

type MemberWhereUniqueInput struct {
	FirebaseID string `json:"firebaseId"`
}

type Merchandise struct {
	ID        string                   `json:"id"`
	Name      *string                  `json:"name"`
	Code      *string                  `json:"code"`
	Price     *float64                 `json:"price"`
	Currency  *MerchandiseCurrencyType `json:"currency"`
	State     *MerchandiseStateType    `json:"state"`
	Desc      *string                  `json:"desc"`
	Comment   *string                  `json:"comment"`
	CreatedAt *string                  `json:"createdAt"`
	UpdatedAt *string                  `json:"updatedAt"`
}

type MerchandiseCreateInput struct {
	Name      *string                  `json:"name"`
	Code      *string                  `json:"code"`
	Price     *float64                 `json:"price"`
	Currency  *MerchandiseCurrencyType `json:"currency"`
	State     *MerchandiseStateType    `json:"state"`
	Desc      *string                  `json:"desc"`
	Comment   *string                  `json:"comment"`
	CreatedAt *string                  `json:"createdAt"`
	UpdatedAt *string                  `json:"updatedAt"`
}

type MerchandiseOrderByInput struct {
	ID        *OrderDirection `json:"id"`
	Name      *OrderDirection `json:"name"`
	Code      *OrderDirection `json:"code"`
	Price     *OrderDirection `json:"price"`
	Currency  *OrderDirection `json:"currency"`
	State     *OrderDirection `json:"state"`
	Desc      *OrderDirection `json:"desc"`
	Comment   *OrderDirection `json:"comment"`
	CreatedAt *OrderDirection `json:"createdAt"`
	UpdatedAt *OrderDirection `json:"updatedAt"`
}

type MerchandiseUpdateInput struct {
	Name      *string                  `json:"name"`
	Code      *string                  `json:"code"`
	Price     *float64                 `json:"price"`
	Currency  *MerchandiseCurrencyType `json:"currency"`
	State     *MerchandiseStateType    `json:"state"`
	Desc      *string                  `json:"desc"`
	Comment   *string                  `json:"comment"`
	CreatedAt *string                  `json:"createdAt"`
	UpdatedAt *string                  `json:"updatedAt"`
}

type MerchandiseWhereInput struct {
	And                   []*MerchandiseWhereInput   `json:"AND"`
	Or                    []*MerchandiseWhereInput   `json:"OR"`
	ID                    *string                    `json:"id"`
	IDNot                 *string                    `json:"id_not"`
	IDLt                  *string                    `json:"id_lt"`
	IDLte                 *string                    `json:"id_lte"`
	IDGt                  *string                    `json:"id_gt"`
	IDGte                 *string                    `json:"id_gte"`
	IDIn                  []string                   `json:"id_in"`
	IDNotIn               []string                   `json:"id_not_in"`
	Name                  *string                    `json:"name"`
	NameNot               *string                    `json:"name_not"`
	NameContains          *string                    `json:"name_contains"`
	NameNotContains       *string                    `json:"name_not_contains"`
	NameStartsWith        *string                    `json:"name_starts_with"`
	NameNotStartsWith     *string                    `json:"name_not_starts_with"`
	NameEndsWith          *string                    `json:"name_ends_with"`
	NameNotEndsWith       *string                    `json:"name_not_ends_with"`
	NameI                 *string                    `json:"name_i"`
	NameNotI              *string                    `json:"name_not_i"`
	NameContainsI         *string                    `json:"name_contains_i"`
	NameNotContainsI      *string                    `json:"name_not_contains_i"`
	NameStartsWithI       *string                    `json:"name_starts_with_i"`
	NameNotStartsWithI    *string                    `json:"name_not_starts_with_i"`
	NameEndsWithI         *string                    `json:"name_ends_with_i"`
	NameNotEndsWithI      *string                    `json:"name_not_ends_with_i"`
	NameIn                []*string                  `json:"name_in"`
	NameNotIn             []*string                  `json:"name_not_in"`
	Code                  *string                    `json:"code"`
	CodeNot               *string                    `json:"code_not"`
	CodeContains          *string                    `json:"code_contains"`
	CodeNotContains       *string                    `json:"code_not_contains"`
	CodeStartsWith        *string                    `json:"code_starts_with"`
	CodeNotStartsWith     *string                    `json:"code_not_starts_with"`
	CodeEndsWith          *string                    `json:"code_ends_with"`
	CodeNotEndsWith       *string                    `json:"code_not_ends_with"`
	CodeI                 *string                    `json:"code_i"`
	CodeNotI              *string                    `json:"code_not_i"`
	CodeContainsI         *string                    `json:"code_contains_i"`
	CodeNotContainsI      *string                    `json:"code_not_contains_i"`
	CodeStartsWithI       *string                    `json:"code_starts_with_i"`
	CodeNotStartsWithI    *string                    `json:"code_not_starts_with_i"`
	CodeEndsWithI         *string                    `json:"code_ends_with_i"`
	CodeNotEndsWithI      *string                    `json:"code_not_ends_with_i"`
	CodeIn                []*string                  `json:"code_in"`
	CodeNotIn             []*string                  `json:"code_not_in"`
	Price                 *float64                   `json:"price"`
	PriceNot              *float64                   `json:"price_not"`
	PriceLt               *float64                   `json:"price_lt"`
	PriceLte              *float64                   `json:"price_lte"`
	PriceGt               *float64                   `json:"price_gt"`
	PriceGte              *float64                   `json:"price_gte"`
	PriceIn               []*float64                 `json:"price_in"`
	PriceNotIn            []*float64                 `json:"price_not_in"`
	Currency              *MerchandiseCurrencyType   `json:"currency"`
	CurrencyNot           *MerchandiseCurrencyType   `json:"currency_not"`
	CurrencyIn            []*MerchandiseCurrencyType `json:"currency_in"`
	CurrencyNotIn         []*MerchandiseCurrencyType `json:"currency_not_in"`
	State                 *MerchandiseStateType      `json:"state"`
	StateNot              *MerchandiseStateType      `json:"state_not"`
	StateIn               []*MerchandiseStateType    `json:"state_in"`
	StateNotIn            []*MerchandiseStateType    `json:"state_not_in"`
	Desc                  *string                    `json:"desc"`
	DescNot               *string                    `json:"desc_not"`
	DescContains          *string                    `json:"desc_contains"`
	DescNotContains       *string                    `json:"desc_not_contains"`
	DescStartsWith        *string                    `json:"desc_starts_with"`
	DescNotStartsWith     *string                    `json:"desc_not_starts_with"`
	DescEndsWith          *string                    `json:"desc_ends_with"`
	DescNotEndsWith       *string                    `json:"desc_not_ends_with"`
	DescI                 *string                    `json:"desc_i"`
	DescNotI              *string                    `json:"desc_not_i"`
	DescContainsI         *string                    `json:"desc_contains_i"`
	DescNotContainsI      *string                    `json:"desc_not_contains_i"`
	DescStartsWithI       *string                    `json:"desc_starts_with_i"`
	DescNotStartsWithI    *string                    `json:"desc_not_starts_with_i"`
	DescEndsWithI         *string                    `json:"desc_ends_with_i"`
	DescNotEndsWithI      *string                    `json:"desc_not_ends_with_i"`
	DescIn                []*string                  `json:"desc_in"`
	DescNotIn             []*string                  `json:"desc_not_in"`
	Comment               *string                    `json:"comment"`
	CommentNot            *string                    `json:"comment_not"`
	CommentContains       *string                    `json:"comment_contains"`
	CommentNotContains    *string                    `json:"comment_not_contains"`
	CommentStartsWith     *string                    `json:"comment_starts_with"`
	CommentNotStartsWith  *string                    `json:"comment_not_starts_with"`
	CommentEndsWith       *string                    `json:"comment_ends_with"`
	CommentNotEndsWith    *string                    `json:"comment_not_ends_with"`
	CommentI              *string                    `json:"comment_i"`
	CommentNotI           *string                    `json:"comment_not_i"`
	CommentContainsI      *string                    `json:"comment_contains_i"`
	CommentNotContainsI   *string                    `json:"comment_not_contains_i"`
	CommentStartsWithI    *string                    `json:"comment_starts_with_i"`
	CommentNotStartsWithI *string                    `json:"comment_not_starts_with_i"`
	CommentEndsWithI      *string                    `json:"comment_ends_with_i"`
	CommentNotEndsWithI   *string                    `json:"comment_not_ends_with_i"`
	CommentIn             []*string                  `json:"comment_in"`
	CommentNotIn          []*string                  `json:"comment_not_in"`
	CreatedAt             *string                    `json:"createdAt"`
	CreatedAtNot          *string                    `json:"createdAt_not"`
	CreatedAtLt           *string                    `json:"createdAt_lt"`
	CreatedAtLte          *string                    `json:"createdAt_lte"`
	CreatedAtGt           *string                    `json:"createdAt_gt"`
	CreatedAtGte          *string                    `json:"createdAt_gte"`
	CreatedAtIn           []*string                  `json:"createdAt_in"`
	CreatedAtNotIn        []*string                  `json:"createdAt_not_in"`
	UpdatedAt             *string                    `json:"updatedAt"`
	UpdatedAtNot          *string                    `json:"updatedAt_not"`
	UpdatedAtLt           *string                    `json:"updatedAt_lt"`
	UpdatedAtLte          *string                    `json:"updatedAt_lte"`
	UpdatedAtGt           *string                    `json:"updatedAt_gt"`
	UpdatedAtGte          *string                    `json:"updatedAt_gte"`
	UpdatedAtIn           []*string                  `json:"updatedAt_in"`
	UpdatedAtNotIn        []*string                  `json:"updatedAt_not_in"`
	CreatedByIsNull       *bool                      `json:"createdBy_is_null"`
	UpdatedByIsNull       *bool                      `json:"updatedBy_is_null"`
}

type MerchandiseWhereUniqueInput struct {
	ID   *string `json:"id"`
	Name *string `json:"name"`
	Code *string `json:"code"`
}

type NewebpayPayment struct {
	ID               string        `json:"id"`
	Subscription     *Subscription `json:"subscription"`
	Invoice          *Invoice      `json:"invoice"`
	Amount           *int          `json:"amount"`
	Status           *string       `json:"status"`
	PaymentMethod    *string       `json:"paymentMethod"`
	PaymentTime      *string       `json:"paymentTime"`
	TradeNumber      *string       `json:"tradeNumber"`
	Message          *string       `json:"message"`
	MerchantID       *string       `json:"merchantId"`
	OrderNumber      *string       `json:"orderNumber"`
	TokenUseStatus   *int          `json:"tokenUseStatus"`
	RespondCode      *string       `json:"respondCode"`
	Eci              *string       `json:"ECI"`
	AuthCode         *string       `json:"authCode"`
	AuthBank         *string       `json:"authBank"`
	CardInfoLastFour *string       `json:"cardInfoLastFour"`
	CardInfoFirstSix *string       `json:"cardInfoFirstSix"`
	CardInfoExp      *string       `json:"cardInfoExp"`
	CreatedAt        *string       `json:"createdAt"`
	UpdatedAt        *string       `json:"updatedAt"`
}

type NewebpayPaymentCreateInput struct {
	Subscription     *SubscriptionRelateToOneInput `json:"subscription"`
	Invoice          *InvoiceRelateToOneInput      `json:"invoice"`
	Amount           *int                          `json:"amount"`
	Status           *string                       `json:"status"`
	PaymentMethod    *string                       `json:"paymentMethod"`
	PaymentTime      *string                       `json:"paymentTime"`
	TradeNumber      *string                       `json:"tradeNumber"`
	Message          *string                       `json:"message"`
	MerchantID       *string                       `json:"merchantId"`
	OrderNumber      *string                       `json:"orderNumber"`
	TokenUseStatus   *int                          `json:"tokenUseStatus"`
	RespondCode      *string                       `json:"respondCode"`
	Eci              *string                       `json:"ECI"`
	AuthCode         *string                       `json:"authCode"`
	AuthBank         *string                       `json:"authBank"`
	CardInfoLastFour *string                       `json:"cardInfoLastFour"`
	CardInfoFirstSix *string                       `json:"cardInfoFirstSix"`
	CardInfoExp      *string                       `json:"cardInfoExp"`
	CreatedAt        *string                       `json:"createdAt"`
	UpdatedAt        *string                       `json:"updatedAt"`
}

type NewebpayPaymentInfo struct {
	ID           string        `json:"id"`
	Subscription *Subscription `json:"subscription"`
	TokenTerm    *string       `json:"tokenTerm"`
	TokenValue   *string       `json:"tokenValue"`
	TokenLife    *string       `json:"tokenLife"`
	CreatedAt    *string       `json:"createdAt"`
	UpdatedAt    *string       `json:"updatedAt"`
}

type NewebpayPaymentInfoCreateInput struct {
	Subscription *SubscriptionRelateToOneInput `json:"subscription"`
	TokenTerm    *string                       `json:"tokenTerm"`
	TokenValue   *string                       `json:"tokenValue"`
	TokenLife    *string                       `json:"tokenLife"`
	CreatedAt    *string                       `json:"createdAt"`
	UpdatedAt    *string                       `json:"updatedAt"`
}

type NewebpayPaymentInfoOrderByInput struct {
	ID         *OrderDirection `json:"id"`
	TokenTerm  *OrderDirection `json:"tokenTerm"`
	TokenValue *OrderDirection `json:"tokenValue"`
	TokenLife  *OrderDirection `json:"tokenLife"`
	CreatedAt  *OrderDirection `json:"createdAt"`
	UpdatedAt  *OrderDirection `json:"updatedAt"`
}

type NewebpayPaymentInfoRelateToOneInput struct {
	Create        *NewebpayPaymentInfoCreateInput      `json:"create"`
	Connect       *NewebpayPaymentInfoWhereUniqueInput `json:"connect"`
	Disconnect    *NewebpayPaymentInfoWhereUniqueInput `json:"disconnect"`
	DisconnectAll *bool                                `json:"disconnectAll"`
}

type NewebpayPaymentInfoUpdateInput struct {
	Subscription *SubscriptionRelateToOneInput `json:"subscription"`
	TokenTerm    *string                       `json:"tokenTerm"`
	TokenValue   *string                       `json:"tokenValue"`
	TokenLife    *string                       `json:"tokenLife"`
	CreatedAt    *string                       `json:"createdAt"`
	UpdatedAt    *string                       `json:"updatedAt"`
}

type NewebpayPaymentInfoWhereInput struct {
	And                      []*NewebpayPaymentInfoWhereInput `json:"AND"`
	Or                       []*NewebpayPaymentInfoWhereInput `json:"OR"`
	ID                       *string                          `json:"id"`
	IDNot                    *string                          `json:"id_not"`
	IDLt                     *string                          `json:"id_lt"`
	IDLte                    *string                          `json:"id_lte"`
	IDGt                     *string                          `json:"id_gt"`
	IDGte                    *string                          `json:"id_gte"`
	IDIn                     []string                         `json:"id_in"`
	IDNotIn                  []string                         `json:"id_not_in"`
	Subscription             *SubscriptionWhereInput          `json:"subscription"`
	SubscriptionIsNull       *bool                            `json:"subscription_is_null"`
	TokenTerm                *string                          `json:"tokenTerm"`
	TokenTermNot             *string                          `json:"tokenTerm_not"`
	TokenTermContains        *string                          `json:"tokenTerm_contains"`
	TokenTermNotContains     *string                          `json:"tokenTerm_not_contains"`
	TokenTermStartsWith      *string                          `json:"tokenTerm_starts_with"`
	TokenTermNotStartsWith   *string                          `json:"tokenTerm_not_starts_with"`
	TokenTermEndsWith        *string                          `json:"tokenTerm_ends_with"`
	TokenTermNotEndsWith     *string                          `json:"tokenTerm_not_ends_with"`
	TokenTermI               *string                          `json:"tokenTerm_i"`
	TokenTermNotI            *string                          `json:"tokenTerm_not_i"`
	TokenTermContainsI       *string                          `json:"tokenTerm_contains_i"`
	TokenTermNotContainsI    *string                          `json:"tokenTerm_not_contains_i"`
	TokenTermStartsWithI     *string                          `json:"tokenTerm_starts_with_i"`
	TokenTermNotStartsWithI  *string                          `json:"tokenTerm_not_starts_with_i"`
	TokenTermEndsWithI       *string                          `json:"tokenTerm_ends_with_i"`
	TokenTermNotEndsWithI    *string                          `json:"tokenTerm_not_ends_with_i"`
	TokenTermIn              []*string                        `json:"tokenTerm_in"`
	TokenTermNotIn           []*string                        `json:"tokenTerm_not_in"`
	TokenValue               *string                          `json:"tokenValue"`
	TokenValueNot            *string                          `json:"tokenValue_not"`
	TokenValueContains       *string                          `json:"tokenValue_contains"`
	TokenValueNotContains    *string                          `json:"tokenValue_not_contains"`
	TokenValueStartsWith     *string                          `json:"tokenValue_starts_with"`
	TokenValueNotStartsWith  *string                          `json:"tokenValue_not_starts_with"`
	TokenValueEndsWith       *string                          `json:"tokenValue_ends_with"`
	TokenValueNotEndsWith    *string                          `json:"tokenValue_not_ends_with"`
	TokenValueI              *string                          `json:"tokenValue_i"`
	TokenValueNotI           *string                          `json:"tokenValue_not_i"`
	TokenValueContainsI      *string                          `json:"tokenValue_contains_i"`
	TokenValueNotContainsI   *string                          `json:"tokenValue_not_contains_i"`
	TokenValueStartsWithI    *string                          `json:"tokenValue_starts_with_i"`
	TokenValueNotStartsWithI *string                          `json:"tokenValue_not_starts_with_i"`
	TokenValueEndsWithI      *string                          `json:"tokenValue_ends_with_i"`
	TokenValueNotEndsWithI   *string                          `json:"tokenValue_not_ends_with_i"`
	TokenValueIn             []*string                        `json:"tokenValue_in"`
	TokenValueNotIn          []*string                        `json:"tokenValue_not_in"`
	TokenLife                *string                          `json:"tokenLife"`
	TokenLifeNot             *string                          `json:"tokenLife_not"`
	TokenLifeLt              *string                          `json:"tokenLife_lt"`
	TokenLifeLte             *string                          `json:"tokenLife_lte"`
	TokenLifeGt              *string                          `json:"tokenLife_gt"`
	TokenLifeGte             *string                          `json:"tokenLife_gte"`
	TokenLifeIn              []*string                        `json:"tokenLife_in"`
	TokenLifeNotIn           []*string                        `json:"tokenLife_not_in"`
	CreatedAt                *string                          `json:"createdAt"`
	CreatedAtNot             *string                          `json:"createdAt_not"`
	CreatedAtLt              *string                          `json:"createdAt_lt"`
	CreatedAtLte             *string                          `json:"createdAt_lte"`
	CreatedAtGt              *string                          `json:"createdAt_gt"`
	CreatedAtGte             *string                          `json:"createdAt_gte"`
	CreatedAtIn              []*string                        `json:"createdAt_in"`
	CreatedAtNotIn           []*string                        `json:"createdAt_not_in"`
	UpdatedAt                *string                          `json:"updatedAt"`
	UpdatedAtNot             *string                          `json:"updatedAt_not"`
	UpdatedAtLt              *string                          `json:"updatedAt_lt"`
	UpdatedAtLte             *string                          `json:"updatedAt_lte"`
	UpdatedAtGt              *string                          `json:"updatedAt_gt"`
	UpdatedAtGte             *string                          `json:"updatedAt_gte"`
	UpdatedAtIn              []*string                        `json:"updatedAt_in"`
	UpdatedAtNotIn           []*string                        `json:"updatedAt_not_in"`
	CreatedByIsNull          *bool                            `json:"createdBy_is_null"`
	UpdatedByIsNull          *bool                            `json:"updatedBy_is_null"`
}

type NewebpayPaymentInfoWhereUniqueInput struct {
	ID *string `json:"id"`
}

type NewebpayPaymentOrderByInput struct {
	ID               *OrderDirection `json:"id"`
	Amount           *OrderDirection `json:"amount"`
	Status           *OrderDirection `json:"status"`
	PaymentMethod    *OrderDirection `json:"paymentMethod"`
	PaymentTime      *OrderDirection `json:"paymentTime"`
	TradeNumber      *OrderDirection `json:"tradeNumber"`
	Message          *OrderDirection `json:"message"`
	MerchantID       *OrderDirection `json:"merchantId"`
	OrderNumber      *OrderDirection `json:"orderNumber"`
	TokenUseStatus   *OrderDirection `json:"tokenUseStatus"`
	RespondCode      *OrderDirection `json:"respondCode"`
	Eci              *OrderDirection `json:"ECI"`
	AuthCode         *OrderDirection `json:"authCode"`
	AuthBank         *OrderDirection `json:"authBank"`
	CardInfoLastFour *OrderDirection `json:"cardInfoLastFour"`
	CardInfoFirstSix *OrderDirection `json:"cardInfoFirstSix"`
	CardInfoExp      *OrderDirection `json:"cardInfoExp"`
	CreatedAt        *OrderDirection `json:"createdAt"`
	UpdatedAt        *OrderDirection `json:"updatedAt"`
}

type NewebpayPaymentRelateToManyInput struct {
	Create        []*NewebpayPaymentCreateInput      `json:"create"`
	Connect       []*NewebpayPaymentWhereUniqueInput `json:"connect"`
	Disconnect    []*NewebpayPaymentWhereUniqueInput `json:"disconnect"`
	DisconnectAll *bool                              `json:"disconnectAll"`
}

type NewebpayPaymentRelateToOneInput struct {
	Create        *NewebpayPaymentCreateInput      `json:"create"`
	Connect       *NewebpayPaymentWhereUniqueInput `json:"connect"`
	Disconnect    *NewebpayPaymentWhereUniqueInput `json:"disconnect"`
	DisconnectAll *bool                            `json:"disconnectAll"`
}

type NewebpayPaymentUpdateInput struct {
	Subscription     *SubscriptionRelateToOneInput `json:"subscription"`
	Invoice          *InvoiceRelateToOneInput      `json:"invoice"`
	Amount           *int                          `json:"amount"`
	Status           *string                       `json:"status"`
	PaymentMethod    *string                       `json:"paymentMethod"`
	PaymentTime      *string                       `json:"paymentTime"`
	TradeNumber      *string                       `json:"tradeNumber"`
	Message          *string                       `json:"message"`
	MerchantID       *string                       `json:"merchantId"`
	OrderNumber      *string                       `json:"orderNumber"`
	TokenUseStatus   *int                          `json:"tokenUseStatus"`
	RespondCode      *string                       `json:"respondCode"`
	Eci              *string                       `json:"ECI"`
	AuthCode         *string                       `json:"authCode"`
	AuthBank         *string                       `json:"authBank"`
	CardInfoLastFour *string                       `json:"cardInfoLastFour"`
	CardInfoFirstSix *string                       `json:"cardInfoFirstSix"`
	CardInfoExp      *string                       `json:"cardInfoExp"`
	CreatedAt        *string                       `json:"createdAt"`
	UpdatedAt        *string                       `json:"updatedAt"`
}

type NewebpayPaymentWhereInput struct {
	And                            []*NewebpayPaymentWhereInput `json:"AND"`
	Or                             []*NewebpayPaymentWhereInput `json:"OR"`
	ID                             *string                      `json:"id"`
	IDNot                          *string                      `json:"id_not"`
	IDLt                           *string                      `json:"id_lt"`
	IDLte                          *string                      `json:"id_lte"`
	IDGt                           *string                      `json:"id_gt"`
	IDGte                          *string                      `json:"id_gte"`
	IDIn                           []string                     `json:"id_in"`
	IDNotIn                        []string                     `json:"id_not_in"`
	Subscription                   *SubscriptionWhereInput      `json:"subscription"`
	SubscriptionIsNull             *bool                        `json:"subscription_is_null"`
	Invoice                        *InvoiceWhereInput           `json:"invoice"`
	InvoiceIsNull                  *bool                        `json:"invoice_is_null"`
	Amount                         *int                         `json:"amount"`
	AmountNot                      *int                         `json:"amount_not"`
	AmountLt                       *int                         `json:"amount_lt"`
	AmountLte                      *int                         `json:"amount_lte"`
	AmountGt                       *int                         `json:"amount_gt"`
	AmountGte                      *int                         `json:"amount_gte"`
	AmountIn                       []*int                       `json:"amount_in"`
	AmountNotIn                    []*int                       `json:"amount_not_in"`
	Status                         *string                      `json:"status"`
	StatusNot                      *string                      `json:"status_not"`
	StatusContains                 *string                      `json:"status_contains"`
	StatusNotContains              *string                      `json:"status_not_contains"`
	StatusStartsWith               *string                      `json:"status_starts_with"`
	StatusNotStartsWith            *string                      `json:"status_not_starts_with"`
	StatusEndsWith                 *string                      `json:"status_ends_with"`
	StatusNotEndsWith              *string                      `json:"status_not_ends_with"`
	StatusI                        *string                      `json:"status_i"`
	StatusNotI                     *string                      `json:"status_not_i"`
	StatusContainsI                *string                      `json:"status_contains_i"`
	StatusNotContainsI             *string                      `json:"status_not_contains_i"`
	StatusStartsWithI              *string                      `json:"status_starts_with_i"`
	StatusNotStartsWithI           *string                      `json:"status_not_starts_with_i"`
	StatusEndsWithI                *string                      `json:"status_ends_with_i"`
	StatusNotEndsWithI             *string                      `json:"status_not_ends_with_i"`
	StatusIn                       []*string                    `json:"status_in"`
	StatusNotIn                    []*string                    `json:"status_not_in"`
	PaymentMethod                  *string                      `json:"paymentMethod"`
	PaymentMethodNot               *string                      `json:"paymentMethod_not"`
	PaymentMethodContains          *string                      `json:"paymentMethod_contains"`
	PaymentMethodNotContains       *string                      `json:"paymentMethod_not_contains"`
	PaymentMethodStartsWith        *string                      `json:"paymentMethod_starts_with"`
	PaymentMethodNotStartsWith     *string                      `json:"paymentMethod_not_starts_with"`
	PaymentMethodEndsWith          *string                      `json:"paymentMethod_ends_with"`
	PaymentMethodNotEndsWith       *string                      `json:"paymentMethod_not_ends_with"`
	PaymentMethodI                 *string                      `json:"paymentMethod_i"`
	PaymentMethodNotI              *string                      `json:"paymentMethod_not_i"`
	PaymentMethodContainsI         *string                      `json:"paymentMethod_contains_i"`
	PaymentMethodNotContainsI      *string                      `json:"paymentMethod_not_contains_i"`
	PaymentMethodStartsWithI       *string                      `json:"paymentMethod_starts_with_i"`
	PaymentMethodNotStartsWithI    *string                      `json:"paymentMethod_not_starts_with_i"`
	PaymentMethodEndsWithI         *string                      `json:"paymentMethod_ends_with_i"`
	PaymentMethodNotEndsWithI      *string                      `json:"paymentMethod_not_ends_with_i"`
	PaymentMethodIn                []*string                    `json:"paymentMethod_in"`
	PaymentMethodNotIn             []*string                    `json:"paymentMethod_not_in"`
	PaymentTime                    *string                      `json:"paymentTime"`
	PaymentTimeNot                 *string                      `json:"paymentTime_not"`
	PaymentTimeLt                  *string                      `json:"paymentTime_lt"`
	PaymentTimeLte                 *string                      `json:"paymentTime_lte"`
	PaymentTimeGt                  *string                      `json:"paymentTime_gt"`
	PaymentTimeGte                 *string                      `json:"paymentTime_gte"`
	PaymentTimeIn                  []*string                    `json:"paymentTime_in"`
	PaymentTimeNotIn               []*string                    `json:"paymentTime_not_in"`
	TradeNumber                    *string                      `json:"tradeNumber"`
	TradeNumberNot                 *string                      `json:"tradeNumber_not"`
	TradeNumberContains            *string                      `json:"tradeNumber_contains"`
	TradeNumberNotContains         *string                      `json:"tradeNumber_not_contains"`
	TradeNumberStartsWith          *string                      `json:"tradeNumber_starts_with"`
	TradeNumberNotStartsWith       *string                      `json:"tradeNumber_not_starts_with"`
	TradeNumberEndsWith            *string                      `json:"tradeNumber_ends_with"`
	TradeNumberNotEndsWith         *string                      `json:"tradeNumber_not_ends_with"`
	TradeNumberI                   *string                      `json:"tradeNumber_i"`
	TradeNumberNotI                *string                      `json:"tradeNumber_not_i"`
	TradeNumberContainsI           *string                      `json:"tradeNumber_contains_i"`
	TradeNumberNotContainsI        *string                      `json:"tradeNumber_not_contains_i"`
	TradeNumberStartsWithI         *string                      `json:"tradeNumber_starts_with_i"`
	TradeNumberNotStartsWithI      *string                      `json:"tradeNumber_not_starts_with_i"`
	TradeNumberEndsWithI           *string                      `json:"tradeNumber_ends_with_i"`
	TradeNumberNotEndsWithI        *string                      `json:"tradeNumber_not_ends_with_i"`
	TradeNumberIn                  []*string                    `json:"tradeNumber_in"`
	TradeNumberNotIn               []*string                    `json:"tradeNumber_not_in"`
	Message                        *string                      `json:"message"`
	MessageNot                     *string                      `json:"message_not"`
	MessageContains                *string                      `json:"message_contains"`
	MessageNotContains             *string                      `json:"message_not_contains"`
	MessageStartsWith              *string                      `json:"message_starts_with"`
	MessageNotStartsWith           *string                      `json:"message_not_starts_with"`
	MessageEndsWith                *string                      `json:"message_ends_with"`
	MessageNotEndsWith             *string                      `json:"message_not_ends_with"`
	MessageI                       *string                      `json:"message_i"`
	MessageNotI                    *string                      `json:"message_not_i"`
	MessageContainsI               *string                      `json:"message_contains_i"`
	MessageNotContainsI            *string                      `json:"message_not_contains_i"`
	MessageStartsWithI             *string                      `json:"message_starts_with_i"`
	MessageNotStartsWithI          *string                      `json:"message_not_starts_with_i"`
	MessageEndsWithI               *string                      `json:"message_ends_with_i"`
	MessageNotEndsWithI            *string                      `json:"message_not_ends_with_i"`
	MessageIn                      []*string                    `json:"message_in"`
	MessageNotIn                   []*string                    `json:"message_not_in"`
	MerchantID                     *string                      `json:"merchantId"`
	MerchantIDNot                  *string                      `json:"merchantId_not"`
	MerchantIDContains             *string                      `json:"merchantId_contains"`
	MerchantIDNotContains          *string                      `json:"merchantId_not_contains"`
	MerchantIDStartsWith           *string                      `json:"merchantId_starts_with"`
	MerchantIDNotStartsWith        *string                      `json:"merchantId_not_starts_with"`
	MerchantIDEndsWith             *string                      `json:"merchantId_ends_with"`
	MerchantIDNotEndsWith          *string                      `json:"merchantId_not_ends_with"`
	MerchantIDI                    *string                      `json:"merchantId_i"`
	MerchantIDNotI                 *string                      `json:"merchantId_not_i"`
	MerchantIDContainsI            *string                      `json:"merchantId_contains_i"`
	MerchantIDNotContainsI         *string                      `json:"merchantId_not_contains_i"`
	MerchantIDStartsWithI          *string                      `json:"merchantId_starts_with_i"`
	MerchantIDNotStartsWithI       *string                      `json:"merchantId_not_starts_with_i"`
	MerchantIDEndsWithI            *string                      `json:"merchantId_ends_with_i"`
	MerchantIDNotEndsWithI         *string                      `json:"merchantId_not_ends_with_i"`
	MerchantIDIn                   []*string                    `json:"merchantId_in"`
	MerchantIDNotIn                []*string                    `json:"merchantId_not_in"`
	OrderNumber                    *string                      `json:"orderNumber"`
	OrderNumberNot                 *string                      `json:"orderNumber_not"`
	OrderNumberContains            *string                      `json:"orderNumber_contains"`
	OrderNumberNotContains         *string                      `json:"orderNumber_not_contains"`
	OrderNumberStartsWith          *string                      `json:"orderNumber_starts_with"`
	OrderNumberNotStartsWith       *string                      `json:"orderNumber_not_starts_with"`
	OrderNumberEndsWith            *string                      `json:"orderNumber_ends_with"`
	OrderNumberNotEndsWith         *string                      `json:"orderNumber_not_ends_with"`
	OrderNumberI                   *string                      `json:"orderNumber_i"`
	OrderNumberNotI                *string                      `json:"orderNumber_not_i"`
	OrderNumberContainsI           *string                      `json:"orderNumber_contains_i"`
	OrderNumberNotContainsI        *string                      `json:"orderNumber_not_contains_i"`
	OrderNumberStartsWithI         *string                      `json:"orderNumber_starts_with_i"`
	OrderNumberNotStartsWithI      *string                      `json:"orderNumber_not_starts_with_i"`
	OrderNumberEndsWithI           *string                      `json:"orderNumber_ends_with_i"`
	OrderNumberNotEndsWithI        *string                      `json:"orderNumber_not_ends_with_i"`
	OrderNumberIn                  []*string                    `json:"orderNumber_in"`
	OrderNumberNotIn               []*string                    `json:"orderNumber_not_in"`
	TokenUseStatus                 *int                         `json:"tokenUseStatus"`
	TokenUseStatusNot              *int                         `json:"tokenUseStatus_not"`
	TokenUseStatusLt               *int                         `json:"tokenUseStatus_lt"`
	TokenUseStatusLte              *int                         `json:"tokenUseStatus_lte"`
	TokenUseStatusGt               *int                         `json:"tokenUseStatus_gt"`
	TokenUseStatusGte              *int                         `json:"tokenUseStatus_gte"`
	TokenUseStatusIn               []*int                       `json:"tokenUseStatus_in"`
	TokenUseStatusNotIn            []*int                       `json:"tokenUseStatus_not_in"`
	RespondCode                    *string                      `json:"respondCode"`
	RespondCodeNot                 *string                      `json:"respondCode_not"`
	RespondCodeContains            *string                      `json:"respondCode_contains"`
	RespondCodeNotContains         *string                      `json:"respondCode_not_contains"`
	RespondCodeStartsWith          *string                      `json:"respondCode_starts_with"`
	RespondCodeNotStartsWith       *string                      `json:"respondCode_not_starts_with"`
	RespondCodeEndsWith            *string                      `json:"respondCode_ends_with"`
	RespondCodeNotEndsWith         *string                      `json:"respondCode_not_ends_with"`
	RespondCodeI                   *string                      `json:"respondCode_i"`
	RespondCodeNotI                *string                      `json:"respondCode_not_i"`
	RespondCodeContainsI           *string                      `json:"respondCode_contains_i"`
	RespondCodeNotContainsI        *string                      `json:"respondCode_not_contains_i"`
	RespondCodeStartsWithI         *string                      `json:"respondCode_starts_with_i"`
	RespondCodeNotStartsWithI      *string                      `json:"respondCode_not_starts_with_i"`
	RespondCodeEndsWithI           *string                      `json:"respondCode_ends_with_i"`
	RespondCodeNotEndsWithI        *string                      `json:"respondCode_not_ends_with_i"`
	RespondCodeIn                  []*string                    `json:"respondCode_in"`
	RespondCodeNotIn               []*string                    `json:"respondCode_not_in"`
	Eci                            *string                      `json:"ECI"`
	EciNot                         *string                      `json:"ECI_not"`
	EciContains                    *string                      `json:"ECI_contains"`
	EciNotContains                 *string                      `json:"ECI_not_contains"`
	EciStartsWith                  *string                      `json:"ECI_starts_with"`
	EciNotStartsWith               *string                      `json:"ECI_not_starts_with"`
	EciEndsWith                    *string                      `json:"ECI_ends_with"`
	EciNotEndsWith                 *string                      `json:"ECI_not_ends_with"`
	EciI                           *string                      `json:"ECI_i"`
	EciNotI                        *string                      `json:"ECI_not_i"`
	EciContainsI                   *string                      `json:"ECI_contains_i"`
	EciNotContainsI                *string                      `json:"ECI_not_contains_i"`
	EciStartsWithI                 *string                      `json:"ECI_starts_with_i"`
	EciNotStartsWithI              *string                      `json:"ECI_not_starts_with_i"`
	EciEndsWithI                   *string                      `json:"ECI_ends_with_i"`
	EciNotEndsWithI                *string                      `json:"ECI_not_ends_with_i"`
	EciIn                          []*string                    `json:"ECI_in"`
	EciNotIn                       []*string                    `json:"ECI_not_in"`
	AuthCode                       *string                      `json:"authCode"`
	AuthCodeNot                    *string                      `json:"authCode_not"`
	AuthCodeContains               *string                      `json:"authCode_contains"`
	AuthCodeNotContains            *string                      `json:"authCode_not_contains"`
	AuthCodeStartsWith             *string                      `json:"authCode_starts_with"`
	AuthCodeNotStartsWith          *string                      `json:"authCode_not_starts_with"`
	AuthCodeEndsWith               *string                      `json:"authCode_ends_with"`
	AuthCodeNotEndsWith            *string                      `json:"authCode_not_ends_with"`
	AuthCodeI                      *string                      `json:"authCode_i"`
	AuthCodeNotI                   *string                      `json:"authCode_not_i"`
	AuthCodeContainsI              *string                      `json:"authCode_contains_i"`
	AuthCodeNotContainsI           *string                      `json:"authCode_not_contains_i"`
	AuthCodeStartsWithI            *string                      `json:"authCode_starts_with_i"`
	AuthCodeNotStartsWithI         *string                      `json:"authCode_not_starts_with_i"`
	AuthCodeEndsWithI              *string                      `json:"authCode_ends_with_i"`
	AuthCodeNotEndsWithI           *string                      `json:"authCode_not_ends_with_i"`
	AuthCodeIn                     []*string                    `json:"authCode_in"`
	AuthCodeNotIn                  []*string                    `json:"authCode_not_in"`
	AuthBank                       *string                      `json:"authBank"`
	AuthBankNot                    *string                      `json:"authBank_not"`
	AuthBankContains               *string                      `json:"authBank_contains"`
	AuthBankNotContains            *string                      `json:"authBank_not_contains"`
	AuthBankStartsWith             *string                      `json:"authBank_starts_with"`
	AuthBankNotStartsWith          *string                      `json:"authBank_not_starts_with"`
	AuthBankEndsWith               *string                      `json:"authBank_ends_with"`
	AuthBankNotEndsWith            *string                      `json:"authBank_not_ends_with"`
	AuthBankI                      *string                      `json:"authBank_i"`
	AuthBankNotI                   *string                      `json:"authBank_not_i"`
	AuthBankContainsI              *string                      `json:"authBank_contains_i"`
	AuthBankNotContainsI           *string                      `json:"authBank_not_contains_i"`
	AuthBankStartsWithI            *string                      `json:"authBank_starts_with_i"`
	AuthBankNotStartsWithI         *string                      `json:"authBank_not_starts_with_i"`
	AuthBankEndsWithI              *string                      `json:"authBank_ends_with_i"`
	AuthBankNotEndsWithI           *string                      `json:"authBank_not_ends_with_i"`
	AuthBankIn                     []*string                    `json:"authBank_in"`
	AuthBankNotIn                  []*string                    `json:"authBank_not_in"`
	CardInfoLastFour               *string                      `json:"cardInfoLastFour"`
	CardInfoLastFourNot            *string                      `json:"cardInfoLastFour_not"`
	CardInfoLastFourContains       *string                      `json:"cardInfoLastFour_contains"`
	CardInfoLastFourNotContains    *string                      `json:"cardInfoLastFour_not_contains"`
	CardInfoLastFourStartsWith     *string                      `json:"cardInfoLastFour_starts_with"`
	CardInfoLastFourNotStartsWith  *string                      `json:"cardInfoLastFour_not_starts_with"`
	CardInfoLastFourEndsWith       *string                      `json:"cardInfoLastFour_ends_with"`
	CardInfoLastFourNotEndsWith    *string                      `json:"cardInfoLastFour_not_ends_with"`
	CardInfoLastFourI              *string                      `json:"cardInfoLastFour_i"`
	CardInfoLastFourNotI           *string                      `json:"cardInfoLastFour_not_i"`
	CardInfoLastFourContainsI      *string                      `json:"cardInfoLastFour_contains_i"`
	CardInfoLastFourNotContainsI   *string                      `json:"cardInfoLastFour_not_contains_i"`
	CardInfoLastFourStartsWithI    *string                      `json:"cardInfoLastFour_starts_with_i"`
	CardInfoLastFourNotStartsWithI *string                      `json:"cardInfoLastFour_not_starts_with_i"`
	CardInfoLastFourEndsWithI      *string                      `json:"cardInfoLastFour_ends_with_i"`
	CardInfoLastFourNotEndsWithI   *string                      `json:"cardInfoLastFour_not_ends_with_i"`
	CardInfoLastFourIn             []*string                    `json:"cardInfoLastFour_in"`
	CardInfoLastFourNotIn          []*string                    `json:"cardInfoLastFour_not_in"`
	CardInfoFirstSix               *string                      `json:"cardInfoFirstSix"`
	CardInfoFirstSixNot            *string                      `json:"cardInfoFirstSix_not"`
	CardInfoFirstSixContains       *string                      `json:"cardInfoFirstSix_contains"`
	CardInfoFirstSixNotContains    *string                      `json:"cardInfoFirstSix_not_contains"`
	CardInfoFirstSixStartsWith     *string                      `json:"cardInfoFirstSix_starts_with"`
	CardInfoFirstSixNotStartsWith  *string                      `json:"cardInfoFirstSix_not_starts_with"`
	CardInfoFirstSixEndsWith       *string                      `json:"cardInfoFirstSix_ends_with"`
	CardInfoFirstSixNotEndsWith    *string                      `json:"cardInfoFirstSix_not_ends_with"`
	CardInfoFirstSixI              *string                      `json:"cardInfoFirstSix_i"`
	CardInfoFirstSixNotI           *string                      `json:"cardInfoFirstSix_not_i"`
	CardInfoFirstSixContainsI      *string                      `json:"cardInfoFirstSix_contains_i"`
	CardInfoFirstSixNotContainsI   *string                      `json:"cardInfoFirstSix_not_contains_i"`
	CardInfoFirstSixStartsWithI    *string                      `json:"cardInfoFirstSix_starts_with_i"`
	CardInfoFirstSixNotStartsWithI *string                      `json:"cardInfoFirstSix_not_starts_with_i"`
	CardInfoFirstSixEndsWithI      *string                      `json:"cardInfoFirstSix_ends_with_i"`
	CardInfoFirstSixNotEndsWithI   *string                      `json:"cardInfoFirstSix_not_ends_with_i"`
	CardInfoFirstSixIn             []*string                    `json:"cardInfoFirstSix_in"`
	CardInfoFirstSixNotIn          []*string                    `json:"cardInfoFirstSix_not_in"`
	CardInfoExp                    *string                      `json:"cardInfoExp"`
	CardInfoExpNot                 *string                      `json:"cardInfoExp_not"`
	CardInfoExpContains            *string                      `json:"cardInfoExp_contains"`
	CardInfoExpNotContains         *string                      `json:"cardInfoExp_not_contains"`
	CardInfoExpStartsWith          *string                      `json:"cardInfoExp_starts_with"`
	CardInfoExpNotStartsWith       *string                      `json:"cardInfoExp_not_starts_with"`
	CardInfoExpEndsWith            *string                      `json:"cardInfoExp_ends_with"`
	CardInfoExpNotEndsWith         *string                      `json:"cardInfoExp_not_ends_with"`
	CardInfoExpI                   *string                      `json:"cardInfoExp_i"`
	CardInfoExpNotI                *string                      `json:"cardInfoExp_not_i"`
	CardInfoExpContainsI           *string                      `json:"cardInfoExp_contains_i"`
	CardInfoExpNotContainsI        *string                      `json:"cardInfoExp_not_contains_i"`
	CardInfoExpStartsWithI         *string                      `json:"cardInfoExp_starts_with_i"`
	CardInfoExpNotStartsWithI      *string                      `json:"cardInfoExp_not_starts_with_i"`
	CardInfoExpEndsWithI           *string                      `json:"cardInfoExp_ends_with_i"`
	CardInfoExpNotEndsWithI        *string                      `json:"cardInfoExp_not_ends_with_i"`
	CardInfoExpIn                  []*string                    `json:"cardInfoExp_in"`
	CardInfoExpNotIn               []*string                    `json:"cardInfoExp_not_in"`
	CreatedAt                      *string                      `json:"createdAt"`
	CreatedAtNot                   *string                      `json:"createdAt_not"`
	CreatedAtLt                    *string                      `json:"createdAt_lt"`
	CreatedAtLte                   *string                      `json:"createdAt_lte"`
	CreatedAtGt                    *string                      `json:"createdAt_gt"`
	CreatedAtGte                   *string                      `json:"createdAt_gte"`
	CreatedAtIn                    []*string                    `json:"createdAt_in"`
	CreatedAtNotIn                 []*string                    `json:"createdAt_not_in"`
	UpdatedAt                      *string                      `json:"updatedAt"`
	UpdatedAtNot                   *string                      `json:"updatedAt_not"`
	UpdatedAtLt                    *string                      `json:"updatedAt_lt"`
	UpdatedAtLte                   *string                      `json:"updatedAt_lte"`
	UpdatedAtGt                    *string                      `json:"updatedAt_gt"`
	UpdatedAtGte                   *string                      `json:"updatedAt_gte"`
	UpdatedAtIn                    []*string                    `json:"updatedAt_in"`
	UpdatedAtNotIn                 []*string                    `json:"updatedAt_not_in"`
	CreatedByIsNull                *bool                        `json:"createdBy_is_null"`
	UpdatedByIsNull                *bool                        `json:"updatedBy_is_null"`
}

type NewebpayPaymentWhereUniqueInput struct {
	ID          *string `json:"id"`
	OrderNumber *string `json:"orderNumber"`
}

type Promotion struct {
	ID        string              `json:"id"`
	Code      *string             `json:"code"`
	Plan      *PromotionPlanType  `json:"plan"`
	State     *PromotionStateType `json:"state"`
	StartAt   *string             `json:"startAt"`
	EndAt     *string             `json:"endAt"`
	Discount  *float64            `json:"discount"`
	CreatedAt *string             `json:"createdAt"`
	UpdatedAt *string             `json:"updatedAt"`
}

type PromotionCreateInput struct {
	Code      *string             `json:"code"`
	Plan      *PromotionPlanType  `json:"plan"`
	State     *PromotionStateType `json:"state"`
	StartAt   *string             `json:"startAt"`
	EndAt     *string             `json:"endAt"`
	Discount  *float64            `json:"discount"`
	CreatedAt *string             `json:"createdAt"`
	UpdatedAt *string             `json:"updatedAt"`
}

type PromotionOrderByInput struct {
	ID        *OrderDirection `json:"id"`
	Code      *OrderDirection `json:"code"`
	Plan      *OrderDirection `json:"plan"`
	State     *OrderDirection `json:"state"`
	StartAt   *OrderDirection `json:"startAt"`
	EndAt     *OrderDirection `json:"endAt"`
	Discount  *OrderDirection `json:"discount"`
	CreatedAt *OrderDirection `json:"createdAt"`
	UpdatedAt *OrderDirection `json:"updatedAt"`
}

type PromotionUpdateInput struct {
	Code      *string             `json:"code"`
	Plan      *PromotionPlanType  `json:"plan"`
	State     *PromotionStateType `json:"state"`
	StartAt   *string             `json:"startAt"`
	EndAt     *string             `json:"endAt"`
	Discount  *float64            `json:"discount"`
	CreatedAt *string             `json:"createdAt"`
	UpdatedAt *string             `json:"updatedAt"`
}

type PromotionWhereInput struct {
	And                []*PromotionWhereInput `json:"AND"`
	Or                 []*PromotionWhereInput `json:"OR"`
	ID                 *string                `json:"id"`
	IDNot              *string                `json:"id_not"`
	IDLt               *string                `json:"id_lt"`
	IDLte              *string                `json:"id_lte"`
	IDGt               *string                `json:"id_gt"`
	IDGte              *string                `json:"id_gte"`
	IDIn               []string               `json:"id_in"`
	IDNotIn            []string               `json:"id_not_in"`
	Code               *string                `json:"code"`
	CodeNot            *string                `json:"code_not"`
	CodeContains       *string                `json:"code_contains"`
	CodeNotContains    *string                `json:"code_not_contains"`
	CodeStartsWith     *string                `json:"code_starts_with"`
	CodeNotStartsWith  *string                `json:"code_not_starts_with"`
	CodeEndsWith       *string                `json:"code_ends_with"`
	CodeNotEndsWith    *string                `json:"code_not_ends_with"`
	CodeI              *string                `json:"code_i"`
	CodeNotI           *string                `json:"code_not_i"`
	CodeContainsI      *string                `json:"code_contains_i"`
	CodeNotContainsI   *string                `json:"code_not_contains_i"`
	CodeStartsWithI    *string                `json:"code_starts_with_i"`
	CodeNotStartsWithI *string                `json:"code_not_starts_with_i"`
	CodeEndsWithI      *string                `json:"code_ends_with_i"`
	CodeNotEndsWithI   *string                `json:"code_not_ends_with_i"`
	CodeIn             []*string              `json:"code_in"`
	CodeNotIn          []*string              `json:"code_not_in"`
	Plan               *PromotionPlanType     `json:"plan"`
	PlanNot            *PromotionPlanType     `json:"plan_not"`
	PlanIn             []*PromotionPlanType   `json:"plan_in"`
	PlanNotIn          []*PromotionPlanType   `json:"plan_not_in"`
	State              *PromotionStateType    `json:"state"`
	StateNot           *PromotionStateType    `json:"state_not"`
	StateIn            []*PromotionStateType  `json:"state_in"`
	StateNotIn         []*PromotionStateType  `json:"state_not_in"`
	StartAt            *string                `json:"startAt"`
	StartAtNot         *string                `json:"startAt_not"`
	StartAtLt          *string                `json:"startAt_lt"`
	StartAtLte         *string                `json:"startAt_lte"`
	StartAtGt          *string                `json:"startAt_gt"`
	StartAtGte         *string                `json:"startAt_gte"`
	StartAtIn          []*string              `json:"startAt_in"`
	StartAtNotIn       []*string              `json:"startAt_not_in"`
	EndAt              *string                `json:"endAt"`
	EndAtNot           *string                `json:"endAt_not"`
	EndAtLt            *string                `json:"endAt_lt"`
	EndAtLte           *string                `json:"endAt_lte"`
	EndAtGt            *string                `json:"endAt_gt"`
	EndAtGte           *string                `json:"endAt_gte"`
	EndAtIn            []*string              `json:"endAt_in"`
	EndAtNotIn         []*string              `json:"endAt_not_in"`
	Discount           *float64               `json:"discount"`
	DiscountNot        *float64               `json:"discount_not"`
	DiscountLt         *float64               `json:"discount_lt"`
	DiscountLte        *float64               `json:"discount_lte"`
	DiscountGt         *float64               `json:"discount_gt"`
	DiscountGte        *float64               `json:"discount_gte"`
	DiscountIn         []*float64             `json:"discount_in"`
	DiscountNotIn      []*float64             `json:"discount_not_in"`
	CreatedAt          *string                `json:"createdAt"`
	CreatedAtNot       *string                `json:"createdAt_not"`
	CreatedAtLt        *string                `json:"createdAt_lt"`
	CreatedAtLte       *string                `json:"createdAt_lte"`
	CreatedAtGt        *string                `json:"createdAt_gt"`
	CreatedAtGte       *string                `json:"createdAt_gte"`
	CreatedAtIn        []*string              `json:"createdAt_in"`
	CreatedAtNotIn     []*string              `json:"createdAt_not_in"`
	UpdatedAt          *string                `json:"updatedAt"`
	UpdatedAtNot       *string                `json:"updatedAt_not"`
	UpdatedAtLt        *string                `json:"updatedAt_lt"`
	UpdatedAtLte       *string                `json:"updatedAt_lte"`
	UpdatedAtGt        *string                `json:"updatedAt_gt"`
	UpdatedAtGte       *string                `json:"updatedAt_gte"`
	UpdatedAtIn        []*string              `json:"updatedAt_in"`
	UpdatedAtNotIn     []*string              `json:"updatedAt_not_in"`
	CreatedByIsNull    *bool                  `json:"createdBy_is_null"`
	UpdatedByIsNull    *bool                  `json:"updatedBy_is_null"`
}

type PromotionWhereUniqueInput struct {
	ID *string `json:"id"`
}

type Subscription struct {
	ID                        string                         `json:"id"`
	Member                    *Member                        `json:"member"`
	PaymentMethod             *SubscriptionPaymentMethodType `json:"paymentMethod"`
	NewebpayPayment           []*NewebpayPayment             `json:"newebpayPayment"`
	NewebpayPaymentCount      *int                           `json:"newebpayPaymentCount"`
	ApplepayPayment           []*ApplepayPayment             `json:"applepayPayment"`
	ApplepayPaymentCount      *int                           `json:"applepayPaymentCount"`
	AndroidpayPayment         []*AndroidpayPayment           `json:"androidpayPayment"`
	AndroidpayPaymentCount    *int                           `json:"androidpayPaymentCount"`
	Status                    *SubscriptionStatusType        `json:"status"`
	Amount                    *float64                       `json:"amount"`
	Currency                  *SubscriptionCurrencyType      `json:"currency"`
	Desc                      *string                        `json:"desc"`
	Comment                   *string                        `json:"comment"`
	Email                     *string                        `json:"email"`
	OrderNumber               *string                        `json:"orderNumber"`
	IsActive                  *bool                          `json:"isActive"`
	IsCanceled                *bool                          `json:"isCanceled"`
	Frequency                 *SubscriptionFrequencyType     `json:"frequency"`
	NextFrequency             *SubscriptionNextFrequencyType `json:"nextFrequency"`
	PeriodFailureTimes        *int                           `json:"periodFailureTimes"`
	PeriodLastSuccessDatetime *string                        `json:"periodLastSuccessDatetime"`
	PeriodNextPayDatetime     *string                        `json:"periodNextPayDatetime"`
	PeriodCreateDatetime      *string                        `json:"periodCreateDatetime"`
	PeriodFirstDatetime       *string                        `json:"periodFirstDatetime"`
	PeriodEndDatetime         *string                        `json:"periodEndDatetime"`
	ChangePlanDatetime        *string                        `json:"changePlanDatetime"`
	Note                      *string                        `json:"note"`
	PromoteID                 *int                           `json:"promoteId"`
	PostID                    *string                        `json:"postId"`
	OneTimeStartDatetime      *string                        `json:"oneTimeStartDatetime"`
	OneTimeEndDatetime        *string                        `json:"oneTimeEndDatetime"`
	NewebpayPaymentInfo       *NewebpayPaymentInfo           `json:"newebpayPaymentInfo"`
	CreatedAt                 *string                        `json:"createdAt"`
	UpdatedAt                 *string                        `json:"updatedAt"`
}

type SubscriptionCreateInput struct {
	Member                    *MemberRelateToOneInput              `json:"member"`
	PaymentMethod             *SubscriptionPaymentMethodType       `json:"paymentMethod"`
	NewebpayPayment           *NewebpayPaymentRelateToManyInput    `json:"newebpayPayment"`
	ApplepayPayment           *ApplepayPaymentRelateToManyInput    `json:"applepayPayment"`
	AndroidpayPayment         *AndroidpayPaymentRelateToManyInput  `json:"androidpayPayment"`
	Status                    *SubscriptionStatusType              `json:"status"`
	Amount                    *float64                             `json:"amount"`
	Currency                  *SubscriptionCurrencyType            `json:"currency"`
	Desc                      *string                              `json:"desc"`
	Comment                   *string                              `json:"comment"`
	Email                     *string                              `json:"email"`
	OrderNumber               *string                              `json:"orderNumber"`
	IsActive                  *bool                                `json:"isActive"`
	IsCanceled                *bool                                `json:"isCanceled"`
	Frequency                 *SubscriptionFrequencyType           `json:"frequency"`
	NextFrequency             *SubscriptionNextFrequencyType       `json:"nextFrequency"`
	PeriodFailureTimes        *int                                 `json:"periodFailureTimes"`
	PeriodLastSuccessDatetime *string                              `json:"periodLastSuccessDatetime"`
	PeriodNextPayDatetime     *string                              `json:"periodNextPayDatetime"`
	PeriodCreateDatetime      *string                              `json:"periodCreateDatetime"`
	PeriodFirstDatetime       *string                              `json:"periodFirstDatetime"`
	PeriodEndDatetime         *string                              `json:"periodEndDatetime"`
	ChangePlanDatetime        *string                              `json:"changePlanDatetime"`
	Note                      *string                              `json:"note"`
	PromoteID                 *int                                 `json:"promoteId"`
	PostID                    *string                              `json:"postId"`
	OneTimeStartDatetime      *string                              `json:"oneTimeStartDatetime"`
	OneTimeEndDatetime        *string                              `json:"oneTimeEndDatetime"`
	NewebpayPaymentInfo       *NewebpayPaymentInfoRelateToOneInput `json:"newebpayPaymentInfo"`
	CreatedAt                 *string                              `json:"createdAt"`
	UpdatedAt                 *string                              `json:"updatedAt"`
}

type SubscriptionCreation struct {
	Subscription    *SubscriptionInfo `json:"subscription"`
	NewebpayPayload *string           `json:"newebpayPayload"`
}

type SubscriptionHistory struct {
	ID                    string                            `json:"id"`
	Subscription          *Subscription                     `json:"subscription"`
	SubscriptionCreatedAt *string                           `json:"subscriptionCreatedAt"`
	SubscriptionUpdatedAt *string                           `json:"subscriptionUpdatedAt"`
	Member                *Member                           `json:"member"`
	Status                *SubscriptionHistoryStatusType    `json:"status"`
	Amount                *int                              `json:"amount"`
	Currency              *SubscriptionHistoryCurrencyType  `json:"currency"`
	Desc                  *string                           `json:"desc"`
	Email                 *string                           `json:"email"`
	OrderNumber           *string                           `json:"orderNumber"`
	Frequency             *SubscriptionHistoryFrequencyType `json:"frequency"`
	TokenValue            *string                           `json:"tokenValue"`
	TokenLife             *string                           `json:"tokenLife"`
	TokenTerm             *string                           `json:"tokenTerm"`
	PeriodLastSuccessDate *string                           `json:"periodLastSuccessDate"`
	PeriodNextPayDate     *string                           `json:"periodNextPayDate"`
	PeriodFirstDate       *string                           `json:"periodFirstDate"`
	ChangePlanDatetime    *string                           `json:"changePlanDatetime"`
	Note                  *string                           `json:"note"`
	PromoteID             *int                              `json:"promoteId"`
	PostID                *string                           `json:"postId"`
	OneTimeStartDate      *string                           `json:"oneTimeStartDate"`
	OneTimeEndDate        *string                           `json:"oneTimeEndDate"`
	Action                *SubscriptionHistoryActionType    `json:"action"`
}

type SubscriptionHistoryCreateInput struct {
	Subscription          *SubscriptionRelateToOneInput     `json:"subscription"`
	SubscriptionCreatedAt *string                           `json:"subscriptionCreatedAt"`
	SubscriptionUpdatedAt *string                           `json:"subscriptionUpdatedAt"`
	Member                *MemberRelateToOneInput           `json:"member"`
	Status                *SubscriptionHistoryStatusType    `json:"status"`
	Amount                *int                              `json:"amount"`
	Currency              *SubscriptionHistoryCurrencyType  `json:"currency"`
	Desc                  *string                           `json:"desc"`
	Email                 *string                           `json:"email"`
	OrderNumber           *string                           `json:"orderNumber"`
	Frequency             *SubscriptionHistoryFrequencyType `json:"frequency"`
	TokenValue            *string                           `json:"tokenValue"`
	TokenLife             *string                           `json:"tokenLife"`
	TokenTerm             *string                           `json:"tokenTerm"`
	PeriodLastSuccessDate *string                           `json:"periodLastSuccessDate"`
	PeriodNextPayDate     *string                           `json:"periodNextPayDate"`
	PeriodFirstDate       *string                           `json:"periodFirstDate"`
	ChangePlanDatetime    *string                           `json:"changePlanDatetime"`
	Note                  *string                           `json:"note"`
	PromoteID             *int                              `json:"promoteId"`
	PostID                *string                           `json:"postId"`
	OneTimeStartDate      *string                           `json:"oneTimeStartDate"`
	OneTimeEndDate        *string                           `json:"oneTimeEndDate"`
	Action                *SubscriptionHistoryActionType    `json:"action"`
}

type SubscriptionHistoryOrderByInput struct {
	ID                    *OrderDirection `json:"id"`
	SubscriptionCreatedAt *OrderDirection `json:"subscriptionCreatedAt"`
	SubscriptionUpdatedAt *OrderDirection `json:"subscriptionUpdatedAt"`
	Status                *OrderDirection `json:"status"`
	Amount                *OrderDirection `json:"amount"`
	Currency              *OrderDirection `json:"currency"`
	Desc                  *OrderDirection `json:"desc"`
	Email                 *OrderDirection `json:"email"`
	OrderNumber           *OrderDirection `json:"orderNumber"`
	Frequency             *OrderDirection `json:"frequency"`
	TokenValue            *OrderDirection `json:"tokenValue"`
	TokenLife             *OrderDirection `json:"tokenLife"`
	TokenTerm             *OrderDirection `json:"tokenTerm"`
	PeriodLastSuccessDate *OrderDirection `json:"periodLastSuccessDate"`
	PeriodNextPayDate     *OrderDirection `json:"periodNextPayDate"`
	PeriodFirstDate       *OrderDirection `json:"periodFirstDate"`
	ChangePlanDatetime    *OrderDirection `json:"changePlanDatetime"`
	Note                  *OrderDirection `json:"note"`
	PromoteID             *OrderDirection `json:"promoteId"`
	PostID                *OrderDirection `json:"postId"`
	OneTimeStartDate      *OrderDirection `json:"oneTimeStartDate"`
	OneTimeEndDate        *OrderDirection `json:"oneTimeEndDate"`
	Action                *OrderDirection `json:"action"`
}

type SubscriptionHistoryUpdateInput struct {
	Subscription          *SubscriptionRelateToOneInput     `json:"subscription"`
	SubscriptionCreatedAt *string                           `json:"subscriptionCreatedAt"`
	SubscriptionUpdatedAt *string                           `json:"subscriptionUpdatedAt"`
	Member                *MemberRelateToOneInput           `json:"member"`
	Status                *SubscriptionHistoryStatusType    `json:"status"`
	Amount                *int                              `json:"amount"`
	Currency              *SubscriptionHistoryCurrencyType  `json:"currency"`
	Desc                  *string                           `json:"desc"`
	Email                 *string                           `json:"email"`
	OrderNumber           *string                           `json:"orderNumber"`
	Frequency             *SubscriptionHistoryFrequencyType `json:"frequency"`
	TokenValue            *string                           `json:"tokenValue"`
	TokenLife             *string                           `json:"tokenLife"`
	TokenTerm             *string                           `json:"tokenTerm"`
	PeriodLastSuccessDate *string                           `json:"periodLastSuccessDate"`
	PeriodNextPayDate     *string                           `json:"periodNextPayDate"`
	PeriodFirstDate       *string                           `json:"periodFirstDate"`
	ChangePlanDatetime    *string                           `json:"changePlanDatetime"`
	Note                  *string                           `json:"note"`
	PromoteID             *int                              `json:"promoteId"`
	PostID                *string                           `json:"postId"`
	OneTimeStartDate      *string                           `json:"oneTimeStartDate"`
	OneTimeEndDate        *string                           `json:"oneTimeEndDate"`
	Action                *SubscriptionHistoryActionType    `json:"action"`
}

type SubscriptionHistoryWhereInput struct {
	And                        []*SubscriptionHistoryWhereInput    `json:"AND"`
	Or                         []*SubscriptionHistoryWhereInput    `json:"OR"`
	ID                         *string                             `json:"id"`
	IDNot                      *string                             `json:"id_not"`
	IDLt                       *string                             `json:"id_lt"`
	IDLte                      *string                             `json:"id_lte"`
	IDGt                       *string                             `json:"id_gt"`
	IDGte                      *string                             `json:"id_gte"`
	IDIn                       []string                            `json:"id_in"`
	IDNotIn                    []string                            `json:"id_not_in"`
	Subscription               *SubscriptionWhereInput             `json:"subscription"`
	SubscriptionIsNull         *bool                               `json:"subscription_is_null"`
	SubscriptionCreatedAt      *string                             `json:"subscriptionCreatedAt"`
	SubscriptionCreatedAtNot   *string                             `json:"subscriptionCreatedAt_not"`
	SubscriptionCreatedAtLt    *string                             `json:"subscriptionCreatedAt_lt"`
	SubscriptionCreatedAtLte   *string                             `json:"subscriptionCreatedAt_lte"`
	SubscriptionCreatedAtGt    *string                             `json:"subscriptionCreatedAt_gt"`
	SubscriptionCreatedAtGte   *string                             `json:"subscriptionCreatedAt_gte"`
	SubscriptionCreatedAtIn    []*string                           `json:"subscriptionCreatedAt_in"`
	SubscriptionCreatedAtNotIn []*string                           `json:"subscriptionCreatedAt_not_in"`
	SubscriptionUpdatedAt      *string                             `json:"subscriptionUpdatedAt"`
	SubscriptionUpdatedAtNot   *string                             `json:"subscriptionUpdatedAt_not"`
	SubscriptionUpdatedAtLt    *string                             `json:"subscriptionUpdatedAt_lt"`
	SubscriptionUpdatedAtLte   *string                             `json:"subscriptionUpdatedAt_lte"`
	SubscriptionUpdatedAtGt    *string                             `json:"subscriptionUpdatedAt_gt"`
	SubscriptionUpdatedAtGte   *string                             `json:"subscriptionUpdatedAt_gte"`
	SubscriptionUpdatedAtIn    []*string                           `json:"subscriptionUpdatedAt_in"`
	SubscriptionUpdatedAtNotIn []*string                           `json:"subscriptionUpdatedAt_not_in"`
	Member                     *MemberWhereInput                   `json:"member"`
	MemberIsNull               *bool                               `json:"member_is_null"`
	Status                     *SubscriptionHistoryStatusType      `json:"status"`
	StatusNot                  *SubscriptionHistoryStatusType      `json:"status_not"`
	StatusIn                   []*SubscriptionHistoryStatusType    `json:"status_in"`
	StatusNotIn                []*SubscriptionHistoryStatusType    `json:"status_not_in"`
	Amount                     *int                                `json:"amount"`
	AmountNot                  *int                                `json:"amount_not"`
	AmountLt                   *int                                `json:"amount_lt"`
	AmountLte                  *int                                `json:"amount_lte"`
	AmountGt                   *int                                `json:"amount_gt"`
	AmountGte                  *int                                `json:"amount_gte"`
	AmountIn                   []*int                              `json:"amount_in"`
	AmountNotIn                []*int                              `json:"amount_not_in"`
	Currency                   *SubscriptionHistoryCurrencyType    `json:"currency"`
	CurrencyNot                *SubscriptionHistoryCurrencyType    `json:"currency_not"`
	CurrencyIn                 []*SubscriptionHistoryCurrencyType  `json:"currency_in"`
	CurrencyNotIn              []*SubscriptionHistoryCurrencyType  `json:"currency_not_in"`
	Desc                       *string                             `json:"desc"`
	DescNot                    *string                             `json:"desc_not"`
	DescContains               *string                             `json:"desc_contains"`
	DescNotContains            *string                             `json:"desc_not_contains"`
	DescStartsWith             *string                             `json:"desc_starts_with"`
	DescNotStartsWith          *string                             `json:"desc_not_starts_with"`
	DescEndsWith               *string                             `json:"desc_ends_with"`
	DescNotEndsWith            *string                             `json:"desc_not_ends_with"`
	DescI                      *string                             `json:"desc_i"`
	DescNotI                   *string                             `json:"desc_not_i"`
	DescContainsI              *string                             `json:"desc_contains_i"`
	DescNotContainsI           *string                             `json:"desc_not_contains_i"`
	DescStartsWithI            *string                             `json:"desc_starts_with_i"`
	DescNotStartsWithI         *string                             `json:"desc_not_starts_with_i"`
	DescEndsWithI              *string                             `json:"desc_ends_with_i"`
	DescNotEndsWithI           *string                             `json:"desc_not_ends_with_i"`
	DescIn                     []*string                           `json:"desc_in"`
	DescNotIn                  []*string                           `json:"desc_not_in"`
	Email                      *string                             `json:"email"`
	EmailNot                   *string                             `json:"email_not"`
	EmailContains              *string                             `json:"email_contains"`
	EmailNotContains           *string                             `json:"email_not_contains"`
	EmailStartsWith            *string                             `json:"email_starts_with"`
	EmailNotStartsWith         *string                             `json:"email_not_starts_with"`
	EmailEndsWith              *string                             `json:"email_ends_with"`
	EmailNotEndsWith           *string                             `json:"email_not_ends_with"`
	EmailI                     *string                             `json:"email_i"`
	EmailNotI                  *string                             `json:"email_not_i"`
	EmailContainsI             *string                             `json:"email_contains_i"`
	EmailNotContainsI          *string                             `json:"email_not_contains_i"`
	EmailStartsWithI           *string                             `json:"email_starts_with_i"`
	EmailNotStartsWithI        *string                             `json:"email_not_starts_with_i"`
	EmailEndsWithI             *string                             `json:"email_ends_with_i"`
	EmailNotEndsWithI          *string                             `json:"email_not_ends_with_i"`
	EmailIn                    []*string                           `json:"email_in"`
	EmailNotIn                 []*string                           `json:"email_not_in"`
	OrderNumber                *string                             `json:"orderNumber"`
	OrderNumberNot             *string                             `json:"orderNumber_not"`
	OrderNumberContains        *string                             `json:"orderNumber_contains"`
	OrderNumberNotContains     *string                             `json:"orderNumber_not_contains"`
	OrderNumberStartsWith      *string                             `json:"orderNumber_starts_with"`
	OrderNumberNotStartsWith   *string                             `json:"orderNumber_not_starts_with"`
	OrderNumberEndsWith        *string                             `json:"orderNumber_ends_with"`
	OrderNumberNotEndsWith     *string                             `json:"orderNumber_not_ends_with"`
	OrderNumberI               *string                             `json:"orderNumber_i"`
	OrderNumberNotI            *string                             `json:"orderNumber_not_i"`
	OrderNumberContainsI       *string                             `json:"orderNumber_contains_i"`
	OrderNumberNotContainsI    *string                             `json:"orderNumber_not_contains_i"`
	OrderNumberStartsWithI     *string                             `json:"orderNumber_starts_with_i"`
	OrderNumberNotStartsWithI  *string                             `json:"orderNumber_not_starts_with_i"`
	OrderNumberEndsWithI       *string                             `json:"orderNumber_ends_with_i"`
	OrderNumberNotEndsWithI    *string                             `json:"orderNumber_not_ends_with_i"`
	OrderNumberIn              []*string                           `json:"orderNumber_in"`
	OrderNumberNotIn           []*string                           `json:"orderNumber_not_in"`
	Frequency                  *SubscriptionHistoryFrequencyType   `json:"frequency"`
	FrequencyNot               *SubscriptionHistoryFrequencyType   `json:"frequency_not"`
	FrequencyIn                []*SubscriptionHistoryFrequencyType `json:"frequency_in"`
	FrequencyNotIn             []*SubscriptionHistoryFrequencyType `json:"frequency_not_in"`
	TokenValue                 *string                             `json:"tokenValue"`
	TokenValueNot              *string                             `json:"tokenValue_not"`
	TokenValueContains         *string                             `json:"tokenValue_contains"`
	TokenValueNotContains      *string                             `json:"tokenValue_not_contains"`
	TokenValueStartsWith       *string                             `json:"tokenValue_starts_with"`
	TokenValueNotStartsWith    *string                             `json:"tokenValue_not_starts_with"`
	TokenValueEndsWith         *string                             `json:"tokenValue_ends_with"`
	TokenValueNotEndsWith      *string                             `json:"tokenValue_not_ends_with"`
	TokenValueI                *string                             `json:"tokenValue_i"`
	TokenValueNotI             *string                             `json:"tokenValue_not_i"`
	TokenValueContainsI        *string                             `json:"tokenValue_contains_i"`
	TokenValueNotContainsI     *string                             `json:"tokenValue_not_contains_i"`
	TokenValueStartsWithI      *string                             `json:"tokenValue_starts_with_i"`
	TokenValueNotStartsWithI   *string                             `json:"tokenValue_not_starts_with_i"`
	TokenValueEndsWithI        *string                             `json:"tokenValue_ends_with_i"`
	TokenValueNotEndsWithI     *string                             `json:"tokenValue_not_ends_with_i"`
	TokenValueIn               []*string                           `json:"tokenValue_in"`
	TokenValueNotIn            []*string                           `json:"tokenValue_not_in"`
	TokenLife                  *string                             `json:"tokenLife"`
	TokenLifeNot               *string                             `json:"tokenLife_not"`
	TokenLifeContains          *string                             `json:"tokenLife_contains"`
	TokenLifeNotContains       *string                             `json:"tokenLife_not_contains"`
	TokenLifeStartsWith        *string                             `json:"tokenLife_starts_with"`
	TokenLifeNotStartsWith     *string                             `json:"tokenLife_not_starts_with"`
	TokenLifeEndsWith          *string                             `json:"tokenLife_ends_with"`
	TokenLifeNotEndsWith       *string                             `json:"tokenLife_not_ends_with"`
	TokenLifeI                 *string                             `json:"tokenLife_i"`
	TokenLifeNotI              *string                             `json:"tokenLife_not_i"`
	TokenLifeContainsI         *string                             `json:"tokenLife_contains_i"`
	TokenLifeNotContainsI      *string                             `json:"tokenLife_not_contains_i"`
	TokenLifeStartsWithI       *string                             `json:"tokenLife_starts_with_i"`
	TokenLifeNotStartsWithI    *string                             `json:"tokenLife_not_starts_with_i"`
	TokenLifeEndsWithI         *string                             `json:"tokenLife_ends_with_i"`
	TokenLifeNotEndsWithI      *string                             `json:"tokenLife_not_ends_with_i"`
	TokenLifeIn                []*string                           `json:"tokenLife_in"`
	TokenLifeNotIn             []*string                           `json:"tokenLife_not_in"`
	TokenTerm                  *string                             `json:"tokenTerm"`
	TokenTermNot               *string                             `json:"tokenTerm_not"`
	TokenTermContains          *string                             `json:"tokenTerm_contains"`
	TokenTermNotContains       *string                             `json:"tokenTerm_not_contains"`
	TokenTermStartsWith        *string                             `json:"tokenTerm_starts_with"`
	TokenTermNotStartsWith     *string                             `json:"tokenTerm_not_starts_with"`
	TokenTermEndsWith          *string                             `json:"tokenTerm_ends_with"`
	TokenTermNotEndsWith       *string                             `json:"tokenTerm_not_ends_with"`
	TokenTermI                 *string                             `json:"tokenTerm_i"`
	TokenTermNotI              *string                             `json:"tokenTerm_not_i"`
	TokenTermContainsI         *string                             `json:"tokenTerm_contains_i"`
	TokenTermNotContainsI      *string                             `json:"tokenTerm_not_contains_i"`
	TokenTermStartsWithI       *string                             `json:"tokenTerm_starts_with_i"`
	TokenTermNotStartsWithI    *string                             `json:"tokenTerm_not_starts_with_i"`
	TokenTermEndsWithI         *string                             `json:"tokenTerm_ends_with_i"`
	TokenTermNotEndsWithI      *string                             `json:"tokenTerm_not_ends_with_i"`
	TokenTermIn                []*string                           `json:"tokenTerm_in"`
	TokenTermNotIn             []*string                           `json:"tokenTerm_not_in"`
	PeriodLastSuccessDate      *int                                `json:"periodLastSuccessDate"`
	PeriodLastSuccessDateNot   *int                                `json:"periodLastSuccessDate_not"`
	PeriodLastSuccessDateLt    *int                                `json:"periodLastSuccessDate_lt"`
	PeriodLastSuccessDateLte   *int                                `json:"periodLastSuccessDate_lte"`
	PeriodLastSuccessDateGt    *int                                `json:"periodLastSuccessDate_gt"`
	PeriodLastSuccessDateGte   *int                                `json:"periodLastSuccessDate_gte"`
	PeriodLastSuccessDateIn    []*int                              `json:"periodLastSuccessDate_in"`
	PeriodLastSuccessDateNotIn []*int                              `json:"periodLastSuccessDate_not_in"`
	PeriodNextPayDate          *int                                `json:"periodNextPayDate"`
	PeriodNextPayDateNot       *int                                `json:"periodNextPayDate_not"`
	PeriodNextPayDateLt        *int                                `json:"periodNextPayDate_lt"`
	PeriodNextPayDateLte       *int                                `json:"periodNextPayDate_lte"`
	PeriodNextPayDateGt        *int                                `json:"periodNextPayDate_gt"`
	PeriodNextPayDateGte       *int                                `json:"periodNextPayDate_gte"`
	PeriodNextPayDateIn        []*int                              `json:"periodNextPayDate_in"`
	PeriodNextPayDateNotIn     []*int                              `json:"periodNextPayDate_not_in"`
	PeriodFirstDate            *int                                `json:"periodFirstDate"`
	PeriodFirstDateNot         *int                                `json:"periodFirstDate_not"`
	PeriodFirstDateLt          *int                                `json:"periodFirstDate_lt"`
	PeriodFirstDateLte         *int                                `json:"periodFirstDate_lte"`
	PeriodFirstDateGt          *int                                `json:"periodFirstDate_gt"`
	PeriodFirstDateGte         *int                                `json:"periodFirstDate_gte"`
	PeriodFirstDateIn          []*int                              `json:"periodFirstDate_in"`
	PeriodFirstDateNotIn       []*int                              `json:"periodFirstDate_not_in"`
	ChangePlanDatetime         *int                                `json:"changePlanDatetime"`
	ChangePlanDatetimeNot      *int                                `json:"changePlanDatetime_not"`
	ChangePlanDatetimeLt       *int                                `json:"changePlanDatetime_lt"`
	ChangePlanDatetimeLte      *int                                `json:"changePlanDatetime_lte"`
	ChangePlanDatetimeGt       *int                                `json:"changePlanDatetime_gt"`
	ChangePlanDatetimeGte      *int                                `json:"changePlanDatetime_gte"`
	ChangePlanDatetimeIn       []*int                              `json:"changePlanDatetime_in"`
	ChangePlanDatetimeNotIn    []*int                              `json:"changePlanDatetime_not_in"`
	Note                       *string                             `json:"note"`
	NoteNot                    *string                             `json:"note_not"`
	NoteContains               *string                             `json:"note_contains"`
	NoteNotContains            *string                             `json:"note_not_contains"`
	NoteStartsWith             *string                             `json:"note_starts_with"`
	NoteNotStartsWith          *string                             `json:"note_not_starts_with"`
	NoteEndsWith               *string                             `json:"note_ends_with"`
	NoteNotEndsWith            *string                             `json:"note_not_ends_with"`
	NoteI                      *string                             `json:"note_i"`
	NoteNotI                   *string                             `json:"note_not_i"`
	NoteContainsI              *string                             `json:"note_contains_i"`
	NoteNotContainsI           *string                             `json:"note_not_contains_i"`
	NoteStartsWithI            *string                             `json:"note_starts_with_i"`
	NoteNotStartsWithI         *string                             `json:"note_not_starts_with_i"`
	NoteEndsWithI              *string                             `json:"note_ends_with_i"`
	NoteNotEndsWithI           *string                             `json:"note_not_ends_with_i"`
	NoteIn                     []*string                           `json:"note_in"`
	NoteNotIn                  []*string                           `json:"note_not_in"`
	PromoteID                  *int                                `json:"promoteId"`
	PromoteIDNot               *int                                `json:"promoteId_not"`
	PromoteIDLt                *int                                `json:"promoteId_lt"`
	PromoteIDLte               *int                                `json:"promoteId_lte"`
	PromoteIDGt                *int                                `json:"promoteId_gt"`
	PromoteIDGte               *int                                `json:"promoteId_gte"`
	PromoteIDIn                []*int                              `json:"promoteId_in"`
	PromoteIDNotIn             []*int                              `json:"promoteId_not_in"`
	PostID                     *string                             `json:"postId"`
	PostIDNot                  *string                             `json:"postId_not"`
	PostIDContains             *string                             `json:"postId_contains"`
	PostIDNotContains          *string                             `json:"postId_not_contains"`
	PostIDStartsWith           *string                             `json:"postId_starts_with"`
	PostIDNotStartsWith        *string                             `json:"postId_not_starts_with"`
	PostIDEndsWith             *string                             `json:"postId_ends_with"`
	PostIDNotEndsWith          *string                             `json:"postId_not_ends_with"`
	PostIDI                    *string                             `json:"postId_i"`
	PostIDNotI                 *string                             `json:"postId_not_i"`
	PostIDContainsI            *string                             `json:"postId_contains_i"`
	PostIDNotContainsI         *string                             `json:"postId_not_contains_i"`
	PostIDStartsWithI          *string                             `json:"postId_starts_with_i"`
	PostIDNotStartsWithI       *string                             `json:"postId_not_starts_with_i"`
	PostIDEndsWithI            *string                             `json:"postId_ends_with_i"`
	PostIDNotEndsWithI         *string                             `json:"postId_not_ends_with_i"`
	PostIDIn                   []*string                           `json:"postId_in"`
	PostIDNotIn                []*string                           `json:"postId_not_in"`
	OneTimeStartDate           *int                                `json:"oneTimeStartDate"`
	OneTimeStartDateNot        *int                                `json:"oneTimeStartDate_not"`
	OneTimeStartDateLt         *int                                `json:"oneTimeStartDate_lt"`
	OneTimeStartDateLte        *int                                `json:"oneTimeStartDate_lte"`
	OneTimeStartDateGt         *int                                `json:"oneTimeStartDate_gt"`
	OneTimeStartDateGte        *int                                `json:"oneTimeStartDate_gte"`
	OneTimeStartDateIn         []*int                              `json:"oneTimeStartDate_in"`
	OneTimeStartDateNotIn      []*int                              `json:"oneTimeStartDate_not_in"`
	OneTimeEndDate             *int                                `json:"oneTimeEndDate"`
	OneTimeEndDateNot          *int                                `json:"oneTimeEndDate_not"`
	OneTimeEndDateLt           *int                                `json:"oneTimeEndDate_lt"`
	OneTimeEndDateLte          *int                                `json:"oneTimeEndDate_lte"`
	OneTimeEndDateGt           *int                                `json:"oneTimeEndDate_gt"`
	OneTimeEndDateGte          *int                                `json:"oneTimeEndDate_gte"`
	OneTimeEndDateIn           []*int                              `json:"oneTimeEndDate_in"`
	OneTimeEndDateNotIn        []*int                              `json:"oneTimeEndDate_not_in"`
	Action                     *SubscriptionHistoryActionType      `json:"action"`
	ActionNot                  *SubscriptionHistoryActionType      `json:"action_not"`
	ActionIn                   []*SubscriptionHistoryActionType    `json:"action_in"`
	ActionNotIn                []*SubscriptionHistoryActionType    `json:"action_not_in"`
}

type SubscriptionHistoryWhereUniqueInput struct {
	ID *string `json:"id"`
}

type SubscriptionInfo struct {
	ID                        string                         `json:"id"`
	Status                    *SubscriptionStatusType        `json:"status"`
	Amount                    *int                           `json:"amount"`
	Currency                  *SubscriptionCurrencyType      `json:"currency"`
	Desc                      *string                        `json:"desc"`
	Email                     *string                        `json:"email"`
	OrderNumber               *string                        `json:"orderNumber"`
	IsActive                  *bool                          `json:"isActive"`
	IsCanceled                *bool                          `json:"isCanceled"`
	Frequency                 *SubscriptionFrequencyType     `json:"frequency"`
	NextFrequency             *SubscriptionNextFrequencyType `json:"nextFrequency"`
	PeriodFailureTimes        *int                           `json:"periodFailureTimes"`
	PeriodLastSuccessDatetime *string                        `json:"periodLastSuccessDatetime"`
	PeriodNextPayDatetime     *string                        `json:"periodNextPayDatetime"`
	PeriodCreateDatetime      *string                        `json:"periodCreateDatetime"`
	PeriodFirstDatetime       *string                        `json:"periodFirstDatetime"`
	PeriodEndDatetime         *string                        `json:"periodEndDatetime"`
	ChangePlanDatetime        *string                        `json:"changePlanDatetime"`
	Note                      *string                        `json:"note"`
	PromoteID                 *int                           `json:"promoteId"`
	PostID                    *string                        `json:"postId"`
	OneTimeStartDatetime      *string                        `json:"oneTimeStartDatetime"`
	OneTimeEndDatetime        *string                        `json:"oneTimeEndDatetime"`
	CreatedAt                 *string                        `json:"createdAt"`
	UpdatedAt                 *string                        `json:"updatedAt"`
}

type SubscriptionOneTimeCreateInfo struct {
	PostSlug     string `json:"postSlug"`
	PostTitle    string `json:"postTitle"`
	ReturnToPath string `json:"returnToPath"`
}

type SubscriptionOrderByInput struct {
	ID                        *OrderDirection `json:"id"`
	PaymentMethod             *OrderDirection `json:"paymentMethod"`
	Status                    *OrderDirection `json:"status"`
	Amount                    *OrderDirection `json:"amount"`
	Currency                  *OrderDirection `json:"currency"`
	Desc                      *OrderDirection `json:"desc"`
	Comment                   *OrderDirection `json:"comment"`
	Email                     *OrderDirection `json:"email"`
	OrderNumber               *OrderDirection `json:"orderNumber"`
	IsActive                  *OrderDirection `json:"isActive"`
	IsCanceled                *OrderDirection `json:"isCanceled"`
	Frequency                 *OrderDirection `json:"frequency"`
	NextFrequency             *OrderDirection `json:"nextFrequency"`
	PeriodFailureTimes        *OrderDirection `json:"periodFailureTimes"`
	PeriodLastSuccessDatetime *OrderDirection `json:"periodLastSuccessDatetime"`
	PeriodNextPayDatetime     *OrderDirection `json:"periodNextPayDatetime"`
	PeriodCreateDatetime      *OrderDirection `json:"periodCreateDatetime"`
	PeriodFirstDatetime       *OrderDirection `json:"periodFirstDatetime"`
	PeriodEndDatetime         *OrderDirection `json:"periodEndDatetime"`
	ChangePlanDatetime        *OrderDirection `json:"changePlanDatetime"`
	Note                      *OrderDirection `json:"note"`
	PromoteID                 *OrderDirection `json:"promoteId"`
	PostID                    *OrderDirection `json:"postId"`
	OneTimeStartDatetime      *OrderDirection `json:"oneTimeStartDatetime"`
	OneTimeEndDatetime        *OrderDirection `json:"oneTimeEndDatetime"`
	CreatedAt                 *OrderDirection `json:"createdAt"`
	UpdatedAt                 *OrderDirection `json:"updatedAt"`
}

type SubscriptionPrivateUpdateInput struct {
	Member                    *MemberRelateToOneInput              `json:"member"`
	PaymentMethod             *SubscriptionPaymentMethodType       `json:"paymentMethod"`
	NewebpayPayment           *NewebpayPaymentRelateToManyInput    `json:"newebpayPayment"`
	ApplepayPayment           *ApplepayPaymentRelateToManyInput    `json:"applepayPayment"`
	AndroidpayPayment         *AndroidpayPaymentRelateToManyInput  `json:"androidpayPayment"`
	Status                    *SubscriptionStatusType              `json:"status"`
	Amount                    *float64                             `json:"amount"`
	Currency                  *SubscriptionCurrencyType            `json:"currency"`
	Desc                      *string                              `json:"desc"`
	Comment                   *string                              `json:"comment"`
	Email                     *string                              `json:"email"`
	OrderNumber               *string                              `json:"orderNumber"`
	IsActive                  *bool                                `json:"isActive"`
	IsCanceled                *bool                                `json:"isCanceled"`
	Frequency                 *SubscriptionFrequencyType           `json:"frequency"`
	NextFrequency             *SubscriptionNextFrequencyType       `json:"nextFrequency"`
	PeriodFailureTimes        *int                                 `json:"periodFailureTimes"`
	PeriodLastSuccessDatetime *string                              `json:"periodLastSuccessDatetime"`
	PeriodNextPayDatetime     *string                              `json:"periodNextPayDatetime"`
	PeriodCreateDatetime      *string                              `json:"periodCreateDatetime"`
	PeriodFirstDatetime       *string                              `json:"periodFirstDatetime"`
	PeriodEndDatetime         *string                              `json:"periodEndDatetime"`
	ChangePlanDatetime        *string                              `json:"changePlanDatetime"`
	Note                      *string                              `json:"note"`
	PromoteID                 *int                                 `json:"promoteId"`
	PostID                    *string                              `json:"postId"`
	OneTimeStartDatetime      *string                              `json:"oneTimeStartDatetime"`
	OneTimeEndDatetime        *string                              `json:"oneTimeEndDatetime"`
	NewebpayPaymentInfo       *NewebpayPaymentInfoRelateToOneInput `json:"newebpayPaymentInfo"`
	CreatedAt                 *string                              `json:"createdAt"`
	UpdatedAt                 *string                              `json:"updatedAt"`
}

type SubscriptionRecurringCreateInfo struct {
	ReturnToPath string `json:"returnToPath"`
}

type SubscriptionRelateToManyInput struct {
	Create        []*SubscriptionCreateInput      `json:"create"`
	Connect       []*SubscriptionWhereUniqueInput `json:"connect"`
	Disconnect    []*SubscriptionWhereUniqueInput `json:"disconnect"`
	DisconnectAll *bool                           `json:"disconnectAll"`
}

type SubscriptionRelateToOneInput struct {
	Create        *SubscriptionCreateInput      `json:"create"`
	Connect       *SubscriptionWhereUniqueInput `json:"connect"`
	Disconnect    *SubscriptionWhereUniqueInput `json:"disconnect"`
	DisconnectAll *bool                         `json:"disconnectAll"`
}

type SubscriptionWhereInput struct {
	And                            []*SubscriptionWhereInput        `json:"AND"`
	Or                             []*SubscriptionWhereInput        `json:"OR"`
	ID                             *string                          `json:"id"`
	IDNot                          *string                          `json:"id_not"`
	IDLt                           *string                          `json:"id_lt"`
	IDLte                          *string                          `json:"id_lte"`
	IDGt                           *string                          `json:"id_gt"`
	IDGte                          *string                          `json:"id_gte"`
	IDIn                           []string                         `json:"id_in"`
	IDNotIn                        []string                         `json:"id_not_in"`
	Member                         *MemberWhereInput                `json:"member"`
	MemberIsNull                   *bool                            `json:"member_is_null"`
	PaymentMethod                  *SubscriptionPaymentMethodType   `json:"paymentMethod"`
	PaymentMethodNot               *SubscriptionPaymentMethodType   `json:"paymentMethod_not"`
	PaymentMethodIn                []*SubscriptionPaymentMethodType `json:"paymentMethod_in"`
	PaymentMethodNotIn             []*SubscriptionPaymentMethodType `json:"paymentMethod_not_in"`
	NewebpayPaymentEvery           *NewebpayPaymentWhereInput       `json:"newebpayPayment_every"`
	NewebpayPaymentSome            *NewebpayPaymentWhereInput       `json:"newebpayPayment_some"`
	NewebpayPaymentNone            *NewebpayPaymentWhereInput       `json:"newebpayPayment_none"`
	ApplepayPaymentEvery           *ApplepayPaymentWhereInput       `json:"applepayPayment_every"`
	ApplepayPaymentSome            *ApplepayPaymentWhereInput       `json:"applepayPayment_some"`
	ApplepayPaymentNone            *ApplepayPaymentWhereInput       `json:"applepayPayment_none"`
	AndroidpayPaymentEvery         *AndroidpayPaymentWhereInput     `json:"androidpayPayment_every"`
	AndroidpayPaymentSome          *AndroidpayPaymentWhereInput     `json:"androidpayPayment_some"`
	AndroidpayPaymentNone          *AndroidpayPaymentWhereInput     `json:"androidpayPayment_none"`
	Status                         *SubscriptionStatusType          `json:"status"`
	StatusNot                      *SubscriptionStatusType          `json:"status_not"`
	StatusIn                       []*SubscriptionStatusType        `json:"status_in"`
	StatusNotIn                    []*SubscriptionStatusType        `json:"status_not_in"`
	Amount                         *float64                         `json:"amount"`
	AmountNot                      *float64                         `json:"amount_not"`
	AmountLt                       *float64                         `json:"amount_lt"`
	AmountLte                      *float64                         `json:"amount_lte"`
	AmountGt                       *float64                         `json:"amount_gt"`
	AmountGte                      *float64                         `json:"amount_gte"`
	AmountIn                       []*float64                       `json:"amount_in"`
	AmountNotIn                    []*float64                       `json:"amount_not_in"`
	Currency                       *SubscriptionCurrencyType        `json:"currency"`
	CurrencyNot                    *SubscriptionCurrencyType        `json:"currency_not"`
	CurrencyIn                     []*SubscriptionCurrencyType      `json:"currency_in"`
	CurrencyNotIn                  []*SubscriptionCurrencyType      `json:"currency_not_in"`
	Desc                           *string                          `json:"desc"`
	DescNot                        *string                          `json:"desc_not"`
	DescContains                   *string                          `json:"desc_contains"`
	DescNotContains                *string                          `json:"desc_not_contains"`
	DescStartsWith                 *string                          `json:"desc_starts_with"`
	DescNotStartsWith              *string                          `json:"desc_not_starts_with"`
	DescEndsWith                   *string                          `json:"desc_ends_with"`
	DescNotEndsWith                *string                          `json:"desc_not_ends_with"`
	DescI                          *string                          `json:"desc_i"`
	DescNotI                       *string                          `json:"desc_not_i"`
	DescContainsI                  *string                          `json:"desc_contains_i"`
	DescNotContainsI               *string                          `json:"desc_not_contains_i"`
	DescStartsWithI                *string                          `json:"desc_starts_with_i"`
	DescNotStartsWithI             *string                          `json:"desc_not_starts_with_i"`
	DescEndsWithI                  *string                          `json:"desc_ends_with_i"`
	DescNotEndsWithI               *string                          `json:"desc_not_ends_with_i"`
	DescIn                         []*string                        `json:"desc_in"`
	DescNotIn                      []*string                        `json:"desc_not_in"`
	Comment                        *string                          `json:"comment"`
	CommentNot                     *string                          `json:"comment_not"`
	CommentContains                *string                          `json:"comment_contains"`
	CommentNotContains             *string                          `json:"comment_not_contains"`
	CommentStartsWith              *string                          `json:"comment_starts_with"`
	CommentNotStartsWith           *string                          `json:"comment_not_starts_with"`
	CommentEndsWith                *string                          `json:"comment_ends_with"`
	CommentNotEndsWith             *string                          `json:"comment_not_ends_with"`
	CommentI                       *string                          `json:"comment_i"`
	CommentNotI                    *string                          `json:"comment_not_i"`
	CommentContainsI               *string                          `json:"comment_contains_i"`
	CommentNotContainsI            *string                          `json:"comment_not_contains_i"`
	CommentStartsWithI             *string                          `json:"comment_starts_with_i"`
	CommentNotStartsWithI          *string                          `json:"comment_not_starts_with_i"`
	CommentEndsWithI               *string                          `json:"comment_ends_with_i"`
	CommentNotEndsWithI            *string                          `json:"comment_not_ends_with_i"`
	CommentIn                      []*string                        `json:"comment_in"`
	CommentNotIn                   []*string                        `json:"comment_not_in"`
	Email                          *string                          `json:"email"`
	EmailNot                       *string                          `json:"email_not"`
	EmailContains                  *string                          `json:"email_contains"`
	EmailNotContains               *string                          `json:"email_not_contains"`
	EmailStartsWith                *string                          `json:"email_starts_with"`
	EmailNotStartsWith             *string                          `json:"email_not_starts_with"`
	EmailEndsWith                  *string                          `json:"email_ends_with"`
	EmailNotEndsWith               *string                          `json:"email_not_ends_with"`
	EmailI                         *string                          `json:"email_i"`
	EmailNotI                      *string                          `json:"email_not_i"`
	EmailContainsI                 *string                          `json:"email_contains_i"`
	EmailNotContainsI              *string                          `json:"email_not_contains_i"`
	EmailStartsWithI               *string                          `json:"email_starts_with_i"`
	EmailNotStartsWithI            *string                          `json:"email_not_starts_with_i"`
	EmailEndsWithI                 *string                          `json:"email_ends_with_i"`
	EmailNotEndsWithI              *string                          `json:"email_not_ends_with_i"`
	EmailIn                        []*string                        `json:"email_in"`
	EmailNotIn                     []*string                        `json:"email_not_in"`
	OrderNumber                    *string                          `json:"orderNumber"`
	OrderNumberNot                 *string                          `json:"orderNumber_not"`
	OrderNumberContains            *string                          `json:"orderNumber_contains"`
	OrderNumberNotContains         *string                          `json:"orderNumber_not_contains"`
	OrderNumberStartsWith          *string                          `json:"orderNumber_starts_with"`
	OrderNumberNotStartsWith       *string                          `json:"orderNumber_not_starts_with"`
	OrderNumberEndsWith            *string                          `json:"orderNumber_ends_with"`
	OrderNumberNotEndsWith         *string                          `json:"orderNumber_not_ends_with"`
	OrderNumberI                   *string                          `json:"orderNumber_i"`
	OrderNumberNotI                *string                          `json:"orderNumber_not_i"`
	OrderNumberContainsI           *string                          `json:"orderNumber_contains_i"`
	OrderNumberNotContainsI        *string                          `json:"orderNumber_not_contains_i"`
	OrderNumberStartsWithI         *string                          `json:"orderNumber_starts_with_i"`
	OrderNumberNotStartsWithI      *string                          `json:"orderNumber_not_starts_with_i"`
	OrderNumberEndsWithI           *string                          `json:"orderNumber_ends_with_i"`
	OrderNumberNotEndsWithI        *string                          `json:"orderNumber_not_ends_with_i"`
	OrderNumberIn                  []*string                        `json:"orderNumber_in"`
	OrderNumberNotIn               []*string                        `json:"orderNumber_not_in"`
	IsActive                       *bool                            `json:"isActive"`
	IsActiveNot                    *bool                            `json:"isActive_not"`
	IsCanceled                     *bool                            `json:"isCanceled"`
	IsCanceledNot                  *bool                            `json:"isCanceled_not"`
	Frequency                      *SubscriptionFrequencyType       `json:"frequency"`
	FrequencyNot                   *SubscriptionFrequencyType       `json:"frequency_not"`
	FrequencyIn                    []*SubscriptionFrequencyType     `json:"frequency_in"`
	FrequencyNotIn                 []*SubscriptionFrequencyType     `json:"frequency_not_in"`
	NextFrequency                  *SubscriptionNextFrequencyType   `json:"nextFrequency"`
	NextFrequencyNot               *SubscriptionNextFrequencyType   `json:"nextFrequency_not"`
	NextFrequencyIn                []*SubscriptionNextFrequencyType `json:"nextFrequency_in"`
	NextFrequencyNotIn             []*SubscriptionNextFrequencyType `json:"nextFrequency_not_in"`
	PeriodFailureTimes             *int                             `json:"periodFailureTimes"`
	PeriodFailureTimesNot          *int                             `json:"periodFailureTimes_not"`
	PeriodFailureTimesLt           *int                             `json:"periodFailureTimes_lt"`
	PeriodFailureTimesLte          *int                             `json:"periodFailureTimes_lte"`
	PeriodFailureTimesGt           *int                             `json:"periodFailureTimes_gt"`
	PeriodFailureTimesGte          *int                             `json:"periodFailureTimes_gte"`
	PeriodFailureTimesIn           []*int                           `json:"periodFailureTimes_in"`
	PeriodFailureTimesNotIn        []*int                           `json:"periodFailureTimes_not_in"`
	PeriodLastSuccessDatetime      *string                          `json:"periodLastSuccessDatetime"`
	PeriodLastSuccessDatetimeNot   *string                          `json:"periodLastSuccessDatetime_not"`
	PeriodLastSuccessDatetimeLt    *string                          `json:"periodLastSuccessDatetime_lt"`
	PeriodLastSuccessDatetimeLte   *string                          `json:"periodLastSuccessDatetime_lte"`
	PeriodLastSuccessDatetimeGt    *string                          `json:"periodLastSuccessDatetime_gt"`
	PeriodLastSuccessDatetimeGte   *string                          `json:"periodLastSuccessDatetime_gte"`
	PeriodLastSuccessDatetimeIn    []*string                        `json:"periodLastSuccessDatetime_in"`
	PeriodLastSuccessDatetimeNotIn []*string                        `json:"periodLastSuccessDatetime_not_in"`
	PeriodNextPayDatetime          *string                          `json:"periodNextPayDatetime"`
	PeriodNextPayDatetimeNot       *string                          `json:"periodNextPayDatetime_not"`
	PeriodNextPayDatetimeLt        *string                          `json:"periodNextPayDatetime_lt"`
	PeriodNextPayDatetimeLte       *string                          `json:"periodNextPayDatetime_lte"`
	PeriodNextPayDatetimeGt        *string                          `json:"periodNextPayDatetime_gt"`
	PeriodNextPayDatetimeGte       *string                          `json:"periodNextPayDatetime_gte"`
	PeriodNextPayDatetimeIn        []*string                        `json:"periodNextPayDatetime_in"`
	PeriodNextPayDatetimeNotIn     []*string                        `json:"periodNextPayDatetime_not_in"`
	PeriodCreateDatetime           *string                          `json:"periodCreateDatetime"`
	PeriodCreateDatetimeNot        *string                          `json:"periodCreateDatetime_not"`
	PeriodCreateDatetimeLt         *string                          `json:"periodCreateDatetime_lt"`
	PeriodCreateDatetimeLte        *string                          `json:"periodCreateDatetime_lte"`
	PeriodCreateDatetimeGt         *string                          `json:"periodCreateDatetime_gt"`
	PeriodCreateDatetimeGte        *string                          `json:"periodCreateDatetime_gte"`
	PeriodCreateDatetimeIn         []*string                        `json:"periodCreateDatetime_in"`
	PeriodCreateDatetimeNotIn      []*string                        `json:"periodCreateDatetime_not_in"`
	PeriodFirstDatetime            *int                             `json:"periodFirstDatetime"`
	PeriodFirstDatetimeNot         *int                             `json:"periodFirstDatetime_not"`
	PeriodFirstDatetimeLt          *int                             `json:"periodFirstDatetime_lt"`
	PeriodFirstDatetimeLte         *int                             `json:"periodFirstDatetime_lte"`
	PeriodFirstDatetimeGt          *int                             `json:"periodFirstDatetime_gt"`
	PeriodFirstDatetimeGte         *int                             `json:"periodFirstDatetime_gte"`
	PeriodFirstDatetimeIn          []*int                           `json:"periodFirstDatetime_in"`
	PeriodFirstDatetimeNotIn       []*int                           `json:"periodFirstDatetime_not_in"`
	PeriodEndDatetime              *int                             `json:"periodEndDatetime"`
	PeriodEndDatetimeNot           *int                             `json:"periodEndDatetime_not"`
	PeriodEndDatetimeLt            *int                             `json:"periodEndDatetime_lt"`
	PeriodEndDatetimeLte           *int                             `json:"periodEndDatetime_lte"`
	PeriodEndDatetimeGt            *int                             `json:"periodEndDatetime_gt"`
	PeriodEndDatetimeGte           *int                             `json:"periodEndDatetime_gte"`
	PeriodEndDatetimeIn            []*int                           `json:"periodEndDatetime_in"`
	PeriodEndDatetimeNotIn         []*int                           `json:"periodEndDatetime_not_in"`
	ChangePlanDatetime             *string                          `json:"changePlanDatetime"`
	ChangePlanDatetimeNot          *string                          `json:"changePlanDatetime_not"`
	ChangePlanDatetimeLt           *string                          `json:"changePlanDatetime_lt"`
	ChangePlanDatetimeLte          *string                          `json:"changePlanDatetime_lte"`
	ChangePlanDatetimeGt           *string                          `json:"changePlanDatetime_gt"`
	ChangePlanDatetimeGte          *string                          `json:"changePlanDatetime_gte"`
	ChangePlanDatetimeIn           []*string                        `json:"changePlanDatetime_in"`
	ChangePlanDatetimeNotIn        []*string                        `json:"changePlanDatetime_not_in"`
	Note                           *string                          `json:"note"`
	NoteNot                        *string                          `json:"note_not"`
	NoteContains                   *string                          `json:"note_contains"`
	NoteNotContains                *string                          `json:"note_not_contains"`
	NoteStartsWith                 *string                          `json:"note_starts_with"`
	NoteNotStartsWith              *string                          `json:"note_not_starts_with"`
	NoteEndsWith                   *string                          `json:"note_ends_with"`
	NoteNotEndsWith                *string                          `json:"note_not_ends_with"`
	NoteI                          *string                          `json:"note_i"`
	NoteNotI                       *string                          `json:"note_not_i"`
	NoteContainsI                  *string                          `json:"note_contains_i"`
	NoteNotContainsI               *string                          `json:"note_not_contains_i"`
	NoteStartsWithI                *string                          `json:"note_starts_with_i"`
	NoteNotStartsWithI             *string                          `json:"note_not_starts_with_i"`
	NoteEndsWithI                  *string                          `json:"note_ends_with_i"`
	NoteNotEndsWithI               *string                          `json:"note_not_ends_with_i"`
	NoteIn                         []*string                        `json:"note_in"`
	NoteNotIn                      []*string                        `json:"note_not_in"`
	PromoteID                      *int                             `json:"promoteId"`
	PromoteIDNot                   *int                             `json:"promoteId_not"`
	PromoteIDLt                    *int                             `json:"promoteId_lt"`
	PromoteIDLte                   *int                             `json:"promoteId_lte"`
	PromoteIDGt                    *int                             `json:"promoteId_gt"`
	PromoteIDGte                   *int                             `json:"promoteId_gte"`
	PromoteIDIn                    []*int                           `json:"promoteId_in"`
	PromoteIDNotIn                 []*int                           `json:"promoteId_not_in"`
	PostID                         *string                          `json:"postId"`
	PostIDNot                      *string                          `json:"postId_not"`
	PostIDContains                 *string                          `json:"postId_contains"`
	PostIDNotContains              *string                          `json:"postId_not_contains"`
	PostIDStartsWith               *string                          `json:"postId_starts_with"`
	PostIDNotStartsWith            *string                          `json:"postId_not_starts_with"`
	PostIDEndsWith                 *string                          `json:"postId_ends_with"`
	PostIDNotEndsWith              *string                          `json:"postId_not_ends_with"`
	PostIDI                        *string                          `json:"postId_i"`
	PostIDNotI                     *string                          `json:"postId_not_i"`
	PostIDContainsI                *string                          `json:"postId_contains_i"`
	PostIDNotContainsI             *string                          `json:"postId_not_contains_i"`
	PostIDStartsWithI              *string                          `json:"postId_starts_with_i"`
	PostIDNotStartsWithI           *string                          `json:"postId_not_starts_with_i"`
	PostIDEndsWithI                *string                          `json:"postId_ends_with_i"`
	PostIDNotEndsWithI             *string                          `json:"postId_not_ends_with_i"`
	PostIDIn                       []*string                        `json:"postId_in"`
	PostIDNotIn                    []*string                        `json:"postId_not_in"`
	OneTimeStartDatetime           *int                             `json:"oneTimeStartDatetime"`
	OneTimeStartDatetimeNot        *int                             `json:"oneTimeStartDatetime_not"`
	OneTimeStartDatetimeLt         *int                             `json:"oneTimeStartDatetime_lt"`
	OneTimeStartDatetimeLte        *int                             `json:"oneTimeStartDatetime_lte"`
	OneTimeStartDatetimeGt         *int                             `json:"oneTimeStartDatetime_gt"`
	OneTimeStartDatetimeGte        *int                             `json:"oneTimeStartDatetime_gte"`
	OneTimeStartDatetimeIn         []*int                           `json:"oneTimeStartDatetime_in"`
	OneTimeStartDatetimeNotIn      []*int                           `json:"oneTimeStartDatetime_not_in"`
	OneTimeEndDatetime             *int                             `json:"oneTimeEndDatetime"`
	OneTimeEndDatetimeNot          *int                             `json:"oneTimeEndDatetime_not"`
	OneTimeEndDatetimeLt           *int                             `json:"oneTimeEndDatetime_lt"`
	OneTimeEndDatetimeLte          *int                             `json:"oneTimeEndDatetime_lte"`
	OneTimeEndDatetimeGt           *int                             `json:"oneTimeEndDatetime_gt"`
	OneTimeEndDatetimeGte          *int                             `json:"oneTimeEndDatetime_gte"`
	OneTimeEndDatetimeIn           []*int                           `json:"oneTimeEndDatetime_in"`
	OneTimeEndDatetimeNotIn        []*int                           `json:"oneTimeEndDatetime_not_in"`
	NewebpayPaymentInfo            *NewebpayPaymentInfoWhereInput   `json:"newebpayPaymentInfo"`
	NewebpayPaymentInfoIsNull      *bool                            `json:"newebpayPaymentInfo_is_null"`
	CreatedAt                      *string                          `json:"createdAt"`
	CreatedAtNot                   *string                          `json:"createdAt_not"`
	CreatedAtLt                    *string                          `json:"createdAt_lt"`
	CreatedAtLte                   *string                          `json:"createdAt_lte"`
	CreatedAtGt                    *string                          `json:"createdAt_gt"`
	CreatedAtGte                   *string                          `json:"createdAt_gte"`
	CreatedAtIn                    []*string                        `json:"createdAt_in"`
	CreatedAtNotIn                 []*string                        `json:"createdAt_not_in"`
	UpdatedAt                      *string                          `json:"updatedAt"`
	UpdatedAtNot                   *string                          `json:"updatedAt_not"`
	UpdatedAtLt                    *string                          `json:"updatedAt_lt"`
	UpdatedAtLte                   *string                          `json:"updatedAt_lte"`
	UpdatedAtGt                    *string                          `json:"updatedAt_gt"`
	UpdatedAtGte                   *string                          `json:"updatedAt_gte"`
	UpdatedAtIn                    []*string                        `json:"updatedAt_in"`
	UpdatedAtNotIn                 []*string                        `json:"updatedAt_not_in"`
	CreatedByIsNull                *bool                            `json:"createdBy_is_null"`
	UpdatedByIsNull                *bool                            `json:"updatedBy_is_null"`
}

type SubscriptionWhereUniqueInput struct {
	ID          *string `json:"id"`
	OrderNumber *string `json:"orderNumber"`
}

// Modified From Private Schema
type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "asc"
	OrderDirectionDesc OrderDirection = "desc"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortAndroidpayPaymentsBy string

const (
	SortAndroidpayPaymentsByIDAsc         SortAndroidpayPaymentsBy = "id_ASC"
	SortAndroidpayPaymentsByIDDesc        SortAndroidpayPaymentsBy = "id_DESC"
	SortAndroidpayPaymentsByCreatedAtAsc  SortAndroidpayPaymentsBy = "createdAt_ASC"
	SortAndroidpayPaymentsByCreatedAtDesc SortAndroidpayPaymentsBy = "createdAt_DESC"
	SortAndroidpayPaymentsByUpdatedAtAsc  SortAndroidpayPaymentsBy = "updatedAt_ASC"
	SortAndroidpayPaymentsByUpdatedAtDesc SortAndroidpayPaymentsBy = "updatedAt_DESC"
)

var AllSortAndroidpayPaymentsBy = []SortAndroidpayPaymentsBy{
	SortAndroidpayPaymentsByIDAsc,
	SortAndroidpayPaymentsByIDDesc,
	SortAndroidpayPaymentsByCreatedAtAsc,
	SortAndroidpayPaymentsByCreatedAtDesc,
	SortAndroidpayPaymentsByUpdatedAtAsc,
	SortAndroidpayPaymentsByUpdatedAtDesc,
}

func (e SortAndroidpayPaymentsBy) IsValid() bool {
	switch e {
	case SortAndroidpayPaymentsByIDAsc, SortAndroidpayPaymentsByIDDesc, SortAndroidpayPaymentsByCreatedAtAsc, SortAndroidpayPaymentsByCreatedAtDesc, SortAndroidpayPaymentsByUpdatedAtAsc, SortAndroidpayPaymentsByUpdatedAtDesc:
		return true
	}
	return false
}

func (e SortAndroidpayPaymentsBy) String() string {
	return string(e)
}

func (e *SortAndroidpayPaymentsBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortAndroidpayPaymentsBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortAndroidpayPaymentsBy", str)
	}
	return nil
}

func (e SortAndroidpayPaymentsBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortApplepayPaymentsBy string

const (
	SortApplepayPaymentsByIDAsc         SortApplepayPaymentsBy = "id_ASC"
	SortApplepayPaymentsByIDDesc        SortApplepayPaymentsBy = "id_DESC"
	SortApplepayPaymentsByCreatedAtAsc  SortApplepayPaymentsBy = "createdAt_ASC"
	SortApplepayPaymentsByCreatedAtDesc SortApplepayPaymentsBy = "createdAt_DESC"
	SortApplepayPaymentsByUpdatedAtAsc  SortApplepayPaymentsBy = "updatedAt_ASC"
	SortApplepayPaymentsByUpdatedAtDesc SortApplepayPaymentsBy = "updatedAt_DESC"
)

var AllSortApplepayPaymentsBy = []SortApplepayPaymentsBy{
	SortApplepayPaymentsByIDAsc,
	SortApplepayPaymentsByIDDesc,
	SortApplepayPaymentsByCreatedAtAsc,
	SortApplepayPaymentsByCreatedAtDesc,
	SortApplepayPaymentsByUpdatedAtAsc,
	SortApplepayPaymentsByUpdatedAtDesc,
}

func (e SortApplepayPaymentsBy) IsValid() bool {
	switch e {
	case SortApplepayPaymentsByIDAsc, SortApplepayPaymentsByIDDesc, SortApplepayPaymentsByCreatedAtAsc, SortApplepayPaymentsByCreatedAtDesc, SortApplepayPaymentsByUpdatedAtAsc, SortApplepayPaymentsByUpdatedAtDesc:
		return true
	}
	return false
}

func (e SortApplepayPaymentsBy) String() string {
	return string(e)
}

func (e *SortApplepayPaymentsBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortApplepayPaymentsBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortApplepayPaymentsBy", str)
	}
	return nil
}

func (e SortApplepayPaymentsBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortInvoicesBy string

const (
	SortInvoicesByIDAsc           SortInvoicesBy = "id_ASC"
	SortInvoicesByIDDesc          SortInvoicesBy = "id_DESC"
	SortInvoicesByAmountAsc       SortInvoicesBy = "amount_ASC"
	SortInvoicesByAmountDesc      SortInvoicesBy = "amount_DESC"
	SortInvoicesByEmailAsc        SortInvoicesBy = "email_ASC"
	SortInvoicesByEmailDesc       SortInvoicesBy = "email_DESC"
	SortInvoicesByDescAsc         SortInvoicesBy = "desc_ASC"
	SortInvoicesByDescDesc        SortInvoicesBy = "desc_DESC"
	SortInvoicesByInvoiceNoAsc    SortInvoicesBy = "invoiceNo_ASC"
	SortInvoicesByInvoiceNoDesc   SortInvoicesBy = "invoiceNo_DESC"
	SortInvoicesByCategoryAsc     SortInvoicesBy = "category_ASC"
	SortInvoicesByCategoryDesc    SortInvoicesBy = "category_DESC"
	SortInvoicesByBuyerNameAsc    SortInvoicesBy = "buyerName_ASC"
	SortInvoicesByBuyerNameDesc   SortInvoicesBy = "buyerName_DESC"
	SortInvoicesByBuyerUbnAsc     SortInvoicesBy = "buyerUBN_ASC"
	SortInvoicesByBuyerUbnDesc    SortInvoicesBy = "buyerUBN_DESC"
	SortInvoicesByCarrierTypeAsc  SortInvoicesBy = "carrierType_ASC"
	SortInvoicesByCarrierTypeDesc SortInvoicesBy = "carrierType_DESC"
	SortInvoicesByCarrierNumAsc   SortInvoicesBy = "carrierNum_ASC"
	SortInvoicesByCarrierNumDesc  SortInvoicesBy = "carrierNum_DESC"
	SortInvoicesByLoveCodeAsc     SortInvoicesBy = "loveCode_ASC"
	SortInvoicesByLoveCodeDesc    SortInvoicesBy = "loveCode_DESC"
	SortInvoicesByStatusAsc       SortInvoicesBy = "status_ASC"
	SortInvoicesByStatusDesc      SortInvoicesBy = "status_DESC"
	SortInvoicesByCreatedAtAsc    SortInvoicesBy = "createdAt_ASC"
	SortInvoicesByCreatedAtDesc   SortInvoicesBy = "createdAt_DESC"
	SortInvoicesByUpdatedAtAsc    SortInvoicesBy = "updatedAt_ASC"
	SortInvoicesByUpdatedAtDesc   SortInvoicesBy = "updatedAt_DESC"
)

var AllSortInvoicesBy = []SortInvoicesBy{
	SortInvoicesByIDAsc,
	SortInvoicesByIDDesc,
	SortInvoicesByAmountAsc,
	SortInvoicesByAmountDesc,
	SortInvoicesByEmailAsc,
	SortInvoicesByEmailDesc,
	SortInvoicesByDescAsc,
	SortInvoicesByDescDesc,
	SortInvoicesByInvoiceNoAsc,
	SortInvoicesByInvoiceNoDesc,
	SortInvoicesByCategoryAsc,
	SortInvoicesByCategoryDesc,
	SortInvoicesByBuyerNameAsc,
	SortInvoicesByBuyerNameDesc,
	SortInvoicesByBuyerUbnAsc,
	SortInvoicesByBuyerUbnDesc,
	SortInvoicesByCarrierTypeAsc,
	SortInvoicesByCarrierTypeDesc,
	SortInvoicesByCarrierNumAsc,
	SortInvoicesByCarrierNumDesc,
	SortInvoicesByLoveCodeAsc,
	SortInvoicesByLoveCodeDesc,
	SortInvoicesByStatusAsc,
	SortInvoicesByStatusDesc,
	SortInvoicesByCreatedAtAsc,
	SortInvoicesByCreatedAtDesc,
	SortInvoicesByUpdatedAtAsc,
	SortInvoicesByUpdatedAtDesc,
}

func (e SortInvoicesBy) IsValid() bool {
	switch e {
	case SortInvoicesByIDAsc, SortInvoicesByIDDesc, SortInvoicesByAmountAsc, SortInvoicesByAmountDesc, SortInvoicesByEmailAsc, SortInvoicesByEmailDesc, SortInvoicesByDescAsc, SortInvoicesByDescDesc, SortInvoicesByInvoiceNoAsc, SortInvoicesByInvoiceNoDesc, SortInvoicesByCategoryAsc, SortInvoicesByCategoryDesc, SortInvoicesByBuyerNameAsc, SortInvoicesByBuyerNameDesc, SortInvoicesByBuyerUbnAsc, SortInvoicesByBuyerUbnDesc, SortInvoicesByCarrierTypeAsc, SortInvoicesByCarrierTypeDesc, SortInvoicesByCarrierNumAsc, SortInvoicesByCarrierNumDesc, SortInvoicesByLoveCodeAsc, SortInvoicesByLoveCodeDesc, SortInvoicesByStatusAsc, SortInvoicesByStatusDesc, SortInvoicesByCreatedAtAsc, SortInvoicesByCreatedAtDesc, SortInvoicesByUpdatedAtAsc, SortInvoicesByUpdatedAtDesc:
		return true
	}
	return false
}

func (e SortInvoicesBy) String() string {
	return string(e)
}

func (e *SortInvoicesBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortInvoicesBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortInvoicesBy", str)
	}
	return nil
}

func (e SortInvoicesBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortMarketingMembershipsBy string

const (
	SortMarketingMembershipsByIDAsc              SortMarketingMembershipsBy = "id_ASC"
	SortMarketingMembershipsByIDDesc             SortMarketingMembershipsBy = "id_DESC"
	SortMarketingMembershipsByStatusAsc          SortMarketingMembershipsBy = "status_ASC"
	SortMarketingMembershipsByStatusDesc         SortMarketingMembershipsBy = "status_DESC"
	SortMarketingMembershipsByStartDateAsc       SortMarketingMembershipsBy = "startDate_ASC"
	SortMarketingMembershipsByStartDateDesc      SortMarketingMembershipsBy = "startDate_DESC"
	SortMarketingMembershipsByEndDateAsc         SortMarketingMembershipsBy = "endDate_ASC"
	SortMarketingMembershipsByEndDateDesc        SortMarketingMembershipsBy = "endDate_DESC"
	SortMarketingMembershipsByRequesterEmailAsc  SortMarketingMembershipsBy = "requesterEmail_ASC"
	SortMarketingMembershipsByRequesterEmailDesc SortMarketingMembershipsBy = "requesterEmail_DESC"
	SortMarketingMembershipsByApprovedByAsc      SortMarketingMembershipsBy = "approvedBy_ASC"
	SortMarketingMembershipsByApprovedByDesc     SortMarketingMembershipsBy = "approvedBy_DESC"
	SortMarketingMembershipsByCreatedAtAsc       SortMarketingMembershipsBy = "createdAt_ASC"
	SortMarketingMembershipsByCreatedAtDesc      SortMarketingMembershipsBy = "createdAt_DESC"
	SortMarketingMembershipsByUpdatedAtAsc       SortMarketingMembershipsBy = "updatedAt_ASC"
	SortMarketingMembershipsByUpdatedAtDesc      SortMarketingMembershipsBy = "updatedAt_DESC"
)

var AllSortMarketingMembershipsBy = []SortMarketingMembershipsBy{
	SortMarketingMembershipsByIDAsc,
	SortMarketingMembershipsByIDDesc,
	SortMarketingMembershipsByStatusAsc,
	SortMarketingMembershipsByStatusDesc,
	SortMarketingMembershipsByStartDateAsc,
	SortMarketingMembershipsByStartDateDesc,
	SortMarketingMembershipsByEndDateAsc,
	SortMarketingMembershipsByEndDateDesc,
	SortMarketingMembershipsByRequesterEmailAsc,
	SortMarketingMembershipsByRequesterEmailDesc,
	SortMarketingMembershipsByApprovedByAsc,
	SortMarketingMembershipsByApprovedByDesc,
	SortMarketingMembershipsByCreatedAtAsc,
	SortMarketingMembershipsByCreatedAtDesc,
	SortMarketingMembershipsByUpdatedAtAsc,
	SortMarketingMembershipsByUpdatedAtDesc,
}

func (e SortMarketingMembershipsBy) IsValid() bool {
	switch e {
	case SortMarketingMembershipsByIDAsc, SortMarketingMembershipsByIDDesc, SortMarketingMembershipsByStatusAsc, SortMarketingMembershipsByStatusDesc, SortMarketingMembershipsByStartDateAsc, SortMarketingMembershipsByStartDateDesc, SortMarketingMembershipsByEndDateAsc, SortMarketingMembershipsByEndDateDesc, SortMarketingMembershipsByRequesterEmailAsc, SortMarketingMembershipsByRequesterEmailDesc, SortMarketingMembershipsByApprovedByAsc, SortMarketingMembershipsByApprovedByDesc, SortMarketingMembershipsByCreatedAtAsc, SortMarketingMembershipsByCreatedAtDesc, SortMarketingMembershipsByUpdatedAtAsc, SortMarketingMembershipsByUpdatedAtDesc:
		return true
	}
	return false
}

func (e SortMarketingMembershipsBy) String() string {
	return string(e)
}

func (e *SortMarketingMembershipsBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortMarketingMembershipsBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortMarketingMembershipsBy", str)
	}
	return nil
}

func (e SortMarketingMembershipsBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortMembersBy string

const (
	SortMembersByIDAsc            SortMembersBy = "id_ASC"
	SortMembersByIDDesc           SortMembersBy = "id_DESC"
	SortMembersByFirebaseIDAsc    SortMembersBy = "firebaseId_ASC"
	SortMembersByFirebaseIDDesc   SortMembersBy = "firebaseId_DESC"
	SortMembersByEmailAsc         SortMembersBy = "email_ASC"
	SortMembersByEmailDesc        SortMembersBy = "email_DESC"
	SortMembersByTypeAsc          SortMembersBy = "type_ASC"
	SortMembersByTypeDesc         SortMembersBy = "type_DESC"
	SortMembersByStateAsc         SortMembersBy = "state_ASC"
	SortMembersByStateDesc        SortMembersBy = "state_DESC"
	SortMembersByTosAsc           SortMembersBy = "tos_ASC"
	SortMembersByTosDesc          SortMembersBy = "tos_DESC"
	SortMembersByDateJoinedAsc    SortMembersBy = "dateJoined_ASC"
	SortMembersByDateJoinedDesc   SortMembersBy = "dateJoined_DESC"
	SortMembersByFirstNameAsc     SortMembersBy = "firstName_ASC"
	SortMembersByFirstNameDesc    SortMembersBy = "firstName_DESC"
	SortMembersByLastNameAsc      SortMembersBy = "lastName_ASC"
	SortMembersByLastNameDesc     SortMembersBy = "lastName_DESC"
	SortMembersByNameAsc          SortMembersBy = "name_ASC"
	SortMembersByNameDesc         SortMembersBy = "name_DESC"
	SortMembersByGenderAsc        SortMembersBy = "gender_ASC"
	SortMembersByGenderDesc       SortMembersBy = "gender_DESC"
	SortMembersByPhoneAsc         SortMembersBy = "phone_ASC"
	SortMembersByPhoneDesc        SortMembersBy = "phone_DESC"
	SortMembersByBirthdayAsc      SortMembersBy = "birthday_ASC"
	SortMembersByBirthdayDesc     SortMembersBy = "birthday_DESC"
	SortMembersByAddressAsc       SortMembersBy = "address_ASC"
	SortMembersByAddressDesc      SortMembersBy = "address_DESC"
	SortMembersByNicknameAsc      SortMembersBy = "nickname_ASC"
	SortMembersByNicknameDesc     SortMembersBy = "nickname_DESC"
	SortMembersByProfileImageAsc  SortMembersBy = "profileImage_ASC"
	SortMembersByProfileImageDesc SortMembersBy = "profileImage_DESC"
	SortMembersByCityAsc          SortMembersBy = "city_ASC"
	SortMembersByCityDesc         SortMembersBy = "city_DESC"
	SortMembersByCountryAsc       SortMembersBy = "country_ASC"
	SortMembersByCountryDesc      SortMembersBy = "country_DESC"
	SortMembersByDistrictAsc      SortMembersBy = "district_ASC"
	SortMembersByDistrictDesc     SortMembersBy = "district_DESC"
	SortMembersByCreatedAtAsc     SortMembersBy = "createdAt_ASC"
	SortMembersByCreatedAtDesc    SortMembersBy = "createdAt_DESC"
	SortMembersByUpdatedAtAsc     SortMembersBy = "updatedAt_ASC"
	SortMembersByUpdatedAtDesc    SortMembersBy = "updatedAt_DESC"
)

var AllSortMembersBy = []SortMembersBy{
	SortMembersByIDAsc,
	SortMembersByIDDesc,
	SortMembersByFirebaseIDAsc,
	SortMembersByFirebaseIDDesc,
	SortMembersByEmailAsc,
	SortMembersByEmailDesc,
	SortMembersByTypeAsc,
	SortMembersByTypeDesc,
	SortMembersByStateAsc,
	SortMembersByStateDesc,
	SortMembersByTosAsc,
	SortMembersByTosDesc,
	SortMembersByDateJoinedAsc,
	SortMembersByDateJoinedDesc,
	SortMembersByFirstNameAsc,
	SortMembersByFirstNameDesc,
	SortMembersByLastNameAsc,
	SortMembersByLastNameDesc,
	SortMembersByNameAsc,
	SortMembersByNameDesc,
	SortMembersByGenderAsc,
	SortMembersByGenderDesc,
	SortMembersByPhoneAsc,
	SortMembersByPhoneDesc,
	SortMembersByBirthdayAsc,
	SortMembersByBirthdayDesc,
	SortMembersByAddressAsc,
	SortMembersByAddressDesc,
	SortMembersByNicknameAsc,
	SortMembersByNicknameDesc,
	SortMembersByProfileImageAsc,
	SortMembersByProfileImageDesc,
	SortMembersByCityAsc,
	SortMembersByCityDesc,
	SortMembersByCountryAsc,
	SortMembersByCountryDesc,
	SortMembersByDistrictAsc,
	SortMembersByDistrictDesc,
	SortMembersByCreatedAtAsc,
	SortMembersByCreatedAtDesc,
	SortMembersByUpdatedAtAsc,
	SortMembersByUpdatedAtDesc,
}

func (e SortMembersBy) IsValid() bool {
	switch e {
	case SortMembersByIDAsc, SortMembersByIDDesc, SortMembersByFirebaseIDAsc, SortMembersByFirebaseIDDesc, SortMembersByEmailAsc, SortMembersByEmailDesc, SortMembersByTypeAsc, SortMembersByTypeDesc, SortMembersByStateAsc, SortMembersByStateDesc, SortMembersByTosAsc, SortMembersByTosDesc, SortMembersByDateJoinedAsc, SortMembersByDateJoinedDesc, SortMembersByFirstNameAsc, SortMembersByFirstNameDesc, SortMembersByLastNameAsc, SortMembersByLastNameDesc, SortMembersByNameAsc, SortMembersByNameDesc, SortMembersByGenderAsc, SortMembersByGenderDesc, SortMembersByPhoneAsc, SortMembersByPhoneDesc, SortMembersByBirthdayAsc, SortMembersByBirthdayDesc, SortMembersByAddressAsc, SortMembersByAddressDesc, SortMembersByNicknameAsc, SortMembersByNicknameDesc, SortMembersByProfileImageAsc, SortMembersByProfileImageDesc, SortMembersByCityAsc, SortMembersByCityDesc, SortMembersByCountryAsc, SortMembersByCountryDesc, SortMembersByDistrictAsc, SortMembersByDistrictDesc, SortMembersByCreatedAtAsc, SortMembersByCreatedAtDesc, SortMembersByUpdatedAtAsc, SortMembersByUpdatedAtDesc:
		return true
	}
	return false
}

func (e SortMembersBy) String() string {
	return string(e)
}

func (e *SortMembersBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortMembersBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortMembersBy", str)
	}
	return nil
}

func (e SortMembersBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortMerchandisesBy string

const (
	SortMerchandisesByIDAsc         SortMerchandisesBy = "id_ASC"
	SortMerchandisesByIDDesc        SortMerchandisesBy = "id_DESC"
	SortMerchandisesByNameAsc       SortMerchandisesBy = "name_ASC"
	SortMerchandisesByNameDesc      SortMerchandisesBy = "name_DESC"
	SortMerchandisesByCodeAsc       SortMerchandisesBy = "code_ASC"
	SortMerchandisesByCodeDesc      SortMerchandisesBy = "code_DESC"
	SortMerchandisesByPriceAsc      SortMerchandisesBy = "price_ASC"
	SortMerchandisesByPriceDesc     SortMerchandisesBy = "price_DESC"
	SortMerchandisesByCurrencyAsc   SortMerchandisesBy = "currency_ASC"
	SortMerchandisesByCurrencyDesc  SortMerchandisesBy = "currency_DESC"
	SortMerchandisesByStateAsc      SortMerchandisesBy = "state_ASC"
	SortMerchandisesByStateDesc     SortMerchandisesBy = "state_DESC"
	SortMerchandisesByDescAsc       SortMerchandisesBy = "desc_ASC"
	SortMerchandisesByDescDesc      SortMerchandisesBy = "desc_DESC"
	SortMerchandisesByCommentAsc    SortMerchandisesBy = "comment_ASC"
	SortMerchandisesByCommentDesc   SortMerchandisesBy = "comment_DESC"
	SortMerchandisesByCreatedAtAsc  SortMerchandisesBy = "createdAt_ASC"
	SortMerchandisesByCreatedAtDesc SortMerchandisesBy = "createdAt_DESC"
	SortMerchandisesByUpdatedAtAsc  SortMerchandisesBy = "updatedAt_ASC"
	SortMerchandisesByUpdatedAtDesc SortMerchandisesBy = "updatedAt_DESC"
)

var AllSortMerchandisesBy = []SortMerchandisesBy{
	SortMerchandisesByIDAsc,
	SortMerchandisesByIDDesc,
	SortMerchandisesByNameAsc,
	SortMerchandisesByNameDesc,
	SortMerchandisesByCodeAsc,
	SortMerchandisesByCodeDesc,
	SortMerchandisesByPriceAsc,
	SortMerchandisesByPriceDesc,
	SortMerchandisesByCurrencyAsc,
	SortMerchandisesByCurrencyDesc,
	SortMerchandisesByStateAsc,
	SortMerchandisesByStateDesc,
	SortMerchandisesByDescAsc,
	SortMerchandisesByDescDesc,
	SortMerchandisesByCommentAsc,
	SortMerchandisesByCommentDesc,
	SortMerchandisesByCreatedAtAsc,
	SortMerchandisesByCreatedAtDesc,
	SortMerchandisesByUpdatedAtAsc,
	SortMerchandisesByUpdatedAtDesc,
}

func (e SortMerchandisesBy) IsValid() bool {
	switch e {
	case SortMerchandisesByIDAsc, SortMerchandisesByIDDesc, SortMerchandisesByNameAsc, SortMerchandisesByNameDesc, SortMerchandisesByCodeAsc, SortMerchandisesByCodeDesc, SortMerchandisesByPriceAsc, SortMerchandisesByPriceDesc, SortMerchandisesByCurrencyAsc, SortMerchandisesByCurrencyDesc, SortMerchandisesByStateAsc, SortMerchandisesByStateDesc, SortMerchandisesByDescAsc, SortMerchandisesByDescDesc, SortMerchandisesByCommentAsc, SortMerchandisesByCommentDesc, SortMerchandisesByCreatedAtAsc, SortMerchandisesByCreatedAtDesc, SortMerchandisesByUpdatedAtAsc, SortMerchandisesByUpdatedAtDesc:
		return true
	}
	return false
}

func (e SortMerchandisesBy) String() string {
	return string(e)
}

func (e *SortMerchandisesBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortMerchandisesBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortMerchandisesBy", str)
	}
	return nil
}

func (e SortMerchandisesBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortNewebpayPaymentInfosBy string

const (
	SortNewebpayPaymentInfosByIDAsc          SortNewebpayPaymentInfosBy = "id_ASC"
	SortNewebpayPaymentInfosByIDDesc         SortNewebpayPaymentInfosBy = "id_DESC"
	SortNewebpayPaymentInfosByTokenTermAsc   SortNewebpayPaymentInfosBy = "tokenTerm_ASC"
	SortNewebpayPaymentInfosByTokenTermDesc  SortNewebpayPaymentInfosBy = "tokenTerm_DESC"
	SortNewebpayPaymentInfosByTokenValueAsc  SortNewebpayPaymentInfosBy = "tokenValue_ASC"
	SortNewebpayPaymentInfosByTokenValueDesc SortNewebpayPaymentInfosBy = "tokenValue_DESC"
	SortNewebpayPaymentInfosByTokenLifeAsc   SortNewebpayPaymentInfosBy = "tokenLife_ASC"
	SortNewebpayPaymentInfosByTokenLifeDesc  SortNewebpayPaymentInfosBy = "tokenLife_DESC"
	SortNewebpayPaymentInfosByCreatedAtAsc   SortNewebpayPaymentInfosBy = "createdAt_ASC"
	SortNewebpayPaymentInfosByCreatedAtDesc  SortNewebpayPaymentInfosBy = "createdAt_DESC"
	SortNewebpayPaymentInfosByUpdatedAtAsc   SortNewebpayPaymentInfosBy = "updatedAt_ASC"
	SortNewebpayPaymentInfosByUpdatedAtDesc  SortNewebpayPaymentInfosBy = "updatedAt_DESC"
)

var AllSortNewebpayPaymentInfosBy = []SortNewebpayPaymentInfosBy{
	SortNewebpayPaymentInfosByIDAsc,
	SortNewebpayPaymentInfosByIDDesc,
	SortNewebpayPaymentInfosByTokenTermAsc,
	SortNewebpayPaymentInfosByTokenTermDesc,
	SortNewebpayPaymentInfosByTokenValueAsc,
	SortNewebpayPaymentInfosByTokenValueDesc,
	SortNewebpayPaymentInfosByTokenLifeAsc,
	SortNewebpayPaymentInfosByTokenLifeDesc,
	SortNewebpayPaymentInfosByCreatedAtAsc,
	SortNewebpayPaymentInfosByCreatedAtDesc,
	SortNewebpayPaymentInfosByUpdatedAtAsc,
	SortNewebpayPaymentInfosByUpdatedAtDesc,
}

func (e SortNewebpayPaymentInfosBy) IsValid() bool {
	switch e {
	case SortNewebpayPaymentInfosByIDAsc, SortNewebpayPaymentInfosByIDDesc, SortNewebpayPaymentInfosByTokenTermAsc, SortNewebpayPaymentInfosByTokenTermDesc, SortNewebpayPaymentInfosByTokenValueAsc, SortNewebpayPaymentInfosByTokenValueDesc, SortNewebpayPaymentInfosByTokenLifeAsc, SortNewebpayPaymentInfosByTokenLifeDesc, SortNewebpayPaymentInfosByCreatedAtAsc, SortNewebpayPaymentInfosByCreatedAtDesc, SortNewebpayPaymentInfosByUpdatedAtAsc, SortNewebpayPaymentInfosByUpdatedAtDesc:
		return true
	}
	return false
}

func (e SortNewebpayPaymentInfosBy) String() string {
	return string(e)
}

func (e *SortNewebpayPaymentInfosBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortNewebpayPaymentInfosBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortNewebpayPaymentInfosBy", str)
	}
	return nil
}

func (e SortNewebpayPaymentInfosBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortNewebpayPaymentsBy string

const (
	SortNewebpayPaymentsByIDAsc                SortNewebpayPaymentsBy = "id_ASC"
	SortNewebpayPaymentsByIDDesc               SortNewebpayPaymentsBy = "id_DESC"
	SortNewebpayPaymentsByAmountAsc            SortNewebpayPaymentsBy = "amount_ASC"
	SortNewebpayPaymentsByAmountDesc           SortNewebpayPaymentsBy = "amount_DESC"
	SortNewebpayPaymentsByStatusAsc            SortNewebpayPaymentsBy = "status_ASC"
	SortNewebpayPaymentsByStatusDesc           SortNewebpayPaymentsBy = "status_DESC"
	SortNewebpayPaymentsByPaymentMethodAsc     SortNewebpayPaymentsBy = "paymentMethod_ASC"
	SortNewebpayPaymentsByPaymentMethodDesc    SortNewebpayPaymentsBy = "paymentMethod_DESC"
	SortNewebpayPaymentsByPaymentTimeAsc       SortNewebpayPaymentsBy = "paymentTime_ASC"
	SortNewebpayPaymentsByPaymentTimeDesc      SortNewebpayPaymentsBy = "paymentTime_DESC"
	SortNewebpayPaymentsByTradeNumberAsc       SortNewebpayPaymentsBy = "tradeNumber_ASC"
	SortNewebpayPaymentsByTradeNumberDesc      SortNewebpayPaymentsBy = "tradeNumber_DESC"
	SortNewebpayPaymentsByMessageAsc           SortNewebpayPaymentsBy = "message_ASC"
	SortNewebpayPaymentsByMessageDesc          SortNewebpayPaymentsBy = "message_DESC"
	SortNewebpayPaymentsByMerchantIDAsc        SortNewebpayPaymentsBy = "merchantId_ASC"
	SortNewebpayPaymentsByMerchantIDDesc       SortNewebpayPaymentsBy = "merchantId_DESC"
	SortNewebpayPaymentsByOrderNumberAsc       SortNewebpayPaymentsBy = "orderNumber_ASC"
	SortNewebpayPaymentsByOrderNumberDesc      SortNewebpayPaymentsBy = "orderNumber_DESC"
	SortNewebpayPaymentsByTokenUseStatusAsc    SortNewebpayPaymentsBy = "tokenUseStatus_ASC"
	SortNewebpayPaymentsByTokenUseStatusDesc   SortNewebpayPaymentsBy = "tokenUseStatus_DESC"
	SortNewebpayPaymentsByRespondCodeAsc       SortNewebpayPaymentsBy = "respondCode_ASC"
	SortNewebpayPaymentsByRespondCodeDesc      SortNewebpayPaymentsBy = "respondCode_DESC"
	SortNewebpayPaymentsByEciAsc               SortNewebpayPaymentsBy = "ECI_ASC"
	SortNewebpayPaymentsByEciDesc              SortNewebpayPaymentsBy = "ECI_DESC"
	SortNewebpayPaymentsByAuthCodeAsc          SortNewebpayPaymentsBy = "authCode_ASC"
	SortNewebpayPaymentsByAuthCodeDesc         SortNewebpayPaymentsBy = "authCode_DESC"
	SortNewebpayPaymentsByAuthBankAsc          SortNewebpayPaymentsBy = "authBank_ASC"
	SortNewebpayPaymentsByAuthBankDesc         SortNewebpayPaymentsBy = "authBank_DESC"
	SortNewebpayPaymentsByCardInfoLastFourAsc  SortNewebpayPaymentsBy = "cardInfoLastFour_ASC"
	SortNewebpayPaymentsByCardInfoLastFourDesc SortNewebpayPaymentsBy = "cardInfoLastFour_DESC"
	SortNewebpayPaymentsByCardInfoFirstSixAsc  SortNewebpayPaymentsBy = "cardInfoFirstSix_ASC"
	SortNewebpayPaymentsByCardInfoFirstSixDesc SortNewebpayPaymentsBy = "cardInfoFirstSix_DESC"
	SortNewebpayPaymentsByCardInfoExpAsc       SortNewebpayPaymentsBy = "cardInfoExp_ASC"
	SortNewebpayPaymentsByCardInfoExpDesc      SortNewebpayPaymentsBy = "cardInfoExp_DESC"
	SortNewebpayPaymentsByCreatedAtAsc         SortNewebpayPaymentsBy = "createdAt_ASC"
	SortNewebpayPaymentsByCreatedAtDesc        SortNewebpayPaymentsBy = "createdAt_DESC"
	SortNewebpayPaymentsByUpdatedAtAsc         SortNewebpayPaymentsBy = "updatedAt_ASC"
	SortNewebpayPaymentsByUpdatedAtDesc        SortNewebpayPaymentsBy = "updatedAt_DESC"
)

var AllSortNewebpayPaymentsBy = []SortNewebpayPaymentsBy{
	SortNewebpayPaymentsByIDAsc,
	SortNewebpayPaymentsByIDDesc,
	SortNewebpayPaymentsByAmountAsc,
	SortNewebpayPaymentsByAmountDesc,
	SortNewebpayPaymentsByStatusAsc,
	SortNewebpayPaymentsByStatusDesc,
	SortNewebpayPaymentsByPaymentMethodAsc,
	SortNewebpayPaymentsByPaymentMethodDesc,
	SortNewebpayPaymentsByPaymentTimeAsc,
	SortNewebpayPaymentsByPaymentTimeDesc,
	SortNewebpayPaymentsByTradeNumberAsc,
	SortNewebpayPaymentsByTradeNumberDesc,
	SortNewebpayPaymentsByMessageAsc,
	SortNewebpayPaymentsByMessageDesc,
	SortNewebpayPaymentsByMerchantIDAsc,
	SortNewebpayPaymentsByMerchantIDDesc,
	SortNewebpayPaymentsByOrderNumberAsc,
	SortNewebpayPaymentsByOrderNumberDesc,
	SortNewebpayPaymentsByTokenUseStatusAsc,
	SortNewebpayPaymentsByTokenUseStatusDesc,
	SortNewebpayPaymentsByRespondCodeAsc,
	SortNewebpayPaymentsByRespondCodeDesc,
	SortNewebpayPaymentsByEciAsc,
	SortNewebpayPaymentsByEciDesc,
	SortNewebpayPaymentsByAuthCodeAsc,
	SortNewebpayPaymentsByAuthCodeDesc,
	SortNewebpayPaymentsByAuthBankAsc,
	SortNewebpayPaymentsByAuthBankDesc,
	SortNewebpayPaymentsByCardInfoLastFourAsc,
	SortNewebpayPaymentsByCardInfoLastFourDesc,
	SortNewebpayPaymentsByCardInfoFirstSixAsc,
	SortNewebpayPaymentsByCardInfoFirstSixDesc,
	SortNewebpayPaymentsByCardInfoExpAsc,
	SortNewebpayPaymentsByCardInfoExpDesc,
	SortNewebpayPaymentsByCreatedAtAsc,
	SortNewebpayPaymentsByCreatedAtDesc,
	SortNewebpayPaymentsByUpdatedAtAsc,
	SortNewebpayPaymentsByUpdatedAtDesc,
}

func (e SortNewebpayPaymentsBy) IsValid() bool {
	switch e {
	case SortNewebpayPaymentsByIDAsc, SortNewebpayPaymentsByIDDesc, SortNewebpayPaymentsByAmountAsc, SortNewebpayPaymentsByAmountDesc, SortNewebpayPaymentsByStatusAsc, SortNewebpayPaymentsByStatusDesc, SortNewebpayPaymentsByPaymentMethodAsc, SortNewebpayPaymentsByPaymentMethodDesc, SortNewebpayPaymentsByPaymentTimeAsc, SortNewebpayPaymentsByPaymentTimeDesc, SortNewebpayPaymentsByTradeNumberAsc, SortNewebpayPaymentsByTradeNumberDesc, SortNewebpayPaymentsByMessageAsc, SortNewebpayPaymentsByMessageDesc, SortNewebpayPaymentsByMerchantIDAsc, SortNewebpayPaymentsByMerchantIDDesc, SortNewebpayPaymentsByOrderNumberAsc, SortNewebpayPaymentsByOrderNumberDesc, SortNewebpayPaymentsByTokenUseStatusAsc, SortNewebpayPaymentsByTokenUseStatusDesc, SortNewebpayPaymentsByRespondCodeAsc, SortNewebpayPaymentsByRespondCodeDesc, SortNewebpayPaymentsByEciAsc, SortNewebpayPaymentsByEciDesc, SortNewebpayPaymentsByAuthCodeAsc, SortNewebpayPaymentsByAuthCodeDesc, SortNewebpayPaymentsByAuthBankAsc, SortNewebpayPaymentsByAuthBankDesc, SortNewebpayPaymentsByCardInfoLastFourAsc, SortNewebpayPaymentsByCardInfoLastFourDesc, SortNewebpayPaymentsByCardInfoFirstSixAsc, SortNewebpayPaymentsByCardInfoFirstSixDesc, SortNewebpayPaymentsByCardInfoExpAsc, SortNewebpayPaymentsByCardInfoExpDesc, SortNewebpayPaymentsByCreatedAtAsc, SortNewebpayPaymentsByCreatedAtDesc, SortNewebpayPaymentsByUpdatedAtAsc, SortNewebpayPaymentsByUpdatedAtDesc:
		return true
	}
	return false
}

func (e SortNewebpayPaymentsBy) String() string {
	return string(e)
}

func (e *SortNewebpayPaymentsBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortNewebpayPaymentsBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortNewebpayPaymentsBy", str)
	}
	return nil
}

func (e SortNewebpayPaymentsBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortPromotionsBy string

const (
	SortPromotionsByIDAsc         SortPromotionsBy = "id_ASC"
	SortPromotionsByIDDesc        SortPromotionsBy = "id_DESC"
	SortPromotionsByCodeAsc       SortPromotionsBy = "code_ASC"
	SortPromotionsByCodeDesc      SortPromotionsBy = "code_DESC"
	SortPromotionsByPlanAsc       SortPromotionsBy = "plan_ASC"
	SortPromotionsByPlanDesc      SortPromotionsBy = "plan_DESC"
	SortPromotionsByStateAsc      SortPromotionsBy = "state_ASC"
	SortPromotionsByStateDesc     SortPromotionsBy = "state_DESC"
	SortPromotionsByStartAtAsc    SortPromotionsBy = "startAt_ASC"
	SortPromotionsByStartAtDesc   SortPromotionsBy = "startAt_DESC"
	SortPromotionsByEndAtAsc      SortPromotionsBy = "endAt_ASC"
	SortPromotionsByEndAtDesc     SortPromotionsBy = "endAt_DESC"
	SortPromotionsByDiscountAsc   SortPromotionsBy = "discount_ASC"
	SortPromotionsByDiscountDesc  SortPromotionsBy = "discount_DESC"
	SortPromotionsByCreatedAtAsc  SortPromotionsBy = "createdAt_ASC"
	SortPromotionsByCreatedAtDesc SortPromotionsBy = "createdAt_DESC"
	SortPromotionsByUpdatedAtAsc  SortPromotionsBy = "updatedAt_ASC"
	SortPromotionsByUpdatedAtDesc SortPromotionsBy = "updatedAt_DESC"
)

var AllSortPromotionsBy = []SortPromotionsBy{
	SortPromotionsByIDAsc,
	SortPromotionsByIDDesc,
	SortPromotionsByCodeAsc,
	SortPromotionsByCodeDesc,
	SortPromotionsByPlanAsc,
	SortPromotionsByPlanDesc,
	SortPromotionsByStateAsc,
	SortPromotionsByStateDesc,
	SortPromotionsByStartAtAsc,
	SortPromotionsByStartAtDesc,
	SortPromotionsByEndAtAsc,
	SortPromotionsByEndAtDesc,
	SortPromotionsByDiscountAsc,
	SortPromotionsByDiscountDesc,
	SortPromotionsByCreatedAtAsc,
	SortPromotionsByCreatedAtDesc,
	SortPromotionsByUpdatedAtAsc,
	SortPromotionsByUpdatedAtDesc,
}

func (e SortPromotionsBy) IsValid() bool {
	switch e {
	case SortPromotionsByIDAsc, SortPromotionsByIDDesc, SortPromotionsByCodeAsc, SortPromotionsByCodeDesc, SortPromotionsByPlanAsc, SortPromotionsByPlanDesc, SortPromotionsByStateAsc, SortPromotionsByStateDesc, SortPromotionsByStartAtAsc, SortPromotionsByStartAtDesc, SortPromotionsByEndAtAsc, SortPromotionsByEndAtDesc, SortPromotionsByDiscountAsc, SortPromotionsByDiscountDesc, SortPromotionsByCreatedAtAsc, SortPromotionsByCreatedAtDesc, SortPromotionsByUpdatedAtAsc, SortPromotionsByUpdatedAtDesc:
		return true
	}
	return false
}

func (e SortPromotionsBy) String() string {
	return string(e)
}

func (e *SortPromotionsBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortPromotionsBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortPromotionsBy", str)
	}
	return nil
}

func (e SortPromotionsBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortSubscriptionHistoriesBy string

const (
	SortSubscriptionHistoriesByIDAsc                     SortSubscriptionHistoriesBy = "id_ASC"
	SortSubscriptionHistoriesByIDDesc                    SortSubscriptionHistoriesBy = "id_DESC"
	SortSubscriptionHistoriesBySubscriptionCreatedAtAsc  SortSubscriptionHistoriesBy = "subscriptionCreatedAt_ASC"
	SortSubscriptionHistoriesBySubscriptionCreatedAtDesc SortSubscriptionHistoriesBy = "subscriptionCreatedAt_DESC"
	SortSubscriptionHistoriesBySubscriptionUpdatedAtAsc  SortSubscriptionHistoriesBy = "subscriptionUpdatedAt_ASC"
	SortSubscriptionHistoriesBySubscriptionUpdatedAtDesc SortSubscriptionHistoriesBy = "subscriptionUpdatedAt_DESC"
	SortSubscriptionHistoriesByStatusAsc                 SortSubscriptionHistoriesBy = "status_ASC"
	SortSubscriptionHistoriesByStatusDesc                SortSubscriptionHistoriesBy = "status_DESC"
	SortSubscriptionHistoriesByAmountAsc                 SortSubscriptionHistoriesBy = "amount_ASC"
	SortSubscriptionHistoriesByAmountDesc                SortSubscriptionHistoriesBy = "amount_DESC"
	SortSubscriptionHistoriesByCurrencyAsc               SortSubscriptionHistoriesBy = "currency_ASC"
	SortSubscriptionHistoriesByCurrencyDesc              SortSubscriptionHistoriesBy = "currency_DESC"
	SortSubscriptionHistoriesByDescAsc                   SortSubscriptionHistoriesBy = "desc_ASC"
	SortSubscriptionHistoriesByDescDesc                  SortSubscriptionHistoriesBy = "desc_DESC"
	SortSubscriptionHistoriesByEmailAsc                  SortSubscriptionHistoriesBy = "email_ASC"
	SortSubscriptionHistoriesByEmailDesc                 SortSubscriptionHistoriesBy = "email_DESC"
	SortSubscriptionHistoriesByOrderNumberAsc            SortSubscriptionHistoriesBy = "orderNumber_ASC"
	SortSubscriptionHistoriesByOrderNumberDesc           SortSubscriptionHistoriesBy = "orderNumber_DESC"
	SortSubscriptionHistoriesByFrequencyAsc              SortSubscriptionHistoriesBy = "frequency_ASC"
	SortSubscriptionHistoriesByFrequencyDesc             SortSubscriptionHistoriesBy = "frequency_DESC"
	SortSubscriptionHistoriesByTokenValueAsc             SortSubscriptionHistoriesBy = "tokenValue_ASC"
	SortSubscriptionHistoriesByTokenValueDesc            SortSubscriptionHistoriesBy = "tokenValue_DESC"
	SortSubscriptionHistoriesByTokenLifeAsc              SortSubscriptionHistoriesBy = "tokenLife_ASC"
	SortSubscriptionHistoriesByTokenLifeDesc             SortSubscriptionHistoriesBy = "tokenLife_DESC"
	SortSubscriptionHistoriesByTokenTermAsc              SortSubscriptionHistoriesBy = "tokenTerm_ASC"
	SortSubscriptionHistoriesByTokenTermDesc             SortSubscriptionHistoriesBy = "tokenTerm_DESC"
	SortSubscriptionHistoriesByPeriodLastSuccessDateAsc  SortSubscriptionHistoriesBy = "periodLastSuccessDate_ASC"
	SortSubscriptionHistoriesByPeriodLastSuccessDateDesc SortSubscriptionHistoriesBy = "periodLastSuccessDate_DESC"
	SortSubscriptionHistoriesByPeriodNextPayDateAsc      SortSubscriptionHistoriesBy = "periodNextPayDate_ASC"
	SortSubscriptionHistoriesByPeriodNextPayDateDesc     SortSubscriptionHistoriesBy = "periodNextPayDate_DESC"
	SortSubscriptionHistoriesByPeriodFirstDateAsc        SortSubscriptionHistoriesBy = "periodFirstDate_ASC"
	SortSubscriptionHistoriesByPeriodFirstDateDesc       SortSubscriptionHistoriesBy = "periodFirstDate_DESC"
	SortSubscriptionHistoriesByChangePlanDatetimeAsc     SortSubscriptionHistoriesBy = "changePlanDatetime_ASC"
	SortSubscriptionHistoriesByChangePlanDatetimeDesc    SortSubscriptionHistoriesBy = "changePlanDatetime_DESC"
	SortSubscriptionHistoriesByNoteAsc                   SortSubscriptionHistoriesBy = "note_ASC"
	SortSubscriptionHistoriesByNoteDesc                  SortSubscriptionHistoriesBy = "note_DESC"
	SortSubscriptionHistoriesByPromoteIDAsc              SortSubscriptionHistoriesBy = "promoteId_ASC"
	SortSubscriptionHistoriesByPromoteIDDesc             SortSubscriptionHistoriesBy = "promoteId_DESC"
	SortSubscriptionHistoriesByPostIDAsc                 SortSubscriptionHistoriesBy = "postId_ASC"
	SortSubscriptionHistoriesByPostIDDesc                SortSubscriptionHistoriesBy = "postId_DESC"
	SortSubscriptionHistoriesByOneTimeStartDateAsc       SortSubscriptionHistoriesBy = "oneTimeStartDate_ASC"
	SortSubscriptionHistoriesByOneTimeStartDateDesc      SortSubscriptionHistoriesBy = "oneTimeStartDate_DESC"
	SortSubscriptionHistoriesByOneTimeEndDateAsc         SortSubscriptionHistoriesBy = "oneTimeEndDate_ASC"
	SortSubscriptionHistoriesByOneTimeEndDateDesc        SortSubscriptionHistoriesBy = "oneTimeEndDate_DESC"
	SortSubscriptionHistoriesByActionAsc                 SortSubscriptionHistoriesBy = "action_ASC"
	SortSubscriptionHistoriesByActionDesc                SortSubscriptionHistoriesBy = "action_DESC"
)

var AllSortSubscriptionHistoriesBy = []SortSubscriptionHistoriesBy{
	SortSubscriptionHistoriesByIDAsc,
	SortSubscriptionHistoriesByIDDesc,
	SortSubscriptionHistoriesBySubscriptionCreatedAtAsc,
	SortSubscriptionHistoriesBySubscriptionCreatedAtDesc,
	SortSubscriptionHistoriesBySubscriptionUpdatedAtAsc,
	SortSubscriptionHistoriesBySubscriptionUpdatedAtDesc,
	SortSubscriptionHistoriesByStatusAsc,
	SortSubscriptionHistoriesByStatusDesc,
	SortSubscriptionHistoriesByAmountAsc,
	SortSubscriptionHistoriesByAmountDesc,
	SortSubscriptionHistoriesByCurrencyAsc,
	SortSubscriptionHistoriesByCurrencyDesc,
	SortSubscriptionHistoriesByDescAsc,
	SortSubscriptionHistoriesByDescDesc,
	SortSubscriptionHistoriesByEmailAsc,
	SortSubscriptionHistoriesByEmailDesc,
	SortSubscriptionHistoriesByOrderNumberAsc,
	SortSubscriptionHistoriesByOrderNumberDesc,
	SortSubscriptionHistoriesByFrequencyAsc,
	SortSubscriptionHistoriesByFrequencyDesc,
	SortSubscriptionHistoriesByTokenValueAsc,
	SortSubscriptionHistoriesByTokenValueDesc,
	SortSubscriptionHistoriesByTokenLifeAsc,
	SortSubscriptionHistoriesByTokenLifeDesc,
	SortSubscriptionHistoriesByTokenTermAsc,
	SortSubscriptionHistoriesByTokenTermDesc,
	SortSubscriptionHistoriesByPeriodLastSuccessDateAsc,
	SortSubscriptionHistoriesByPeriodLastSuccessDateDesc,
	SortSubscriptionHistoriesByPeriodNextPayDateAsc,
	SortSubscriptionHistoriesByPeriodNextPayDateDesc,
	SortSubscriptionHistoriesByPeriodFirstDateAsc,
	SortSubscriptionHistoriesByPeriodFirstDateDesc,
	SortSubscriptionHistoriesByChangePlanDatetimeAsc,
	SortSubscriptionHistoriesByChangePlanDatetimeDesc,
	SortSubscriptionHistoriesByNoteAsc,
	SortSubscriptionHistoriesByNoteDesc,
	SortSubscriptionHistoriesByPromoteIDAsc,
	SortSubscriptionHistoriesByPromoteIDDesc,
	SortSubscriptionHistoriesByPostIDAsc,
	SortSubscriptionHistoriesByPostIDDesc,
	SortSubscriptionHistoriesByOneTimeStartDateAsc,
	SortSubscriptionHistoriesByOneTimeStartDateDesc,
	SortSubscriptionHistoriesByOneTimeEndDateAsc,
	SortSubscriptionHistoriesByOneTimeEndDateDesc,
	SortSubscriptionHistoriesByActionAsc,
	SortSubscriptionHistoriesByActionDesc,
}

func (e SortSubscriptionHistoriesBy) IsValid() bool {
	switch e {
	case SortSubscriptionHistoriesByIDAsc, SortSubscriptionHistoriesByIDDesc, SortSubscriptionHistoriesBySubscriptionCreatedAtAsc, SortSubscriptionHistoriesBySubscriptionCreatedAtDesc, SortSubscriptionHistoriesBySubscriptionUpdatedAtAsc, SortSubscriptionHistoriesBySubscriptionUpdatedAtDesc, SortSubscriptionHistoriesByStatusAsc, SortSubscriptionHistoriesByStatusDesc, SortSubscriptionHistoriesByAmountAsc, SortSubscriptionHistoriesByAmountDesc, SortSubscriptionHistoriesByCurrencyAsc, SortSubscriptionHistoriesByCurrencyDesc, SortSubscriptionHistoriesByDescAsc, SortSubscriptionHistoriesByDescDesc, SortSubscriptionHistoriesByEmailAsc, SortSubscriptionHistoriesByEmailDesc, SortSubscriptionHistoriesByOrderNumberAsc, SortSubscriptionHistoriesByOrderNumberDesc, SortSubscriptionHistoriesByFrequencyAsc, SortSubscriptionHistoriesByFrequencyDesc, SortSubscriptionHistoriesByTokenValueAsc, SortSubscriptionHistoriesByTokenValueDesc, SortSubscriptionHistoriesByTokenLifeAsc, SortSubscriptionHistoriesByTokenLifeDesc, SortSubscriptionHistoriesByTokenTermAsc, SortSubscriptionHistoriesByTokenTermDesc, SortSubscriptionHistoriesByPeriodLastSuccessDateAsc, SortSubscriptionHistoriesByPeriodLastSuccessDateDesc, SortSubscriptionHistoriesByPeriodNextPayDateAsc, SortSubscriptionHistoriesByPeriodNextPayDateDesc, SortSubscriptionHistoriesByPeriodFirstDateAsc, SortSubscriptionHistoriesByPeriodFirstDateDesc, SortSubscriptionHistoriesByChangePlanDatetimeAsc, SortSubscriptionHistoriesByChangePlanDatetimeDesc, SortSubscriptionHistoriesByNoteAsc, SortSubscriptionHistoriesByNoteDesc, SortSubscriptionHistoriesByPromoteIDAsc, SortSubscriptionHistoriesByPromoteIDDesc, SortSubscriptionHistoriesByPostIDAsc, SortSubscriptionHistoriesByPostIDDesc, SortSubscriptionHistoriesByOneTimeStartDateAsc, SortSubscriptionHistoriesByOneTimeStartDateDesc, SortSubscriptionHistoriesByOneTimeEndDateAsc, SortSubscriptionHistoriesByOneTimeEndDateDesc, SortSubscriptionHistoriesByActionAsc, SortSubscriptionHistoriesByActionDesc:
		return true
	}
	return false
}

func (e SortSubscriptionHistoriesBy) String() string {
	return string(e)
}

func (e *SortSubscriptionHistoriesBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortSubscriptionHistoriesBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortSubscriptionHistoriesBy", str)
	}
	return nil
}

func (e SortSubscriptionHistoriesBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortSubscriptionsBy string

const (
	SortSubscriptionsByIDAsc                         SortSubscriptionsBy = "id_ASC"
	SortSubscriptionsByIDDesc                        SortSubscriptionsBy = "id_DESC"
	SortSubscriptionsByPaymentMethodAsc              SortSubscriptionsBy = "paymentMethod_ASC"
	SortSubscriptionsByPaymentMethodDesc             SortSubscriptionsBy = "paymentMethod_DESC"
	SortSubscriptionsByStatusAsc                     SortSubscriptionsBy = "status_ASC"
	SortSubscriptionsByStatusDesc                    SortSubscriptionsBy = "status_DESC"
	SortSubscriptionsByAmountAsc                     SortSubscriptionsBy = "amount_ASC"
	SortSubscriptionsByAmountDesc                    SortSubscriptionsBy = "amount_DESC"
	SortSubscriptionsByCurrencyAsc                   SortSubscriptionsBy = "currency_ASC"
	SortSubscriptionsByCurrencyDesc                  SortSubscriptionsBy = "currency_DESC"
	SortSubscriptionsByDescAsc                       SortSubscriptionsBy = "desc_ASC"
	SortSubscriptionsByDescDesc                      SortSubscriptionsBy = "desc_DESC"
	SortSubscriptionsByCommentAsc                    SortSubscriptionsBy = "comment_ASC"
	SortSubscriptionsByCommentDesc                   SortSubscriptionsBy = "comment_DESC"
	SortSubscriptionsByEmailAsc                      SortSubscriptionsBy = "email_ASC"
	SortSubscriptionsByEmailDesc                     SortSubscriptionsBy = "email_DESC"
	SortSubscriptionsByOrderNumberAsc                SortSubscriptionsBy = "orderNumber_ASC"
	SortSubscriptionsByOrderNumberDesc               SortSubscriptionsBy = "orderNumber_DESC"
	SortSubscriptionsByIsActiveAsc                   SortSubscriptionsBy = "isActive_ASC"
	SortSubscriptionsByIsActiveDesc                  SortSubscriptionsBy = "isActive_DESC"
	SortSubscriptionsByIsCanceledAsc                 SortSubscriptionsBy = "isCanceled_ASC"
	SortSubscriptionsByIsCanceledDesc                SortSubscriptionsBy = "isCanceled_DESC"
	SortSubscriptionsByFrequencyAsc                  SortSubscriptionsBy = "frequency_ASC"
	SortSubscriptionsByFrequencyDesc                 SortSubscriptionsBy = "frequency_DESC"
	SortSubscriptionsByNextFrequencyAsc              SortSubscriptionsBy = "nextFrequency_ASC"
	SortSubscriptionsByNextFrequencyDesc             SortSubscriptionsBy = "nextFrequency_DESC"
	SortSubscriptionsByPeriodFailureTimesAsc         SortSubscriptionsBy = "periodFailureTimes_ASC"
	SortSubscriptionsByPeriodFailureTimesDesc        SortSubscriptionsBy = "periodFailureTimes_DESC"
	SortSubscriptionsByPeriodLastSuccessDatetimeAsc  SortSubscriptionsBy = "periodLastSuccessDatetime_ASC"
	SortSubscriptionsByPeriodLastSuccessDatetimeDesc SortSubscriptionsBy = "periodLastSuccessDatetime_DESC"
	SortSubscriptionsByPeriodNextPayDatetimeAsc      SortSubscriptionsBy = "periodNextPayDatetime_ASC"
	SortSubscriptionsByPeriodNextPayDatetimeDesc     SortSubscriptionsBy = "periodNextPayDatetime_DESC"
	SortSubscriptionsByPeriodCreateDatetimeAsc       SortSubscriptionsBy = "periodCreateDatetime_ASC"
	SortSubscriptionsByPeriodCreateDatetimeDesc      SortSubscriptionsBy = "periodCreateDatetime_DESC"
	SortSubscriptionsByPeriodFirstDatetimeAsc        SortSubscriptionsBy = "periodFirstDatetime_ASC"
	SortSubscriptionsByPeriodFirstDatetimeDesc       SortSubscriptionsBy = "periodFirstDatetime_DESC"
	SortSubscriptionsByPeriodEndDatetimeAsc          SortSubscriptionsBy = "periodEndDatetime_ASC"
	SortSubscriptionsByPeriodEndDatetimeDesc         SortSubscriptionsBy = "periodEndDatetime_DESC"
	SortSubscriptionsByChangePlanDatetimeAsc         SortSubscriptionsBy = "changePlanDatetime_ASC"
	SortSubscriptionsByChangePlanDatetimeDesc        SortSubscriptionsBy = "changePlanDatetime_DESC"
	SortSubscriptionsByNoteAsc                       SortSubscriptionsBy = "note_ASC"
	SortSubscriptionsByNoteDesc                      SortSubscriptionsBy = "note_DESC"
	SortSubscriptionsByPromoteIDAsc                  SortSubscriptionsBy = "promoteId_ASC"
	SortSubscriptionsByPromoteIDDesc                 SortSubscriptionsBy = "promoteId_DESC"
	SortSubscriptionsByPostIDAsc                     SortSubscriptionsBy = "postId_ASC"
	SortSubscriptionsByPostIDDesc                    SortSubscriptionsBy = "postId_DESC"
	SortSubscriptionsByOneTimeStartDatetimeAsc       SortSubscriptionsBy = "oneTimeStartDatetime_ASC"
	SortSubscriptionsByOneTimeStartDatetimeDesc      SortSubscriptionsBy = "oneTimeStartDatetime_DESC"
	SortSubscriptionsByOneTimeEndDatetimeAsc         SortSubscriptionsBy = "oneTimeEndDatetime_ASC"
	SortSubscriptionsByOneTimeEndDatetimeDesc        SortSubscriptionsBy = "oneTimeEndDatetime_DESC"
	SortSubscriptionsByCreatedAtAsc                  SortSubscriptionsBy = "createdAt_ASC"
	SortSubscriptionsByCreatedAtDesc                 SortSubscriptionsBy = "createdAt_DESC"
	SortSubscriptionsByUpdatedAtAsc                  SortSubscriptionsBy = "updatedAt_ASC"
	SortSubscriptionsByUpdatedAtDesc                 SortSubscriptionsBy = "updatedAt_DESC"
)

var AllSortSubscriptionsBy = []SortSubscriptionsBy{
	SortSubscriptionsByIDAsc,
	SortSubscriptionsByIDDesc,
	SortSubscriptionsByPaymentMethodAsc,
	SortSubscriptionsByPaymentMethodDesc,
	SortSubscriptionsByStatusAsc,
	SortSubscriptionsByStatusDesc,
	SortSubscriptionsByAmountAsc,
	SortSubscriptionsByAmountDesc,
	SortSubscriptionsByCurrencyAsc,
	SortSubscriptionsByCurrencyDesc,
	SortSubscriptionsByDescAsc,
	SortSubscriptionsByDescDesc,
	SortSubscriptionsByCommentAsc,
	SortSubscriptionsByCommentDesc,
	SortSubscriptionsByEmailAsc,
	SortSubscriptionsByEmailDesc,
	SortSubscriptionsByOrderNumberAsc,
	SortSubscriptionsByOrderNumberDesc,
	SortSubscriptionsByIsActiveAsc,
	SortSubscriptionsByIsActiveDesc,
	SortSubscriptionsByIsCanceledAsc,
	SortSubscriptionsByIsCanceledDesc,
	SortSubscriptionsByFrequencyAsc,
	SortSubscriptionsByFrequencyDesc,
	SortSubscriptionsByNextFrequencyAsc,
	SortSubscriptionsByNextFrequencyDesc,
	SortSubscriptionsByPeriodFailureTimesAsc,
	SortSubscriptionsByPeriodFailureTimesDesc,
	SortSubscriptionsByPeriodLastSuccessDatetimeAsc,
	SortSubscriptionsByPeriodLastSuccessDatetimeDesc,
	SortSubscriptionsByPeriodNextPayDatetimeAsc,
	SortSubscriptionsByPeriodNextPayDatetimeDesc,
	SortSubscriptionsByPeriodCreateDatetimeAsc,
	SortSubscriptionsByPeriodCreateDatetimeDesc,
	SortSubscriptionsByPeriodFirstDatetimeAsc,
	SortSubscriptionsByPeriodFirstDatetimeDesc,
	SortSubscriptionsByPeriodEndDatetimeAsc,
	SortSubscriptionsByPeriodEndDatetimeDesc,
	SortSubscriptionsByChangePlanDatetimeAsc,
	SortSubscriptionsByChangePlanDatetimeDesc,
	SortSubscriptionsByNoteAsc,
	SortSubscriptionsByNoteDesc,
	SortSubscriptionsByPromoteIDAsc,
	SortSubscriptionsByPromoteIDDesc,
	SortSubscriptionsByPostIDAsc,
	SortSubscriptionsByPostIDDesc,
	SortSubscriptionsByOneTimeStartDatetimeAsc,
	SortSubscriptionsByOneTimeStartDatetimeDesc,
	SortSubscriptionsByOneTimeEndDatetimeAsc,
	SortSubscriptionsByOneTimeEndDatetimeDesc,
	SortSubscriptionsByCreatedAtAsc,
	SortSubscriptionsByCreatedAtDesc,
	SortSubscriptionsByUpdatedAtAsc,
	SortSubscriptionsByUpdatedAtDesc,
}

func (e SortSubscriptionsBy) IsValid() bool {
	switch e {
	case SortSubscriptionsByIDAsc, SortSubscriptionsByIDDesc, SortSubscriptionsByPaymentMethodAsc, SortSubscriptionsByPaymentMethodDesc, SortSubscriptionsByStatusAsc, SortSubscriptionsByStatusDesc, SortSubscriptionsByAmountAsc, SortSubscriptionsByAmountDesc, SortSubscriptionsByCurrencyAsc, SortSubscriptionsByCurrencyDesc, SortSubscriptionsByDescAsc, SortSubscriptionsByDescDesc, SortSubscriptionsByCommentAsc, SortSubscriptionsByCommentDesc, SortSubscriptionsByEmailAsc, SortSubscriptionsByEmailDesc, SortSubscriptionsByOrderNumberAsc, SortSubscriptionsByOrderNumberDesc, SortSubscriptionsByIsActiveAsc, SortSubscriptionsByIsActiveDesc, SortSubscriptionsByIsCanceledAsc, SortSubscriptionsByIsCanceledDesc, SortSubscriptionsByFrequencyAsc, SortSubscriptionsByFrequencyDesc, SortSubscriptionsByNextFrequencyAsc, SortSubscriptionsByNextFrequencyDesc, SortSubscriptionsByPeriodFailureTimesAsc, SortSubscriptionsByPeriodFailureTimesDesc, SortSubscriptionsByPeriodLastSuccessDatetimeAsc, SortSubscriptionsByPeriodLastSuccessDatetimeDesc, SortSubscriptionsByPeriodNextPayDatetimeAsc, SortSubscriptionsByPeriodNextPayDatetimeDesc, SortSubscriptionsByPeriodCreateDatetimeAsc, SortSubscriptionsByPeriodCreateDatetimeDesc, SortSubscriptionsByPeriodFirstDatetimeAsc, SortSubscriptionsByPeriodFirstDatetimeDesc, SortSubscriptionsByPeriodEndDatetimeAsc, SortSubscriptionsByPeriodEndDatetimeDesc, SortSubscriptionsByChangePlanDatetimeAsc, SortSubscriptionsByChangePlanDatetimeDesc, SortSubscriptionsByNoteAsc, SortSubscriptionsByNoteDesc, SortSubscriptionsByPromoteIDAsc, SortSubscriptionsByPromoteIDDesc, SortSubscriptionsByPostIDAsc, SortSubscriptionsByPostIDDesc, SortSubscriptionsByOneTimeStartDatetimeAsc, SortSubscriptionsByOneTimeStartDatetimeDesc, SortSubscriptionsByOneTimeEndDatetimeAsc, SortSubscriptionsByOneTimeEndDatetimeDesc, SortSubscriptionsByCreatedAtAsc, SortSubscriptionsByCreatedAtDesc, SortSubscriptionsByUpdatedAtAsc, SortSubscriptionsByUpdatedAtDesc:
		return true
	}
	return false
}

func (e SortSubscriptionsBy) String() string {
	return string(e)
}

func (e *SortSubscriptionsBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortSubscriptionsBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortSubscriptionsBy", str)
	}
	return nil
}

func (e SortSubscriptionsBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// For Custom Mutation
type CreateSubscriptionStatusType string

const (
	CreateSubscriptionStatusTypePaying CreateSubscriptionStatusType = "paying"
)

var AllCreateSubscriptionStatusType = []CreateSubscriptionStatusType{
	CreateSubscriptionStatusTypePaying,
}

func (e CreateSubscriptionStatusType) IsValid() bool {
	switch e {
	case CreateSubscriptionStatusTypePaying:
		return true
	}
	return false
}

func (e CreateSubscriptionStatusType) String() string {
	return string(e)
}

func (e *CreateSubscriptionStatusType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CreateSubscriptionStatusType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid createSubscriptionStatusType", str)
	}
	return nil
}

func (e CreateSubscriptionStatusType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type InvoiceCategoryType string

const (
	InvoiceCategoryTypeB2b InvoiceCategoryType = "b2b"
	InvoiceCategoryTypeB2c InvoiceCategoryType = "b2c"
)

var AllInvoiceCategoryType = []InvoiceCategoryType{
	InvoiceCategoryTypeB2b,
	InvoiceCategoryTypeB2c,
}

func (e InvoiceCategoryType) IsValid() bool {
	switch e {
	case InvoiceCategoryTypeB2b, InvoiceCategoryTypeB2c:
		return true
	}
	return false
}

func (e InvoiceCategoryType) String() string {
	return string(e)
}

func (e *InvoiceCategoryType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = InvoiceCategoryType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid invoiceCategoryType", str)
	}
	return nil
}

func (e InvoiceCategoryType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type InvoiceStatusType string

const (
	InvoiceStatusTypeSuccess   InvoiceStatusType = "success"
	InvoiceStatusTypeFailed    InvoiceStatusType = "failed"
	InvoiceStatusTypeCancelled InvoiceStatusType = "cancelled"
)

var AllInvoiceStatusType = []InvoiceStatusType{
	InvoiceStatusTypeSuccess,
	InvoiceStatusTypeFailed,
	InvoiceStatusTypeCancelled,
}

func (e InvoiceStatusType) IsValid() bool {
	switch e {
	case InvoiceStatusTypeSuccess, InvoiceStatusTypeFailed, InvoiceStatusTypeCancelled:
		return true
	}
	return false
}

func (e InvoiceStatusType) String() string {
	return string(e)
}

func (e *InvoiceStatusType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = InvoiceStatusType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid invoiceStatusType", str)
	}
	return nil
}

func (e InvoiceStatusType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MarketingMembershipStatusType string

const (
	MarketingMembershipStatusTypeActive   MarketingMembershipStatusType = "active"
	MarketingMembershipStatusTypeInactive MarketingMembershipStatusType = "inactive"
)

var AllMarketingMembershipStatusType = []MarketingMembershipStatusType{
	MarketingMembershipStatusTypeActive,
	MarketingMembershipStatusTypeInactive,
}

func (e MarketingMembershipStatusType) IsValid() bool {
	switch e {
	case MarketingMembershipStatusTypeActive, MarketingMembershipStatusTypeInactive:
		return true
	}
	return false
}

func (e MarketingMembershipStatusType) String() string {
	return string(e)
}

func (e *MarketingMembershipStatusType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarketingMembershipStatusType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid marketingMembershipStatusType", str)
	}
	return nil
}

func (e MarketingMembershipStatusType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MemberGenderType string

const (
	MemberGenderTypeM  MemberGenderType = "M"
	MemberGenderTypeF  MemberGenderType = "F"
	MemberGenderTypeNa MemberGenderType = "NA"
)

var AllMemberGenderType = []MemberGenderType{
	MemberGenderTypeM,
	MemberGenderTypeF,
	MemberGenderTypeNa,
}

func (e MemberGenderType) IsValid() bool {
	switch e {
	case MemberGenderTypeM, MemberGenderTypeF, MemberGenderTypeNa:
		return true
	}
	return false
}

func (e MemberGenderType) String() string {
	return string(e)
}

func (e *MemberGenderType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MemberGenderType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid memberGenderType", str)
	}
	return nil
}

func (e MemberGenderType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MemberStateType string

const (
	MemberStateTypeActive   MemberStateType = "active"
	MemberStateTypeInactive MemberStateType = "inactive"
)

var AllMemberStateType = []MemberStateType{
	MemberStateTypeActive,
	MemberStateTypeInactive,
}

func (e MemberStateType) IsValid() bool {
	switch e {
	case MemberStateTypeActive, MemberStateTypeInactive:
		return true
	}
	return false
}

func (e MemberStateType) String() string {
	return string(e)
}

func (e *MemberStateType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MemberStateType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid memberStateType", str)
	}
	return nil
}

func (e MemberStateType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MemberTypeType string

const (
	MemberTypeTypeSubscribeYearly  MemberTypeType = "subscribe_yearly"
	MemberTypeTypeSubscribeMonthly MemberTypeType = "subscribe_monthly"
	MemberTypeTypeSubscribeOneTime MemberTypeType = "subscribe_one_time"
	MemberTypeTypeMarketing        MemberTypeType = "marketing"
	MemberTypeTypeNone             MemberTypeType = "none"
)

var AllMemberTypeType = []MemberTypeType{
	MemberTypeTypeSubscribeYearly,
	MemberTypeTypeSubscribeMonthly,
	MemberTypeTypeSubscribeOneTime,
	MemberTypeTypeMarketing,
	MemberTypeTypeNone,
}

func (e MemberTypeType) IsValid() bool {
	switch e {
	case MemberTypeTypeSubscribeYearly, MemberTypeTypeSubscribeMonthly, MemberTypeTypeSubscribeOneTime, MemberTypeTypeMarketing, MemberTypeTypeNone:
		return true
	}
	return false
}

func (e MemberTypeType) String() string {
	return string(e)
}

func (e *MemberTypeType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MemberTypeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid memberTypeType", str)
	}
	return nil
}

func (e MemberTypeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MerchandiseCurrencyType string

const (
	MerchandiseCurrencyTypeTwd MerchandiseCurrencyType = "TWD"
)

var AllMerchandiseCurrencyType = []MerchandiseCurrencyType{
	MerchandiseCurrencyTypeTwd,
}

func (e MerchandiseCurrencyType) IsValid() bool {
	switch e {
	case MerchandiseCurrencyTypeTwd:
		return true
	}
	return false
}

func (e MerchandiseCurrencyType) String() string {
	return string(e)
}

func (e *MerchandiseCurrencyType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MerchandiseCurrencyType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid merchandiseCurrencyType", str)
	}
	return nil
}

func (e MerchandiseCurrencyType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MerchandiseStateType string

const (
	MerchandiseStateTypeActive   MerchandiseStateType = "active"
	MerchandiseStateTypeInactive MerchandiseStateType = "inactive"
)

var AllMerchandiseStateType = []MerchandiseStateType{
	MerchandiseStateTypeActive,
	MerchandiseStateTypeInactive,
}

func (e MerchandiseStateType) IsValid() bool {
	switch e {
	case MerchandiseStateTypeActive, MerchandiseStateTypeInactive:
		return true
	}
	return false
}

func (e MerchandiseStateType) String() string {
	return string(e)
}

func (e *MerchandiseStateType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MerchandiseStateType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid merchandiseStateType", str)
	}
	return nil
}

func (e MerchandiseStateType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PromotionPlanType string

const (
	PromotionPlanTypeYearly  PromotionPlanType = "yearly"
	PromotionPlanTypeMonthly PromotionPlanType = "monthly"
)

var AllPromotionPlanType = []PromotionPlanType{
	PromotionPlanTypeYearly,
	PromotionPlanTypeMonthly,
}

func (e PromotionPlanType) IsValid() bool {
	switch e {
	case PromotionPlanTypeYearly, PromotionPlanTypeMonthly:
		return true
	}
	return false
}

func (e PromotionPlanType) String() string {
	return string(e)
}

func (e *PromotionPlanType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PromotionPlanType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid promotionPlanType", str)
	}
	return nil
}

func (e PromotionPlanType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PromotionStateType string

const (
	PromotionStateTypeActive   PromotionStateType = "active"
	PromotionStateTypeInactive PromotionStateType = "inactive"
)

var AllPromotionStateType = []PromotionStateType{
	PromotionStateTypeActive,
	PromotionStateTypeInactive,
}

func (e PromotionStateType) IsValid() bool {
	switch e {
	case PromotionStateTypeActive, PromotionStateTypeInactive:
		return true
	}
	return false
}

func (e PromotionStateType) String() string {
	return string(e)
}

func (e *PromotionStateType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PromotionStateType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid promotionStateType", str)
	}
	return nil
}

func (e PromotionStateType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SubscriptionCurrencyType string

const (
	SubscriptionCurrencyTypeTwd SubscriptionCurrencyType = "TWD"
)

var AllSubscriptionCurrencyType = []SubscriptionCurrencyType{
	SubscriptionCurrencyTypeTwd,
}

func (e SubscriptionCurrencyType) IsValid() bool {
	switch e {
	case SubscriptionCurrencyTypeTwd:
		return true
	}
	return false
}

func (e SubscriptionCurrencyType) String() string {
	return string(e)
}

func (e *SubscriptionCurrencyType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionCurrencyType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid subscriptionCurrencyType", str)
	}
	return nil
}

func (e SubscriptionCurrencyType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SubscriptionFrequencyType string

const (
	SubscriptionFrequencyTypeOneTime SubscriptionFrequencyType = "one_time"
	SubscriptionFrequencyTypeYearly  SubscriptionFrequencyType = "yearly"
	SubscriptionFrequencyTypeMonthly SubscriptionFrequencyType = "monthly"
)

var AllSubscriptionFrequencyType = []SubscriptionFrequencyType{
	SubscriptionFrequencyTypeOneTime,
	SubscriptionFrequencyTypeYearly,
	SubscriptionFrequencyTypeMonthly,
}

func (e SubscriptionFrequencyType) IsValid() bool {
	switch e {
	case SubscriptionFrequencyTypeOneTime, SubscriptionFrequencyTypeYearly, SubscriptionFrequencyTypeMonthly:
		return true
	}
	return false
}

func (e SubscriptionFrequencyType) String() string {
	return string(e)
}

func (e *SubscriptionFrequencyType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionFrequencyType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid subscriptionFrequencyType", str)
	}
	return nil
}

func (e SubscriptionFrequencyType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SubscriptionHistoryActionType string

const (
	SubscriptionHistoryActionTypePurge     SubscriptionHistoryActionType = "purge"
	SubscriptionHistoryActionTypeUpgrade   SubscriptionHistoryActionType = "upgrade"
	SubscriptionHistoryActionTypeCancelled SubscriptionHistoryActionType = "cancelled"
)

var AllSubscriptionHistoryActionType = []SubscriptionHistoryActionType{
	SubscriptionHistoryActionTypePurge,
	SubscriptionHistoryActionTypeUpgrade,
	SubscriptionHistoryActionTypeCancelled,
}

func (e SubscriptionHistoryActionType) IsValid() bool {
	switch e {
	case SubscriptionHistoryActionTypePurge, SubscriptionHistoryActionTypeUpgrade, SubscriptionHistoryActionTypeCancelled:
		return true
	}
	return false
}

func (e SubscriptionHistoryActionType) String() string {
	return string(e)
}

func (e *SubscriptionHistoryActionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionHistoryActionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid subscriptionHistoryActionType", str)
	}
	return nil
}

func (e SubscriptionHistoryActionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SubscriptionHistoryCurrencyType string

const (
	SubscriptionHistoryCurrencyTypeTwd SubscriptionHistoryCurrencyType = "TWD"
)

var AllSubscriptionHistoryCurrencyType = []SubscriptionHistoryCurrencyType{
	SubscriptionHistoryCurrencyTypeTwd,
}

func (e SubscriptionHistoryCurrencyType) IsValid() bool {
	switch e {
	case SubscriptionHistoryCurrencyTypeTwd:
		return true
	}
	return false
}

func (e SubscriptionHistoryCurrencyType) String() string {
	return string(e)
}

func (e *SubscriptionHistoryCurrencyType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionHistoryCurrencyType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid subscriptionHistoryCurrencyType", str)
	}
	return nil
}

func (e SubscriptionHistoryCurrencyType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SubscriptionHistoryFrequencyType string

const (
	SubscriptionHistoryFrequencyTypeOneTime SubscriptionHistoryFrequencyType = "one_time"
	SubscriptionHistoryFrequencyTypeYearly  SubscriptionHistoryFrequencyType = "yearly"
	SubscriptionHistoryFrequencyTypeMonthly SubscriptionHistoryFrequencyType = "monthly"
)

var AllSubscriptionHistoryFrequencyType = []SubscriptionHistoryFrequencyType{
	SubscriptionHistoryFrequencyTypeOneTime,
	SubscriptionHistoryFrequencyTypeYearly,
	SubscriptionHistoryFrequencyTypeMonthly,
}

func (e SubscriptionHistoryFrequencyType) IsValid() bool {
	switch e {
	case SubscriptionHistoryFrequencyTypeOneTime, SubscriptionHistoryFrequencyTypeYearly, SubscriptionHistoryFrequencyTypeMonthly:
		return true
	}
	return false
}

func (e SubscriptionHistoryFrequencyType) String() string {
	return string(e)
}

func (e *SubscriptionHistoryFrequencyType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionHistoryFrequencyType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid subscriptionHistoryFrequencyType", str)
	}
	return nil
}

func (e SubscriptionHistoryFrequencyType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SubscriptionHistoryStatusType string

const (
	SubscriptionHistoryStatusTypeToPay     SubscriptionHistoryStatusType = "to_pay"
	SubscriptionHistoryStatusTypePaying    SubscriptionHistoryStatusType = "paying"
	SubscriptionHistoryStatusTypePaid      SubscriptionHistoryStatusType = "paid"
	SubscriptionHistoryStatusTypeFail      SubscriptionHistoryStatusType = "fail"
	SubscriptionHistoryStatusTypeStopped   SubscriptionHistoryStatusType = "stopped"
	SubscriptionHistoryStatusTypeCancelled SubscriptionHistoryStatusType = "cancelled"
	SubscriptionHistoryStatusTypeInvalid   SubscriptionHistoryStatusType = "invalid"
)

var AllSubscriptionHistoryStatusType = []SubscriptionHistoryStatusType{
	SubscriptionHistoryStatusTypeToPay,
	SubscriptionHistoryStatusTypePaying,
	SubscriptionHistoryStatusTypePaid,
	SubscriptionHistoryStatusTypeFail,
	SubscriptionHistoryStatusTypeStopped,
	SubscriptionHistoryStatusTypeCancelled,
	SubscriptionHistoryStatusTypeInvalid,
}

func (e SubscriptionHistoryStatusType) IsValid() bool {
	switch e {
	case SubscriptionHistoryStatusTypeToPay, SubscriptionHistoryStatusTypePaying, SubscriptionHistoryStatusTypePaid, SubscriptionHistoryStatusTypeFail, SubscriptionHistoryStatusTypeStopped, SubscriptionHistoryStatusTypeCancelled, SubscriptionHistoryStatusTypeInvalid:
		return true
	}
	return false
}

func (e SubscriptionHistoryStatusType) String() string {
	return string(e)
}

func (e *SubscriptionHistoryStatusType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionHistoryStatusType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid subscriptionHistoryStatusType", str)
	}
	return nil
}

func (e SubscriptionHistoryStatusType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SubscriptionNextFrequencyType string

const (
	SubscriptionNextFrequencyTypeNone    SubscriptionNextFrequencyType = "none"
	SubscriptionNextFrequencyTypeYearly  SubscriptionNextFrequencyType = "yearly"
	SubscriptionNextFrequencyTypeMonthly SubscriptionNextFrequencyType = "monthly"
)

var AllSubscriptionNextFrequencyType = []SubscriptionNextFrequencyType{
	SubscriptionNextFrequencyTypeNone,
	SubscriptionNextFrequencyTypeYearly,
	SubscriptionNextFrequencyTypeMonthly,
}

func (e SubscriptionNextFrequencyType) IsValid() bool {
	switch e {
	case SubscriptionNextFrequencyTypeNone, SubscriptionNextFrequencyTypeYearly, SubscriptionNextFrequencyTypeMonthly:
		return true
	}
	return false
}

func (e SubscriptionNextFrequencyType) String() string {
	return string(e)
}

func (e *SubscriptionNextFrequencyType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionNextFrequencyType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid subscriptionNextFrequencyType", str)
	}
	return nil
}

func (e SubscriptionNextFrequencyType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SubscriptionPaymentMethodType string

const (
	SubscriptionPaymentMethodTypeNewebpay   SubscriptionPaymentMethodType = "newebpay"
	SubscriptionPaymentMethodTypeApplepay   SubscriptionPaymentMethodType = "applepay"
	SubscriptionPaymentMethodTypeAndroidpay SubscriptionPaymentMethodType = "androidpay"
)

var AllSubscriptionPaymentMethodType = []SubscriptionPaymentMethodType{
	SubscriptionPaymentMethodTypeNewebpay,
	SubscriptionPaymentMethodTypeApplepay,
	SubscriptionPaymentMethodTypeAndroidpay,
}

func (e SubscriptionPaymentMethodType) IsValid() bool {
	switch e {
	case SubscriptionPaymentMethodTypeNewebpay, SubscriptionPaymentMethodTypeApplepay, SubscriptionPaymentMethodTypeAndroidpay:
		return true
	}
	return false
}

func (e SubscriptionPaymentMethodType) String() string {
	return string(e)
}

func (e *SubscriptionPaymentMethodType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionPaymentMethodType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid subscriptionPaymentMethodType", str)
	}
	return nil
}

func (e SubscriptionPaymentMethodType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SubscriptionStatusType string

const (
	SubscriptionStatusTypeToPay   SubscriptionStatusType = "to_pay"
	SubscriptionStatusTypePaying  SubscriptionStatusType = "paying"
	SubscriptionStatusTypePaid    SubscriptionStatusType = "paid"
	SubscriptionStatusTypeFail    SubscriptionStatusType = "fail"
	SubscriptionStatusTypeStopped SubscriptionStatusType = "stopped"
	SubscriptionStatusTypeInvalid SubscriptionStatusType = "invalid"
)

var AllSubscriptionStatusType = []SubscriptionStatusType{
	SubscriptionStatusTypeToPay,
	SubscriptionStatusTypePaying,
	SubscriptionStatusTypePaid,
	SubscriptionStatusTypeFail,
	SubscriptionStatusTypeStopped,
	SubscriptionStatusTypeInvalid,
}

func (e SubscriptionStatusType) IsValid() bool {
	switch e {
	case SubscriptionStatusTypeToPay, SubscriptionStatusTypePaying, SubscriptionStatusTypePaid, SubscriptionStatusTypeFail, SubscriptionStatusTypeStopped, SubscriptionStatusTypeInvalid:
		return true
	}
	return false
}

func (e SubscriptionStatusType) String() string {
	return string(e)
}

func (e *SubscriptionStatusType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionStatusType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid subscriptionStatusType", str)
	}
	return nil
}

func (e SubscriptionStatusType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UpdateMemberStateType string

const (
	UpdateMemberStateTypeInactive UpdateMemberStateType = "inactive"
)

var AllUpdateMemberStateType = []UpdateMemberStateType{
	UpdateMemberStateTypeInactive,
}

func (e UpdateMemberStateType) IsValid() bool {
	switch e {
	case UpdateMemberStateTypeInactive:
		return true
	}
	return false
}

func (e UpdateMemberStateType) String() string {
	return string(e)
}

func (e *UpdateMemberStateType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UpdateMemberStateType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid updateMemberStateType", str)
	}
	return nil
}

func (e UpdateMemberStateType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UpdateSubscriptionNextFrequencyType string

const (
	UpdateSubscriptionNextFrequencyTypeYearly UpdateSubscriptionNextFrequencyType = "yearly"
)

var AllUpdateSubscriptionNextFrequencyType = []UpdateSubscriptionNextFrequencyType{
	UpdateSubscriptionNextFrequencyTypeYearly,
}

func (e UpdateSubscriptionNextFrequencyType) IsValid() bool {
	switch e {
	case UpdateSubscriptionNextFrequencyTypeYearly:
		return true
	}
	return false
}

func (e UpdateSubscriptionNextFrequencyType) String() string {
	return string(e)
}

func (e *UpdateSubscriptionNextFrequencyType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UpdateSubscriptionNextFrequencyType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid updateSubscriptionNextFrequencyType", str)
	}
	return nil
}

func (e UpdateSubscriptionNextFrequencyType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UpdateSubscriptionStatusType string

const (
	UpdateSubscriptionStatusTypeCancelled UpdateSubscriptionStatusType = "cancelled"
)

var AllUpdateSubscriptionStatusType = []UpdateSubscriptionStatusType{
	UpdateSubscriptionStatusTypeCancelled,
}

func (e UpdateSubscriptionStatusType) IsValid() bool {
	switch e {
	case UpdateSubscriptionStatusTypeCancelled:
		return true
	}
	return false
}

func (e UpdateSubscriptionStatusType) String() string {
	return string(e)
}

func (e *UpdateSubscriptionStatusType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UpdateSubscriptionStatusType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid updateSubscriptionStatusType", str)
	}
	return nil
}

func (e UpdateSubscriptionStatusType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
